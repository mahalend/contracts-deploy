{"id":"de8ba36a058156d8793bb8f42ccfd358","_format":"hh-sol-build-info-1","solcVersion":"0.7.5","solcLongVersion":"0.7.5+commit.eb77ed08","input":{"language":"Solidity","sources":{"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol":{"content":"/**\n *Submitted for verification at Etherscan.io on 2020-12-10\n */\n\n// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\ninterface IGovernancePowerDelegationToken {\n  enum DelegationType {VOTING_POWER, PROPOSITION_POWER}\n\n  /**\n   * @dev emitted when a user delegates to another\n   * @param delegator the delegator\n   * @param delegatee the delegatee\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\n   **/\n  event DelegateChanged(\n    address indexed delegator,\n    address indexed delegatee,\n    DelegationType delegationType\n  );\n\n  /**\n   * @dev emitted when an action changes the delegated power of a user\n   * @param user the user which delegated power has changed\n   * @param amount the amount of delegated power for the user\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\n   **/\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\n\n  /**\n   * @dev delegates the specific power to a delegatee\n   * @param delegatee the user which delegated power has changed\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\n   **/\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\n\n  /**\n   * @dev delegates all the powers to a specific user\n   * @param delegatee the user to which the power will be delegated\n   **/\n  function delegate(address delegatee) external virtual;\n\n  /**\n   * @dev returns the delegatee of an user\n   * @param delegator the address of the delegator\n   **/\n  function getDelegateeByType(address delegator, DelegationType delegationType)\n    external\n    view\n    virtual\n    returns (address);\n\n  /**\n   * @dev returns the current delegated power of a user. The current power is the\n   * power delegated at the time of the last snapshot\n   * @param user the user\n   **/\n  function getPowerCurrent(address user, DelegationType delegationType)\n    external\n    view\n    virtual\n    returns (uint256);\n\n  /**\n   * @dev returns the delegated power of a user at a certain block\n   * @param user the user\n   **/\n  function getPowerAtBlock(\n    address user,\n    uint256 blockNumber,\n    DelegationType delegationType\n  ) external view virtual returns (uint256);\n\n  /**\n   * @dev returns the total supply at a certain block number\n   **/\n  function totalSupplyAt(uint256 blockNumber) external view virtual returns (uint256);\n}\n\n/**\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\n * Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address payable) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes memory) {\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n    return msg.data;\n  }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\n */\ninterface IERC20 {\n  /**\n   * @dev Returns the amount of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n   * allowance mechanism. `amount` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) external returns (bool);\n\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\n * Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n  /**\n   * @dev Returns the addition of two unsigned integers, reverting on\n   * overflow.\n   *\n   * Counterpart to Solidity's `+` operator.\n   *\n   * Requirements:\n   * - Addition cannot overflow.\n   */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, 'SafeMath: addition overflow');\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the subtraction of two unsigned integers, reverting on\n   * overflow (when the result is negative).\n   *\n   * Counterpart to Solidity's `-` operator.\n   *\n   * Requirements:\n   * - Subtraction cannot overflow.\n   */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    return sub(a, b, 'SafeMath: subtraction overflow');\n  }\n\n  /**\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n   * overflow (when the result is negative).\n   *\n   * Counterpart to Solidity's `-` operator.\n   *\n   * Requirements:\n   * - Subtraction cannot overflow.\n   */\n  function sub(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    require(b <= a, errorMessage);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the multiplication of two unsigned integers, reverting on\n   * overflow.\n   *\n   * Counterpart to Solidity's `*` operator.\n   *\n   * Requirements:\n   * - Multiplication cannot overflow.\n   */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, 'SafeMath: multiplication overflow');\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the integer division of two unsigned integers. Reverts on\n   * division by zero. The result is rounded towards zero.\n   *\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n   * uses an invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return div(a, b, 'SafeMath: division by zero');\n  }\n\n  /**\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n   * division by zero. The result is rounded towards zero.\n   *\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n   * uses an invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function div(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b > 0, errorMessage);\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n   * Reverts when dividing by zero.\n   *\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\n   * invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    return mod(a, b, 'SafeMath: modulo by zero');\n  }\n\n  /**\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n   * Reverts with custom message when dividing by zero.\n   *\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\n   * invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function mod(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    require(b != 0, errorMessage);\n    return a % b;\n  }\n}\n\n/**\n * @dev Collection of functions related to the address type\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\n */\nlibrary Address {\n  /**\n   * @dev Returns true if `account` is a contract.\n   *\n   * [IMPORTANT]\n   * ====\n   * It is unsafe to assume that an address for which this function returns\n   * false is an externally-owned account (EOA) and not a contract.\n   *\n   * Among others, `isContract` will return false for the following\n   * types of addresses:\n   *\n   *  - an externally-owned account\n   *  - a contract in construction\n   *  - an address where a contract will be created\n   *  - an address where a contract lived, but was destroyed\n   * ====\n   */\n  function isContract(address account) internal view returns (bool) {\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n    // for accounts without code, i.e. `keccak256('')`\n    bytes32 codehash;\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      codehash := extcodehash(account)\n    }\n    return (codehash != accountHash && codehash != 0x0);\n  }\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n   * `recipient`, forwarding all available gas and reverting on errors.\n   *\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n   * imposed by `transfer`, making them unable to receive funds via\n   * `transfer`. {sendValue} removes this limitation.\n   *\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n   *\n   * IMPORTANT: because control is transferred to `recipient`, care must be\n   * taken to not create reentrancy vulnerabilities. Consider using\n   * {ReentrancyGuard} or the\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n   */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    require(address(this).balance >= amount, 'Address: insufficient balance');\n\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n    (bool success, ) = recipient.call{value: amount}('');\n    require(success, 'Address: unable to send value, recipient may have reverted');\n  }\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n  using SafeMath for uint256;\n  using Address for address;\n\n  mapping(address => uint256) private _balances;\n\n  mapping(address => mapping(address => uint256)) private _allowances;\n\n  uint256 private _totalSupply;\n\n  string internal _name;\n  string internal _symbol;\n  uint8 private _decimals;\n\n  /**\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n   * a default value of 18.\n   *\n   * To select a different value for {decimals}, use {_setupDecimals}.\n   *\n   * All three of these values are immutable: they can only be set once during\n   * construction.\n   */\n  constructor(string memory name, string memory symbol) public {\n    _name = name;\n    _symbol = symbol;\n    _decimals = 18;\n  }\n\n  /**\n   * @dev Returns the name of the token.\n   */\n  function name() public view returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev Returns the symbol of the token, usually a shorter version of the\n   * name.\n   */\n  function symbol() public view returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @dev Returns the number of decimals used to get its user representation.\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n   *\n   * Tokens usually opt for a value of 18, imitating the relationship between\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n   * called.\n   *\n   * NOTE: This information is only used for _display_ purposes: it in\n   * no way affects any of the arithmetic of the contract, including\n   * {IERC20-balanceOf} and {IERC20-transfer}.\n   */\n  function decimals() public view returns (uint8) {\n    return _decimals;\n  }\n\n  /**\n   * @dev See {IERC20-totalSupply}.\n   */\n  function totalSupply() public view override returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n   * @dev See {IERC20-balanceOf}.\n   */\n  function balanceOf(address account) public view override returns (uint256) {\n    return _balances[account];\n  }\n\n  /**\n   * @dev See {IERC20-transfer}.\n   *\n   * Requirements:\n   *\n   * - `recipient` cannot be the zero address.\n   * - the caller must have a balance of at least `amount`.\n   */\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n    _transfer(_msgSender(), recipient, amount);\n    return true;\n  }\n\n  /**\n   * @dev See {IERC20-allowance}.\n   */\n  function allowance(address owner, address spender)\n    public\n    view\n    virtual\n    override\n    returns (uint256)\n  {\n    return _allowances[owner][spender];\n  }\n\n  /**\n   * @dev See {IERC20-approve}.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\n    _approve(_msgSender(), spender, amount);\n    return true;\n  }\n\n  /**\n   * @dev See {IERC20-transferFrom}.\n   *\n   * Emits an {Approval} event indicating the updated allowance. This is not\n   * required by the EIP. See the note at the beginning of {ERC20};\n   *\n   * Requirements:\n   * - `sender` and `recipient` cannot be the zero address.\n   * - `sender` must have a balance of at least `amount`.\n   * - the caller must have allowance for ``sender``'s tokens of at least\n   * `amount`.\n   */\n  function transferFrom(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    _transfer(sender, recipient, amount);\n    _approve(\n      sender,\n      _msgSender(),\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\n    );\n    return true;\n  }\n\n  /**\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {IERC20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n    return true;\n  }\n\n  /**\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {IERC20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `spender` must have allowance for the caller of at least\n   * `subtractedValue`.\n   */\n  function decreaseAllowance(address spender, uint256 subtractedValue)\n    public\n    virtual\n    returns (bool)\n  {\n    _approve(\n      _msgSender(),\n      spender,\n      _allowances[_msgSender()][spender].sub(\n        subtractedValue,\n        'ERC20: decreased allowance below zero'\n      )\n    );\n    return true;\n  }\n\n  /**\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\n   *\n   * This is internal function is equivalent to {transfer}, and can be used to\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\n   *\n   * Emits a {Transfer} event.\n   *\n   * Requirements:\n   *\n   * - `sender` cannot be the zero address.\n   * - `recipient` cannot be the zero address.\n   * - `sender` must have a balance of at least `amount`.\n   */\n  function _transfer(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) internal virtual {\n    require(sender != address(0), 'ERC20: transfer from the zero address');\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\n\n    _beforeTokenTransfer(sender, recipient, amount);\n\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\n    _balances[recipient] = _balances[recipient].add(amount);\n    emit Transfer(sender, recipient, amount);\n  }\n\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n   * the total supply.\n   *\n   * Emits a {Transfer} event with `from` set to the zero address.\n   *\n   * Requirements\n   *\n   * - `to` cannot be the zero address.\n   */\n  function _mint(address account, uint256 amount) internal virtual {\n    require(account != address(0), 'ERC20: mint to the zero address');\n\n    _beforeTokenTransfer(address(0), account, amount);\n\n    _totalSupply = _totalSupply.add(amount);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n\n  /**\n   * @dev Destroys `amount` tokens from `account`, reducing the\n   * total supply.\n   *\n   * Emits a {Transfer} event with `to` set to the zero address.\n   *\n   * Requirements\n   *\n   * - `account` cannot be the zero address.\n   * - `account` must have at least `amount` tokens.\n   */\n  function _burn(address account, uint256 amount) internal virtual {\n    require(account != address(0), 'ERC20: burn from the zero address');\n\n    _beforeTokenTransfer(account, address(0), amount);\n\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\n    _totalSupply = _totalSupply.sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n   *\n   * This is internal function is equivalent to `approve`, and can be used to\n   * e.g. set automatic allowances for certain subsystems, etc.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `owner` cannot be the zero address.\n   * - `spender` cannot be the zero address.\n   */\n  function _approve(\n    address owner,\n    address spender,\n    uint256 amount\n  ) internal virtual {\n    require(owner != address(0), 'ERC20: approve from the zero address');\n    require(spender != address(0), 'ERC20: approve to the zero address');\n\n    _allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);\n  }\n\n  /**\n   * @dev Sets {decimals} to a value other than the default one of 18.\n   *\n   * WARNING: This function should only be called from the constructor. Most\n   * applications that interact with token contracts will not expect\n   * {decimals} to ever change, and may work incorrectly if it does.\n   */\n  function _setupDecimals(uint8 decimals_) internal {\n    _decimals = decimals_;\n  }\n\n  /**\n   * @dev Hook that is called before any transfer of tokens. This includes\n   * minting and burning.\n   *\n   * Calling conditions:\n   *\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n   * will be to transferred to `to`.\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n   * - `from` and `to` are never both zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal virtual {}\n}\n\ninterface IStakedAave {\n  function stake(address to, uint256 amount) external;\n\n  function redeem(address to, uint256 amount) external;\n\n  function cooldown() external;\n\n  function claimRewards(address to, uint256 amount) external;\n}\n\ninterface ITransferHook {\n  function onTransfer(\n    address from,\n    address to,\n    uint256 amount\n  ) external;\n}\n\nlibrary DistributionTypes {\n  struct AssetConfigInput {\n    uint128 emissionPerSecond;\n    uint256 totalStaked;\n    address underlyingAsset;\n  }\n\n  struct UserStakeInput {\n    address underlyingAsset;\n    uint256 stakedByUser;\n    uint256 totalStaked;\n  }\n}\n\n/**\n * @title SafeERC20\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\n * Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using SafeMath for uint256;\n  using Address for address;\n\n  function safeTransfer(\n    IERC20 token,\n    address to,\n    uint256 value\n  ) internal {\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n  }\n\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n  }\n\n  function safeApprove(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    require(\n      (value == 0) || (token.allowance(address(this), spender) == 0),\n      'SafeERC20: approve from non-zero to non-zero allowance'\n    );\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n  }\n\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\n\n    // solhint-disable-next-line avoid-low-level-calls\n    (bool success, bytes memory returndata) = address(token).call(data);\n    require(success, 'SafeERC20: low-level call failed');\n\n    if (returndata.length > 0) {\n      // Return data is optional\n      // solhint-disable-next-line max-line-length\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\n    }\n  }\n}\n\n/**\n * @title VersionedInitializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n *\n * @author Aave, inspired by the OpenZeppelin Initializable contract\n */\nabstract contract VersionedInitializable {\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  uint256 internal lastInitializedRevision = 0;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    uint256 revision = getRevision();\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\n\n    lastInitializedRevision = revision;\n\n    _;\n  }\n\n  /// @dev returns the revision number of the contract.\n  /// Needs to be defined in the inherited class as a constant.\n  function getRevision() internal pure virtual returns (uint256);\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\ninterface IAaveDistributionManager {\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\n    external;\n}\n\n/**\n * @title AaveDistributionManager\n * @notice Accounting contract to manage multiple staking distributions\n * @author Aave\n **/\ncontract AaveDistributionManager is IAaveDistributionManager {\n  using SafeMath for uint256;\n\n  struct AssetData {\n    uint128 emissionPerSecond;\n    uint128 lastUpdateTimestamp;\n    uint256 index;\n    mapping(address => uint256) users;\n  }\n\n  uint256 public immutable DISTRIBUTION_END;\n\n  address public immutable EMISSION_MANAGER;\n\n  uint8 public constant PRECISION = 18;\n\n  mapping(address => AssetData) public assets;\n\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\n  event AssetIndexUpdated(address indexed asset, uint256 index);\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\n\n  constructor(address emissionManager, uint256 distributionDuration) public {\n    DISTRIBUTION_END = block.timestamp.add(distributionDuration);\n    EMISSION_MANAGER = emissionManager;\n  }\n\n  /**\n   * @dev Configures the distribution of rewards for a list of assets\n   * @param assetsConfigInput The list of configurations to apply\n   **/\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\n    external\n    override\n  {\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\n\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\n\n      _updateAssetStateInternal(\n        assetsConfigInput[i].underlyingAsset,\n        assetConfig,\n        assetsConfigInput[i].totalStaked\n      );\n\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\n\n      emit AssetConfigUpdated(\n        assetsConfigInput[i].underlyingAsset,\n        assetsConfigInput[i].emissionPerSecond\n      );\n    }\n  }\n\n  /**\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\n   * @param assetConfig Storage pointer to the distribution's config\n   * @param totalStaked Current total of staked assets for this distribution\n   * @return The new distribution index\n   **/\n  function _updateAssetStateInternal(\n    address underlyingAsset,\n    AssetData storage assetConfig,\n    uint256 totalStaked\n  ) internal returns (uint256) {\n    uint256 oldIndex = assetConfig.index;\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\n\n    if (block.timestamp == lastUpdateTimestamp) {\n      return oldIndex;\n    }\n\n    uint256 newIndex =\n      _getAssetIndex(oldIndex, assetConfig.emissionPerSecond, lastUpdateTimestamp, totalStaked);\n\n    if (newIndex != oldIndex) {\n      assetConfig.index = newIndex;\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\n    }\n\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\n\n    return newIndex;\n  }\n\n  /**\n   * @dev Updates the state of an user in a distribution\n   * @param user The user's address\n   * @param asset The address of the reference asset of the distribution\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\n   * @param totalStaked Total tokens staked in the distribution\n   * @return The accrued rewards for the user until the moment\n   **/\n  function _updateUserAssetInternal(\n    address user,\n    address asset,\n    uint256 stakedByUser,\n    uint256 totalStaked\n  ) internal returns (uint256) {\n    AssetData storage assetData = assets[asset];\n    uint256 userIndex = assetData.users[user];\n    uint256 accruedRewards = 0;\n\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\n\n    if (userIndex != newIndex) {\n      if (stakedByUser != 0) {\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\n      }\n\n      assetData.users[user] = newIndex;\n      emit UserIndexUpdated(user, asset, newIndex);\n    }\n\n    return accruedRewards;\n  }\n\n  /**\n   * @dev Used by \"frontend\" stake contracts to update the data of an user when claiming rewards from there\n   * @param user The address of the user\n   * @param stakes List of structs of the user data related with his stake\n   * @return The accrued rewards for the user until the moment\n   **/\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\n    internal\n    returns (uint256)\n  {\n    uint256 accruedRewards = 0;\n\n    for (uint256 i = 0; i < stakes.length; i++) {\n      accruedRewards = accruedRewards.add(\n        _updateUserAssetInternal(\n          user,\n          stakes[i].underlyingAsset,\n          stakes[i].stakedByUser,\n          stakes[i].totalStaked\n        )\n      );\n    }\n\n    return accruedRewards;\n  }\n\n  /**\n   * @dev Return the accrued rewards for an user over a list of distribution\n   * @param user The address of the user\n   * @param stakes List of structs of the user data related with his stake\n   * @return The accrued rewards for the user until the moment\n   **/\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\n    internal\n    view\n    returns (uint256)\n  {\n    uint256 accruedRewards = 0;\n\n    for (uint256 i = 0; i < stakes.length; i++) {\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\n      uint256 assetIndex =\n        _getAssetIndex(\n          assetConfig.index,\n          assetConfig.emissionPerSecond,\n          assetConfig.lastUpdateTimestamp,\n          stakes[i].totalStaked\n        );\n\n      accruedRewards = accruedRewards.add(\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\n      );\n    }\n    return accruedRewards;\n  }\n\n  /**\n   * @dev Internal function for the calculation of user's rewards on a distribution\n   * @param principalUserBalance Amount staked by the user on a distribution\n   * @param reserveIndex Current index of the distribution\n   * @param userIndex Index stored for the user, representation his staking moment\n   * @return The rewards\n   **/\n  function _getRewards(\n    uint256 principalUserBalance,\n    uint256 reserveIndex,\n    uint256 userIndex\n  ) internal pure returns (uint256) {\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\n  }\n\n  /**\n   * @dev Calculates the next value of an specific distribution index, with validations\n   * @param currentIndex Current index of the distribution\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\n   * @param lastUpdateTimestamp Last moment this distribution was updated\n   * @param totalBalance of tokens considered for the distribution\n   * @return The new index.\n   **/\n  function _getAssetIndex(\n    uint256 currentIndex,\n    uint256 emissionPerSecond,\n    uint128 lastUpdateTimestamp,\n    uint256 totalBalance\n  ) internal view returns (uint256) {\n    if (\n      emissionPerSecond == 0 ||\n      totalBalance == 0 ||\n      lastUpdateTimestamp == block.timestamp ||\n      lastUpdateTimestamp >= DISTRIBUTION_END\n    ) {\n      return currentIndex;\n    }\n\n    uint256 currentTimestamp =\n      block.timestamp > DISTRIBUTION_END ? DISTRIBUTION_END : block.timestamp;\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\n    return\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\n        currentIndex\n      );\n  }\n\n  /**\n   * @dev Returns the data of an user on a distribution\n   * @param user Address of the user\n   * @param asset The address of the reference asset of the distribution\n   * @return The new index\n   **/\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\n    return assets[asset].users[user];\n  }\n}\n\n/**\n * @notice implementation of the AAVE token contract\n * @author Aave\n */\nabstract contract GovernancePowerDelegationERC20 is ERC20, IGovernancePowerDelegationToken {\n  using SafeMath for uint256;\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH =\n    keccak256('DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)');\n\n  bytes32 public constant DELEGATE_TYPEHASH =\n    keccak256('Delegate(address delegatee,uint256 nonce,uint256 expiry)');\n\n  /// @dev snapshot of a value on a specific block, used for votes\n  struct Snapshot {\n    uint128 blockNumber;\n    uint128 value;\n  }\n\n  /**\n   * @dev delegates one specific power to a delegatee\n   * @param delegatee the user which delegated power has changed\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\n   **/\n  function delegateByType(address delegatee, DelegationType delegationType) external override {\n    _delegateByType(msg.sender, delegatee, delegationType);\n  }\n\n  /**\n   * @dev delegates all the powers to a specific user\n   * @param delegatee the user to which the power will be delegated\n   **/\n  function delegate(address delegatee) external override {\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\n  }\n\n  /**\n   * @dev returns the delegatee of an user\n   * @param delegator the address of the delegator\n   **/\n  function getDelegateeByType(address delegator, DelegationType delegationType)\n    external\n    view\n    override\n    returns (address)\n  {\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\n\n    return _getDelegatee(delegator, delegates);\n  }\n\n  /**\n   * @dev returns the current delegated power of a user. The current power is the\n   * power delegated at the time of the last snapshot\n   * @param user the user\n   **/\n  function getPowerCurrent(address user, DelegationType delegationType)\n    external\n    view\n    override\n    returns (uint256)\n  {\n    (\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\n      mapping(address => uint256) storage snapshotsCounts,\n\n    ) = _getDelegationDataByType(delegationType);\n\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\n  }\n\n  /**\n   * @dev returns the delegated power of a user at a certain block\n   * @param user the user\n   **/\n  function getPowerAtBlock(\n    address user,\n    uint256 blockNumber,\n    DelegationType delegationType\n  ) external view override returns (uint256) {\n    (\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\n      mapping(address => uint256) storage snapshotsCounts,\n\n    ) = _getDelegationDataByType(delegationType);\n\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\n  }\n\n  /**\n   * @dev returns the total supply at a certain block number\n   * used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\n   * In this initial implementation with no AAVE minting, simply returns the current supply\n   * A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future\n   **/\n  function totalSupplyAt(uint256 blockNumber) external view override returns (uint256) {\n    return super.totalSupply();\n  }\n\n  /**\n   * @dev delegates the specific power to a delegatee\n   * @param delegatee the user which delegated power has changed\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\n   **/\n  function _delegateByType(\n    address delegator,\n    address delegatee,\n    DelegationType delegationType\n  ) internal {\n    require(delegatee != address(0), 'INVALID_DELEGATEE');\n\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\n\n    uint256 delegatorBalance = balanceOf(delegator);\n\n    address previousDelegatee = _getDelegatee(delegator, delegates);\n\n    delegates[delegator] = delegatee;\n\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\n    emit DelegateChanged(delegator, delegatee, delegationType);\n  }\n\n  /**\n   * @dev moves delegated power from one user to another\n   * @param from the user from which delegated power is moved\n   * @param to the user that will receive the delegated power\n   * @param amount the amount of delegated power to be moved\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\n   **/\n  function _moveDelegatesByType(\n    address from,\n    address to,\n    uint256 amount,\n    DelegationType delegationType\n  ) internal {\n    if (from == to) {\n      return;\n    }\n\n    (\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\n      mapping(address => uint256) storage snapshotsCounts,\n\n    ) = _getDelegationDataByType(delegationType);\n\n    if (from != address(0)) {\n      uint256 previous = 0;\n      uint256 fromSnapshotsCount = snapshotsCounts[from];\n\n      if (fromSnapshotsCount != 0) {\n        previous = snapshots[from][fromSnapshotsCount - 1].value;\n      } else {\n        previous = balanceOf(from);\n      }\n\n      _writeSnapshot(\n        snapshots,\n        snapshotsCounts,\n        from,\n        uint128(previous),\n        uint128(previous.sub(amount))\n      );\n\n      emit DelegatedPowerChanged(from, previous.sub(amount), delegationType);\n    }\n    if (to != address(0)) {\n      uint256 previous = 0;\n      uint256 toSnapshotsCount = snapshotsCounts[to];\n      if (toSnapshotsCount != 0) {\n        previous = snapshots[to][toSnapshotsCount - 1].value;\n      } else {\n        previous = balanceOf(to);\n      }\n\n      _writeSnapshot(\n        snapshots,\n        snapshotsCounts,\n        to,\n        uint128(previous),\n        uint128(previous.add(amount))\n      );\n\n      emit DelegatedPowerChanged(to, previous.add(amount), delegationType);\n    }\n  }\n\n  /**\n   * @dev searches a snapshot by block number. Uses binary search.\n   * @param snapshots the snapshots mapping\n   * @param snapshotsCounts the number of snapshots\n   * @param user the user for which the snapshot is being searched\n   * @param blockNumber the block number being searched\n   **/\n  function _searchByBlockNumber(\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\n    mapping(address => uint256) storage snapshotsCounts,\n    address user,\n    uint256 blockNumber\n  ) internal view returns (uint256) {\n    require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\n\n    uint256 snapshotsCount = snapshotsCounts[user];\n\n    if (snapshotsCount == 0) {\n      return balanceOf(user);\n    }\n\n    // First check most recent balance\n    if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\n      return snapshots[user][snapshotsCount - 1].value;\n    }\n\n    // Next check implicit zero balance\n    if (snapshots[user][0].blockNumber > blockNumber) {\n      return 0;\n    }\n\n    uint256 lower = 0;\n    uint256 upper = snapshotsCount - 1;\n    while (upper > lower) {\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n      Snapshot memory snapshot = snapshots[user][center];\n      if (snapshot.blockNumber == blockNumber) {\n        return snapshot.value;\n      } else if (snapshot.blockNumber < blockNumber) {\n        lower = center;\n      } else {\n        upper = center - 1;\n      }\n    }\n    return snapshots[user][lower].value;\n  }\n\n  /**\n   * @dev returns the delegation data (snapshot, snapshotsCount, list of delegates) by delegation type\n   * NOTE: Ideal implementation would have mapped this in a struct by delegation type. Unfortunately,\n   * the AAVE token and StakeToken already include a mapping for the snapshots, so we require contracts\n   * who inherit from this to provide access to the delegation data by overriding this method.\n   * @param delegationType the type of delegation\n   **/\n  function _getDelegationDataByType(DelegationType delegationType)\n    internal\n    view\n    virtual\n    returns (\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\n      mapping(address => uint256) storage, //snapshots count\n      mapping(address => address) storage //delegatees list\n    );\n\n  /**\n   * @dev Writes a snapshot for an owner of tokens\n   * @param owner The owner of the tokens\n   * @param oldValue The value before the operation that is gonna be executed after the snapshot\n   * @param newValue The value after the operation\n   */\n  function _writeSnapshot(\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\n    mapping(address => uint256) storage snapshotsCounts,\n    address owner,\n    uint128 oldValue,\n    uint128 newValue\n  ) internal {\n    uint128 currentBlock = uint128(block.number);\n\n    uint256 ownerSnapshotsCount = snapshotsCounts[owner];\n    mapping(uint256 => Snapshot) storage snapshotsOwner = snapshots[owner];\n\n    // Doing multiple operations in the same block\n    if (\n      ownerSnapshotsCount != 0 &&\n      snapshotsOwner[ownerSnapshotsCount - 1].blockNumber == currentBlock\n    ) {\n      snapshotsOwner[ownerSnapshotsCount - 1].value = newValue;\n    } else {\n      snapshotsOwner[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\n      snapshotsCounts[owner] = ownerSnapshotsCount + 1;\n    }\n  }\n\n  /**\n   * @dev returns the user delegatee. If a user never performed any delegation,\n   * his delegated address will be 0x0. In that case we simply return the user itself\n   * @param delegator the address of the user for which return the delegatee\n   * @param delegates the array of delegates for a particular type of delegation\n   **/\n  function _getDelegatee(address delegator, mapping(address => address) storage delegates)\n    internal\n    view\n    returns (address)\n  {\n    address previousDelegatee = delegates[delegator];\n\n    if (previousDelegatee == address(0)) {\n      return delegator;\n    }\n\n    return previousDelegatee;\n  }\n}\n\n/**\n * @title ERC20WithSnapshot\n * @notice ERC20 including snapshots of balances on transfer-related actions\n * @author Aave\n **/\nabstract contract GovernancePowerWithSnapshot is GovernancePowerDelegationERC20 {\n  using SafeMath for uint256;\n\n  /**\n   * @dev The following storage layout points to the prior StakedToken.sol implementation:\n   * _snapshots => _votingSnapshots\n   * _snapshotsCounts =>  _votingSnapshotsCounts\n   * _aaveGovernance => _aaveGovernance\n   */\n  mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\n  mapping(address => uint256) public _votingSnapshotsCounts;\n\n  /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\n  /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\n  /// to control all potential reentrancies by calling back the this contract\n  ITransferHook public _aaveGovernance;\n\n  function _setAaveGovernance(ITransferHook aaveGovernance) internal virtual {\n    _aaveGovernance = aaveGovernance;\n  }\n}\n\n/**\n * @title StakedToken\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\n * @author Aave\n **/\ncontract StakedTokenV2Rev3 is\n  IStakedAave,\n  GovernancePowerWithSnapshot,\n  VersionedInitializable,\n  AaveDistributionManager\n{\n  using SafeMath for uint256;\n  using SafeERC20 for IERC20;\n\n  /// @dev Start of Storage layout from StakedToken v1\n  uint256 public constant REVISION = 3;\n\n  IERC20 public immutable STAKED_TOKEN;\n  IERC20 public immutable REWARD_TOKEN;\n  uint256 public immutable COOLDOWN_SECONDS;\n\n  /// @notice Seconds available to redeem once the cooldown period is fullfilled\n  uint256 public immutable UNSTAKE_WINDOW;\n\n  /// @notice Address to pull from the rewards, needs to have approved this contract\n  address public immutable REWARDS_VAULT;\n\n  mapping(address => uint256) public stakerRewardsToClaim;\n  mapping(address => uint256) public stakersCooldowns;\n\n  /// @dev End of Storage layout from StakedToken v1\n\n  /// @dev To see the voting mappings, go to GovernancePowerWithSnapshot.sol\n  mapping(address => address) internal _votingDelegates;\n\n  mapping(address => mapping(uint256 => Snapshot)) internal _propositionPowerSnapshots;\n  mapping(address => uint256) internal _propositionPowerSnapshotsCounts;\n  mapping(address => address) internal _propositionPowerDelegates;\n\n  bytes32 public DOMAIN_SEPARATOR;\n  bytes public constant EIP712_REVISION = bytes('1');\n  bytes32 internal constant EIP712_DOMAIN =\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\n  bytes32 public constant PERMIT_TYPEHASH =\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\n\n  /// @dev owner => next valid nonce to submit with permit()\n  mapping(address => uint256) public _nonces;\n\n  event Staked(address indexed from, address indexed onBehalfOf, uint256 amount);\n  event Redeem(address indexed from, address indexed to, uint256 amount);\n\n  event RewardsAccrued(address user, uint256 amount);\n  event RewardsClaimed(address indexed from, address indexed to, uint256 amount);\n\n  event Cooldown(address indexed user);\n\n  constructor(\n    IERC20 stakedToken,\n    IERC20 rewardToken,\n    uint256 cooldownSeconds,\n    uint256 unstakeWindow,\n    address rewardsVault,\n    address emissionManager,\n    uint128 distributionDuration,\n    string memory name,\n    string memory symbol,\n    uint8 decimals,\n    address governance\n  ) public ERC20(name, symbol) AaveDistributionManager(emissionManager, distributionDuration) {\n    STAKED_TOKEN = stakedToken;\n    REWARD_TOKEN = rewardToken;\n    COOLDOWN_SECONDS = cooldownSeconds;\n    UNSTAKE_WINDOW = unstakeWindow;\n    REWARDS_VAULT = rewardsVault;\n    _aaveGovernance = ITransferHook(governance);\n    ERC20._setupDecimals(decimals);\n  }\n\n  /**\n   * @dev Called by the proxy contract\n   **/\n  function initialize() external initializer {\n    uint256 chainId;\n\n    //solium-disable-next-line\n    assembly {\n      chainId := chainid()\n    }\n\n    DOMAIN_SEPARATOR = keccak256(\n      abi.encode(\n        EIP712_DOMAIN,\n        keccak256(bytes(name())),\n        keccak256(EIP712_REVISION),\n        chainId,\n        address(this)\n      )\n    );\n\n    // Update lastUpdateTimestamp of stkAave to reward users since the end of the prior staking period\n    AssetData storage assetData = assets[address(this)];\n    assetData.lastUpdateTimestamp = 1620594720;\n  }\n\n  function stake(address onBehalfOf, uint256 amount) external override {\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\n    uint256 balanceOfUser = balanceOf(onBehalfOf);\n\n    uint256 accruedRewards =\n      _updateUserAssetInternal(onBehalfOf, address(this), balanceOfUser, totalSupply());\n    if (accruedRewards != 0) {\n      emit RewardsAccrued(onBehalfOf, accruedRewards);\n      stakerRewardsToClaim[onBehalfOf] = stakerRewardsToClaim[onBehalfOf].add(accruedRewards);\n    }\n\n    stakersCooldowns[onBehalfOf] = getNextCooldownTimestamp(0, amount, onBehalfOf, balanceOfUser);\n\n    _mint(onBehalfOf, amount);\n    IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\n\n    emit Staked(msg.sender, onBehalfOf, amount);\n  }\n\n  /**\n   * @dev Redeems staked tokens, and stop earning rewards\n   * @param to Address to redeem to\n   * @param amount Amount to redeem\n   **/\n  function redeem(address to, uint256 amount) external override {\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\n    //solium-disable-next-line\n    uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\n    require(\n      block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\n      'INSUFFICIENT_COOLDOWN'\n    );\n    require(\n      block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\n      'UNSTAKE_WINDOW_FINISHED'\n    );\n    uint256 balanceOfMessageSender = balanceOf(msg.sender);\n\n    uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\n\n    _updateCurrentUnclaimedRewards(msg.sender, balanceOfMessageSender, true);\n\n    _burn(msg.sender, amountToRedeem);\n\n    if (balanceOfMessageSender.sub(amountToRedeem) == 0) {\n      stakersCooldowns[msg.sender] = 0;\n    }\n\n    IERC20(STAKED_TOKEN).safeTransfer(to, amountToRedeem);\n\n    emit Redeem(msg.sender, to, amountToRedeem);\n  }\n\n  /**\n   * @dev Activates the cooldown period to unstake\n   * - It can't be called if the user is not staking\n   **/\n  function cooldown() external override {\n    require(balanceOf(msg.sender) != 0, 'INVALID_BALANCE_ON_COOLDOWN');\n    //solium-disable-next-line\n    stakersCooldowns[msg.sender] = block.timestamp;\n\n    emit Cooldown(msg.sender);\n  }\n\n  /**\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\n   * @param to Address to stake for\n   * @param amount Amount to stake\n   **/\n  function claimRewards(address to, uint256 amount) external override {\n    uint256 newTotalRewards =\n      _updateCurrentUnclaimedRewards(msg.sender, balanceOf(msg.sender), false);\n    uint256 amountToClaim = (amount == type(uint256).max) ? newTotalRewards : amount;\n\n    stakerRewardsToClaim[msg.sender] = newTotalRewards.sub(amountToClaim, 'INVALID_AMOUNT');\n\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\n\n    emit RewardsClaimed(msg.sender, to, amountToClaim);\n  }\n\n  /**\n   * @dev Internal ERC20 _transfer of the tokenized staked tokens\n   * @param from Address to transfer from\n   * @param to Address to transfer to\n   * @param amount Amount to transfer\n   **/\n  function _transfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal override {\n    uint256 balanceOfFrom = balanceOf(from);\n    // Sender\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\n\n    // Recipient\n    if (from != to) {\n      uint256 balanceOfTo = balanceOf(to);\n      _updateCurrentUnclaimedRewards(to, balanceOfTo, true);\n\n      uint256 previousSenderCooldown = stakersCooldowns[from];\n      stakersCooldowns[to] = getNextCooldownTimestamp(\n        previousSenderCooldown,\n        amount,\n        to,\n        balanceOfTo\n      );\n      // if cooldown was set and whole balance of sender was transferred - clear cooldown\n      if (balanceOfFrom == amount && previousSenderCooldown != 0) {\n        stakersCooldowns[from] = 0;\n      }\n    }\n\n    super._transfer(from, to, amount);\n  }\n\n  /**\n   * @dev Updates the user state related with his accrued rewards\n   * @param user Address of the user\n   * @param userBalance The current balance of the user\n   * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\n   * @return The unclaimed rewards that were added to the total accrued\n   **/\n  function _updateCurrentUnclaimedRewards(\n    address user,\n    uint256 userBalance,\n    bool updateStorage\n  ) internal returns (uint256) {\n    uint256 accruedRewards =\n      _updateUserAssetInternal(user, address(this), userBalance, totalSupply());\n    uint256 unclaimedRewards = stakerRewardsToClaim[user].add(accruedRewards);\n\n    if (accruedRewards != 0) {\n      if (updateStorage) {\n        stakerRewardsToClaim[user] = unclaimedRewards;\n      }\n      emit RewardsAccrued(user, accruedRewards);\n    }\n\n    return unclaimedRewards;\n  }\n\n  /**\n   * @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\n   *  - If the timestamp of the sender is \"better\" or the timestamp of the recipient is 0, we take the one of the recipient\n   *  - Weighted average of from/to cooldown timestamps if:\n   *    # The sender doesn't have the cooldown activated (timestamp 0).\n   *    # The sender timestamp is expired\n   *    # The sender has a \"worse\" timestamp\n   *  - If the receiver's cooldown timestamp expired (too old), the next is 0\n   * @param fromCooldownTimestamp Cooldown timestamp of the sender\n   * @param amountToReceive Amount\n   * @param toAddress Address of the recipient\n   * @param toBalance Current balance of the receiver\n   * @return The new cooldown timestamp\n   **/\n  function getNextCooldownTimestamp(\n    uint256 fromCooldownTimestamp,\n    uint256 amountToReceive,\n    address toAddress,\n    uint256 toBalance\n  ) public view returns (uint256) {\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\n    if (toCooldownTimestamp == 0) {\n      return 0;\n    }\n\n    uint256 minimalValidCooldownTimestamp =\n      block.timestamp.sub(COOLDOWN_SECONDS).sub(UNSTAKE_WINDOW);\n\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\n      toCooldownTimestamp = 0;\n    } else {\n      uint256 fromCooldownTimestamp =\n        (minimalValidCooldownTimestamp > fromCooldownTimestamp)\n          ? block.timestamp\n          : fromCooldownTimestamp;\n\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\n        return toCooldownTimestamp;\n      } else {\n        toCooldownTimestamp = (\n          amountToReceive.mul(fromCooldownTimestamp).add(toBalance.mul(toCooldownTimestamp))\n        )\n          .div(amountToReceive.add(toBalance));\n      }\n    }\n    return toCooldownTimestamp;\n  }\n\n  /**\n   * @dev Return the total rewards pending to claim by an staker\n   * @param staker The staker address\n   * @return The rewards\n   */\n  function getTotalRewardsBalance(address staker) external view returns (uint256) {\n    DistributionTypes.UserStakeInput[] memory userStakeInputs =\n      new DistributionTypes.UserStakeInput[](1);\n    userStakeInputs[0] = DistributionTypes.UserStakeInput({\n      underlyingAsset: address(this),\n      stakedByUser: balanceOf(staker),\n      totalStaked: totalSupply()\n    });\n    return stakerRewardsToClaim[staker].add(_getUnclaimedRewards(staker, userStakeInputs));\n  }\n\n  /**\n   * @dev returns the revision of the implementation contract\n   * @return The revision\n   */\n  function getRevision() internal pure override returns (uint256) {\n    return REVISION;\n  }\n\n  /**\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\n   * @param owner the owner of the funds\n   * @param spender the spender\n   * @param value the amount\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\n   * @param v signature param\n   * @param s signature param\n   * @param r signature param\n   */\n\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external {\n    require(owner != address(0), 'INVALID_OWNER');\n    //solium-disable-next-line\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\n    uint256 currentValidNonce = _nonces[owner];\n    bytes32 digest =\n      keccak256(\n        abi.encodePacked(\n          '\\x19\\x01',\n          DOMAIN_SEPARATOR,\n          keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\n        )\n      );\n\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\n    _nonces[owner] = currentValidNonce.add(1);\n    _approve(owner, spender, value);\n  }\n\n  /**\n   * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\n   * - On _transfer, it writes snapshots for both \"from\" and \"to\"\n   * - On _mint, only for _to\n   * - On _burn, only for _from\n   * @param from the from address\n   * @param to the to address\n   * @param amount the amount to transfer\n   */\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal override {\n    address votingFromDelegatee = _votingDelegates[from];\n    address votingToDelegatee = _votingDelegates[to];\n\n    if (votingFromDelegatee == address(0)) {\n      votingFromDelegatee = from;\n    }\n    if (votingToDelegatee == address(0)) {\n      votingToDelegatee = to;\n    }\n\n    _moveDelegatesByType(\n      votingFromDelegatee,\n      votingToDelegatee,\n      amount,\n      DelegationType.VOTING_POWER\n    );\n\n    address propPowerFromDelegatee = _propositionPowerDelegates[from];\n    address propPowerToDelegatee = _propositionPowerDelegates[to];\n\n    if (propPowerFromDelegatee == address(0)) {\n      propPowerFromDelegatee = from;\n    }\n    if (propPowerToDelegatee == address(0)) {\n      propPowerToDelegatee = to;\n    }\n\n    _moveDelegatesByType(\n      propPowerFromDelegatee,\n      propPowerToDelegatee,\n      amount,\n      DelegationType.PROPOSITION_POWER\n    );\n\n    // caching the aave governance address to avoid multiple state loads\n    ITransferHook aaveGovernance = _aaveGovernance;\n    if (aaveGovernance != ITransferHook(0)) {\n      aaveGovernance.onTransfer(from, to, amount);\n    }\n  }\n\n  function _getDelegationDataByType(DelegationType delegationType)\n    internal\n    view\n    override\n    returns (\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\n      mapping(address => uint256) storage, //snapshots count\n      mapping(address => address) storage //delegatees list\n    )\n  {\n    if (delegationType == DelegationType.VOTING_POWER) {\n      return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\n    } else {\n      return (\n        _propositionPowerSnapshots,\n        _propositionPowerSnapshotsCounts,\n        _propositionPowerDelegates\n      );\n    }\n  }\n\n  /**\n   * @dev Delegates power from signatory to `delegatee`\n   * @param delegatee The address to delegate votes to\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\n   * @param nonce The contract state required to match the signature\n   * @param expiry The time at which to expire the signature\n   * @param v The recovery byte of the signature\n   * @param r Half of the ECDSA signature pair\n   * @param s Half of the ECDSA signature pair\n   */\n  function delegateByTypeBySig(\n    address delegatee,\n    DelegationType delegationType,\n    uint256 nonce,\n    uint256 expiry,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) public {\n    bytes32 structHash =\n      keccak256(\n        abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\n      );\n    bytes32 digest = keccak256(abi.encodePacked('\\x19\\x01', DOMAIN_SEPARATOR, structHash));\n    address signatory = ecrecover(digest, v, r, s);\n    require(signatory != address(0), 'INVALID_SIGNATURE');\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\n    _delegateByType(signatory, delegatee, delegationType);\n  }\n\n  /**\n   * @dev Delegates power from signatory to `delegatee`\n   * @param delegatee The address to delegate votes to\n   * @param nonce The contract state required to match the signature\n   * @param expiry The time at which to expire the signature\n   * @param v The recovery byte of the signature\n   * @param r Half of the ECDSA signature pair\n   * @param s Half of the ECDSA signature pair\n   */\n  function delegateBySig(\n    address delegatee,\n    uint256 nonce,\n    uint256 expiry,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) public {\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\n    bytes32 digest = keccak256(abi.encodePacked('\\x19\\x01', DOMAIN_SEPARATOR, structHash));\n    address signatory = ecrecover(digest, v, r, s);\n    require(signatory != address(0), 'INVALID_SIGNATURE');\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\n    _delegateByType(signatory, delegatee, DelegationType.VOTING_POWER);\n    _delegateByType(signatory, delegatee, DelegationType.PROPOSITION_POWER);\n  }\n}\n"},"contracts/hardhat-dependency-compiler/@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol';\n"}},"settings":{"optimizer":{"enabled":true,"runs":100000},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"2519","formattedMessage":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:452:15: Warning: This declaration shadows an existing declaration.\n  constructor(string memory name, string memory symbol) public {\n              ^----------------^\n@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:461:3: The shadowed declaration is here:\n  function name() public view returns (string memory) {\n  ^ (Relevant source part starts here and spans across multiple lines).\n","message":"This declaration shadows an existing declaration.","secondarySourceLocations":[{"end":15547,"file":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol","message":"The shadowed declaration is here:","start":15472}],"severity":"warning","sourceLocation":{"end":15319,"file":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol","start":15301},"type":"Warning"},{"component":"general","errorCode":"2519","formattedMessage":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:452:35: Warning: This declaration shadows an existing declaration.\n  constructor(string memory name, string memory symbol) public {\n                                  ^------------------^\n@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:469:3: The shadowed declaration is here:\n  function symbol() public view returns (string memory) {\n  ^ (Relevant source part starts here and spans across multiple lines).\n","message":"This declaration shadows an existing declaration.","secondarySourceLocations":[{"end":15729,"file":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol","message":"The shadowed declaration is here:","start":15650}],"severity":"warning","sourceLocation":{"end":15341,"file":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol","start":15321},"type":"Warning"},{"component":"general","errorCode":"2519","formattedMessage":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:1724:7: Warning: This declaration shadows an existing declaration.\n      uint256 fromCooldownTimestamp =\n      ^---------------------------^\n@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:1708:5: The shadowed declaration is here:\n    uint256 fromCooldownTimestamp,\n    ^---------------------------^\n","message":"This declaration shadows an existing declaration.","secondarySourceLocations":[{"end":55758,"file":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol","message":"The shadowed declaration is here:","start":55729}],"severity":"warning","sourceLocation":{"end":56244,"file":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol","start":56215},"type":"Warning"},{"component":"general","errorCode":"5815","formattedMessage":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:37:3: Warning: Interface functions are implicitly \"virtual\"\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\n  ^-----------------------------------------------------------------------------------------^\n","message":"Interface functions are implicitly \"virtual\"","severity":"warning","sourceLocation":{"end":1311,"file":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol","start":1220},"type":"Warning"},{"component":"general","errorCode":"5815","formattedMessage":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:43:3: Warning: Interface functions are implicitly \"virtual\"\n  function delegate(address delegatee) external virtual;\n  ^----------------------------------------------------^\n","message":"Interface functions are implicitly \"virtual\"","severity":"warning","sourceLocation":{"end":1504,"file":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol","start":1450},"type":"Warning"},{"component":"general","errorCode":"5815","formattedMessage":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:49:3: Warning: Interface functions are implicitly \"virtual\"\n  function getDelegateeByType(address delegator, DelegationType delegationType)\n  ^ (Relevant source part starts here and spans across multiple lines).\n","message":"Interface functions are implicitly \"virtual\"","severity":"warning","sourceLocation":{"end":1749,"file":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol","start":1615},"type":"Warning"},{"component":"general","errorCode":"5815","formattedMessage":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:60:3: Warning: Interface functions are implicitly \"virtual\"\n  function getPowerCurrent(address user, DelegationType delegationType)\n  ^ (Relevant source part starts here and spans across multiple lines).\n","message":"Interface functions are implicitly \"virtual\"","severity":"warning","sourceLocation":{"end":2054,"file":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol","start":1928},"type":"Warning"},{"component":"general","errorCode":"5815","formattedMessage":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:70:3: Warning: Interface functions are implicitly \"virtual\"\n  function getPowerAtBlock(\n  ^ (Relevant source part starts here and spans across multiple lines).\n","message":"Interface functions are implicitly \"virtual\"","severity":"warning","sourceLocation":{"end":2311,"file":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol","start":2164},"type":"Warning"},{"component":"general","errorCode":"5815","formattedMessage":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:79:3: Warning: Interface functions are implicitly \"virtual\"\n  function totalSupplyAt(uint256 blockNumber) external view virtual returns (uint256);\n  ^----------------------------------------------------------------------------------^\n","message":"Interface functions are implicitly \"virtual\"","severity":"warning","sourceLocation":{"end":2473,"file":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol","start":2389},"type":"Warning"},{"component":"general","errorCode":"2462","formattedMessage":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:452:3: Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.\n  constructor(string memory name, string memory symbol) public {\n  ^ (Relevant source part starts here and spans across multiple lines).\n","message":"Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.","severity":"warning","sourceLocation":{"end":15415,"file":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol","start":15289},"type":"Warning"},{"component":"general","errorCode":"2462","formattedMessage":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:903:3: Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.\n  constructor(address emissionManager, uint256 distributionDuration) public {\n  ^ (Relevant source part starts here and spans across multiple lines).\n","message":"Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.","severity":"warning","sourceLocation":{"end":28807,"file":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol","start":28622},"type":"Warning"},{"component":"general","errorCode":"2462","formattedMessage":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:1501:3: Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.\n  constructor(\n  ^ (Relevant source part starts here and spans across multiple lines).\n","message":"Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.","severity":"warning","sourceLocation":{"end":49520,"file":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol","start":48863},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:1210:26: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  function totalSupplyAt(uint256 blockNumber) external view override returns (uint256) {\n                         ^-----------------^\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":38959,"file":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol","start":38940},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:1376:5: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n    uint128 oldValue,\n    ^--------------^\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":44345,"file":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol","start":44329},"type":"Warning"}],"sources":{"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol":{"ast":{"absolutePath":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol","exportedSymbols":{"AaveDistributionManager":[1702],"Address":[432],"Context":[100],"DistributionTypes":[983],"ERC20":[933],"GovernancePowerDelegationERC20":[2383],"GovernancePowerWithSnapshot":[2414],"IAaveDistributionManager":[1176],"IERC20":[176],"IGovernancePowerDelegationToken":[78],"IStakedAave":[958],"ITransferHook":[968],"SafeERC20":[1132],"SafeMath":[370],"StakedTokenV2Rev3":[3650],"VersionedInitializable":[1169]},"id":3651,"license":"agpl-3.0","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","0.7",".5"],"nodeType":"PragmaDirective","src":"105:22:0"},{"id":2,"literals":["experimental","ABIEncoderV2"],"nodeType":"PragmaDirective","src":"128:33:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":78,"linearizedBaseContracts":[78],"name":"IGovernancePowerDelegationToken","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IGovernancePowerDelegationToken.DelegationType","id":5,"members":[{"id":3,"name":"VOTING_POWER","nodeType":"EnumValue","src":"230:12:0"},{"id":4,"name":"PROPOSITION_POWER","nodeType":"EnumValue","src":"244:17:0"}],"name":"DelegationType","nodeType":"EnumDefinition","src":"209:53:0"},{"anonymous":false,"documentation":{"id":6,"nodeType":"StructuredDocumentation","src":"266:217:0","text":" @dev emitted when a user delegates to another\n @param delegator the delegator\n @param delegatee the delegatee\n @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)*"},"id":14,"name":"DelegateChanged","nodeType":"EventDefinition","parameters":{"id":13,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8,"indexed":true,"mutability":"mutable","name":"delegator","nodeType":"VariableDeclaration","scope":14,"src":"513:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7,"name":"address","nodeType":"ElementaryTypeName","src":"513:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":10,"indexed":true,"mutability":"mutable","name":"delegatee","nodeType":"VariableDeclaration","scope":14,"src":"544:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"544:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12,"indexed":false,"mutability":"mutable","name":"delegationType","nodeType":"VariableDeclaration","scope":14,"src":"575:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"},"typeName":{"id":11,"name":"DelegationType","nodeType":"UserDefinedTypeName","referencedDeclaration":5,"src":"575:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}},"visibility":"internal"}],"src":"507:101:0"},"src":"486:123:0"},{"anonymous":false,"documentation":{"id":15,"nodeType":"StructuredDocumentation","src":"613:287:0","text":" @dev emitted when an action changes the delegated power of a user\n @param user the user which delegated power has changed\n @param amount the amount of delegated power for the user\n @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)*"},"id":23,"name":"DelegatedPowerChanged","nodeType":"EventDefinition","parameters":{"id":22,"nodeType":"ParameterList","parameters":[{"constant":false,"id":17,"indexed":true,"mutability":"mutable","name":"user","nodeType":"VariableDeclaration","scope":23,"src":"931:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":16,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":19,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":23,"src":"953:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":18,"name":"uint256","nodeType":"ElementaryTypeName","src":"953:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":21,"indexed":false,"mutability":"mutable","name":"delegationType","nodeType":"VariableDeclaration","scope":23,"src":"969:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"},"typeName":{"id":20,"name":"DelegationType","nodeType":"UserDefinedTypeName","referencedDeclaration":5,"src":"969:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}},"visibility":"internal"}],"src":"930:69:0"},"src":"903:97:0"},{"documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"1004:213:0","text":" @dev delegates the specific power to a delegatee\n @param delegatee the user which delegated power has changed\n @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)*"},"functionSelector":"dc937e1c","id":31,"implemented":false,"kind":"function","modifiers":[],"name":"delegateByType","nodeType":"FunctionDefinition","parameters":{"id":29,"nodeType":"ParameterList","parameters":[{"constant":false,"id":26,"mutability":"mutable","name":"delegatee","nodeType":"VariableDeclaration","scope":31,"src":"1244:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":25,"name":"address","nodeType":"ElementaryTypeName","src":"1244:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":28,"mutability":"mutable","name":"delegationType","nodeType":"VariableDeclaration","scope":31,"src":"1263:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"},"typeName":{"id":27,"name":"DelegationType","nodeType":"UserDefinedTypeName","referencedDeclaration":5,"src":"1263:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}},"visibility":"internal"}],"src":"1243:50:0"},"returnParameters":{"id":30,"nodeType":"ParameterList","parameters":[],"src":"1310:0:0"},"scope":78,"src":"1220:91:0","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1315:132:0","text":" @dev delegates all the powers to a specific user\n @param delegatee the user to which the power will be delegated*"},"functionSelector":"5c19a95c","id":37,"implemented":false,"kind":"function","modifiers":[],"name":"delegate","nodeType":"FunctionDefinition","parameters":{"id":35,"nodeType":"ParameterList","parameters":[{"constant":false,"id":34,"mutability":"mutable","name":"delegatee","nodeType":"VariableDeclaration","scope":37,"src":"1468:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":33,"name":"address","nodeType":"ElementaryTypeName","src":"1468:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1467:19:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[],"src":"1503:0:0"},"scope":78,"src":"1450:54:0","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":38,"nodeType":"StructuredDocumentation","src":"1508:104:0","text":" @dev returns the delegatee of an user\n @param delegator the address of the delegator*"},"functionSelector":"6f50458d","id":47,"implemented":false,"kind":"function","modifiers":[],"name":"getDelegateeByType","nodeType":"FunctionDefinition","parameters":{"id":43,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40,"mutability":"mutable","name":"delegator","nodeType":"VariableDeclaration","scope":47,"src":"1643:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":39,"name":"address","nodeType":"ElementaryTypeName","src":"1643:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":42,"mutability":"mutable","name":"delegationType","nodeType":"VariableDeclaration","scope":47,"src":"1662:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"},"typeName":{"id":41,"name":"DelegationType","nodeType":"UserDefinedTypeName","referencedDeclaration":5,"src":"1662:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}},"visibility":"internal"}],"src":"1642:50:0"},"returnParameters":{"id":46,"nodeType":"ParameterList","parameters":[{"constant":false,"id":45,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":47,"src":"1740:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":44,"name":"address","nodeType":"ElementaryTypeName","src":"1740:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1739:9:0"},"scope":78,"src":"1615:134:0","stateMutability":"view","virtual":true,"visibility":"external"},{"documentation":{"id":48,"nodeType":"StructuredDocumentation","src":"1753:172:0","text":" @dev returns the current delegated power of a user. The current power is the\n power delegated at the time of the last snapshot\n @param user the user*"},"functionSelector":"b2f4201d","id":57,"implemented":false,"kind":"function","modifiers":[],"name":"getPowerCurrent","nodeType":"FunctionDefinition","parameters":{"id":53,"nodeType":"ParameterList","parameters":[{"constant":false,"id":50,"mutability":"mutable","name":"user","nodeType":"VariableDeclaration","scope":57,"src":"1953:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49,"name":"address","nodeType":"ElementaryTypeName","src":"1953:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":52,"mutability":"mutable","name":"delegationType","nodeType":"VariableDeclaration","scope":57,"src":"1967:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"},"typeName":{"id":51,"name":"DelegationType","nodeType":"UserDefinedTypeName","referencedDeclaration":5,"src":"1967:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}},"visibility":"internal"}],"src":"1952:45:0"},"returnParameters":{"id":56,"nodeType":"ParameterList","parameters":[{"constant":false,"id":55,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":57,"src":"2045:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":54,"name":"uint256","nodeType":"ElementaryTypeName","src":"2045:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2044:9:0"},"scope":78,"src":"1928:126:0","stateMutability":"view","virtual":true,"visibility":"external"},{"documentation":{"id":58,"nodeType":"StructuredDocumentation","src":"2058:103:0","text":" @dev returns the delegated power of a user at a certain block\n @param user the user*"},"functionSelector":"c2ffbb91","id":69,"implemented":false,"kind":"function","modifiers":[],"name":"getPowerAtBlock","nodeType":"FunctionDefinition","parameters":{"id":65,"nodeType":"ParameterList","parameters":[{"constant":false,"id":60,"mutability":"mutable","name":"user","nodeType":"VariableDeclaration","scope":69,"src":"2194:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":59,"name":"address","nodeType":"ElementaryTypeName","src":"2194:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":62,"mutability":"mutable","name":"blockNumber","nodeType":"VariableDeclaration","scope":69,"src":"2212:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":61,"name":"uint256","nodeType":"ElementaryTypeName","src":"2212:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":64,"mutability":"mutable","name":"delegationType","nodeType":"VariableDeclaration","scope":69,"src":"2237:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"},"typeName":{"id":63,"name":"DelegationType","nodeType":"UserDefinedTypeName","referencedDeclaration":5,"src":"2237:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}},"visibility":"internal"}],"src":"2188:82:0"},"returnParameters":{"id":68,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":69,"src":"2302:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":66,"name":"uint256","nodeType":"ElementaryTypeName","src":"2302:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2301:9:0"},"scope":78,"src":"2164:147:0","stateMutability":"view","virtual":true,"visibility":"external"},{"documentation":{"id":70,"nodeType":"StructuredDocumentation","src":"2315:71:0","text":" @dev returns the total supply at a certain block number*"},"functionSelector":"981b24d0","id":77,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupplyAt","nodeType":"FunctionDefinition","parameters":{"id":73,"nodeType":"ParameterList","parameters":[{"constant":false,"id":72,"mutability":"mutable","name":"blockNumber","nodeType":"VariableDeclaration","scope":77,"src":"2412:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":71,"name":"uint256","nodeType":"ElementaryTypeName","src":"2412:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2411:21:0"},"returnParameters":{"id":76,"nodeType":"ParameterList","parameters":[{"constant":false,"id":75,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":77,"src":"2464:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":74,"name":"uint256","nodeType":"ElementaryTypeName","src":"2464:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2463:9:0"},"scope":78,"src":"2389:84:0","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":3651,"src":"163:2312:0"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":79,"nodeType":"StructuredDocumentation","src":"2477:563:0","text":" @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\n Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with GSN meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":100,"linearizedBaseContracts":[100],"name":"Context","nodeType":"ContractDefinition","nodes":[{"body":{"id":87,"nodeType":"Block","src":"3141:28:0","statements":[{"expression":{"expression":{"id":84,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3154:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":85,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3154:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":83,"id":86,"nodeType":"Return","src":"3147:17:0"}]},"id":88,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nodeType":"FunctionDefinition","parameters":{"id":80,"nodeType":"ParameterList","parameters":[],"src":"3090:2:0"},"returnParameters":{"id":83,"nodeType":"ParameterList","parameters":[{"constant":false,"id":82,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":88,"src":"3124:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":81,"name":"address","nodeType":"ElementaryTypeName","src":"3124:15:0","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"3123:17:0"},"scope":100,"src":"3071:98:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":98,"nodeType":"Block","src":"3238:155:0","statements":[{"expression":{"id":93,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3244:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_Context_$100","typeString":"contract Context"}},"id":94,"nodeType":"ExpressionStatement","src":"3244:4:0"},{"expression":{"expression":{"id":95,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3380:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"3380:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":92,"id":97,"nodeType":"Return","src":"3373:15:0"}]},"id":99,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nodeType":"FunctionDefinition","parameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"3190:2:0"},"returnParameters":{"id":92,"nodeType":"ParameterList","parameters":[{"constant":false,"id":91,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":99,"src":"3224:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":90,"name":"bytes","nodeType":"ElementaryTypeName","src":"3224:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3223:14:0"},"scope":100,"src":"3173:220:0","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":3651,"src":"3041:354:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":101,"nodeType":"StructuredDocumentation","src":"3397:133:0","text":" @dev Interface of the ERC20 standard as defined in the EIP.\n From https://github.com/OpenZeppelin/openzeppelin-contracts"},"fullyImplemented":false,"id":176,"linearizedBaseContracts":[176],"name":"IERC20","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":102,"nodeType":"StructuredDocumentation","src":"3552:62:0","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":107,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nodeType":"FunctionDefinition","parameters":{"id":103,"nodeType":"ParameterList","parameters":[],"src":"3637:2:0"},"returnParameters":{"id":106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":105,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":107,"src":"3663:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":104,"name":"uint256","nodeType":"ElementaryTypeName","src":"3663:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3662:9:0"},"scope":176,"src":"3617:55:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":108,"nodeType":"StructuredDocumentation","src":"3676:68:0","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":115,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nodeType":"FunctionDefinition","parameters":{"id":111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":110,"mutability":"mutable","name":"account","nodeType":"VariableDeclaration","scope":115,"src":"3766:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":109,"name":"address","nodeType":"ElementaryTypeName","src":"3766:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3765:17:0"},"returnParameters":{"id":114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":113,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":115,"src":"3806:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":112,"name":"uint256","nodeType":"ElementaryTypeName","src":"3806:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3805:9:0"},"scope":176,"src":"3747:68:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"3819:197:0","text":" @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":125,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nodeType":"FunctionDefinition","parameters":{"id":121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":125,"src":"4037:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":117,"name":"address","nodeType":"ElementaryTypeName","src":"4037:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":120,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":125,"src":"4056:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":119,"name":"uint256","nodeType":"ElementaryTypeName","src":"4056:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4036:35:0"},"returnParameters":{"id":124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":123,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":125,"src":"4090:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":122,"name":"bool","nodeType":"ElementaryTypeName","src":"4090:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4089:6:0"},"scope":176,"src":"4019:77:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":126,"nodeType":"StructuredDocumentation","src":"4100:252:0","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":135,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nodeType":"FunctionDefinition","parameters":{"id":131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":128,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":135,"src":"4374:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":127,"name":"address","nodeType":"ElementaryTypeName","src":"4374:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":130,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":135,"src":"4389:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":129,"name":"address","nodeType":"ElementaryTypeName","src":"4389:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4373:32:0"},"returnParameters":{"id":134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":133,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":135,"src":"4429:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":132,"name":"uint256","nodeType":"ElementaryTypeName","src":"4429:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4428:9:0"},"scope":176,"src":"4355:83:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":136,"nodeType":"StructuredDocumentation","src":"4442:616:0","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":145,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nodeType":"FunctionDefinition","parameters":{"id":141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":138,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":145,"src":"5078:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":137,"name":"address","nodeType":"ElementaryTypeName","src":"5078:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":140,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":145,"src":"5095:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":139,"name":"uint256","nodeType":"ElementaryTypeName","src":"5095:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5077:33:0"},"returnParameters":{"id":144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":143,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":145,"src":"5129:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":142,"name":"bool","nodeType":"ElementaryTypeName","src":"5129:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5128:6:0"},"scope":176,"src":"5061:74:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":146,"nodeType":"StructuredDocumentation","src":"5139:280:0","text":" @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":157,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nodeType":"FunctionDefinition","parameters":{"id":153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":148,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":157,"src":"5449:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":147,"name":"address","nodeType":"ElementaryTypeName","src":"5449:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":150,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":157,"src":"5469:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":149,"name":"address","nodeType":"ElementaryTypeName","src":"5469:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":152,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":157,"src":"5492:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":151,"name":"uint256","nodeType":"ElementaryTypeName","src":"5492:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5443:67:0"},"returnParameters":{"id":156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":155,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":157,"src":"5529:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":154,"name":"bool","nodeType":"ElementaryTypeName","src":"5529:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5528:6:0"},"scope":176,"src":"5422:113:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":158,"nodeType":"StructuredDocumentation","src":"5539:148:0","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"id":166,"name":"Transfer","nodeType":"EventDefinition","parameters":{"id":165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":160,"indexed":true,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":166,"src":"5705:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":159,"name":"address","nodeType":"ElementaryTypeName","src":"5705:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":162,"indexed":true,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":166,"src":"5727:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":161,"name":"address","nodeType":"ElementaryTypeName","src":"5727:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":164,"indexed":false,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":166,"src":"5747:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":163,"name":"uint256","nodeType":"ElementaryTypeName","src":"5747:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5704:57:0"},"src":"5690:72:0"},{"anonymous":false,"documentation":{"id":167,"nodeType":"StructuredDocumentation","src":"5766:142:0","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"id":175,"name":"Approval","nodeType":"EventDefinition","parameters":{"id":174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":169,"indexed":true,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":175,"src":"5926:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":168,"name":"address","nodeType":"ElementaryTypeName","src":"5926:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":171,"indexed":true,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":175,"src":"5949:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":170,"name":"address","nodeType":"ElementaryTypeName","src":"5949:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":173,"indexed":false,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":175,"src":"5974:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":172,"name":"uint256","nodeType":"ElementaryTypeName","src":"5974:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5925:63:0"},"src":"5911:78:0"}],"scope":3651,"src":"3531:2460:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":177,"nodeType":"StructuredDocumentation","src":"5993:626:0","text":" @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\n Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."},"fullyImplemented":true,"id":370,"linearizedBaseContracts":[370],"name":"SafeMath","nodeType":"ContractDefinition","nodes":[{"body":{"id":202,"nodeType":"Block","src":"6912:95:0","statements":[{"assignments":[188],"declarations":[{"constant":false,"id":188,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","scope":202,"src":"6918:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":187,"name":"uint256","nodeType":"ElementaryTypeName","src":"6918:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":192,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":189,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":180,"src":"6930:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":190,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"6934:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6930:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6918:17:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":194,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":188,"src":"6949:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":195,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":180,"src":"6954:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6949:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536166654d6174683a206164646974696f6e206f766572666c6f77","id":197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6957:29:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","typeString":"literal_string \"SafeMath: addition overflow\""},"value":"SafeMath: addition overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","typeString":"literal_string \"SafeMath: addition overflow\""}],"id":193,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6941:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6941:46:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":199,"nodeType":"ExpressionStatement","src":"6941:46:0"},{"expression":{"id":200,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":188,"src":"7001:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":186,"id":201,"nodeType":"Return","src":"6994:8:0"}]},"documentation":{"id":178,"nodeType":"StructuredDocumentation","src":"6641:201:0","text":" @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."},"id":203,"implemented":true,"kind":"function","modifiers":[],"name":"add","nodeType":"FunctionDefinition","parameters":{"id":183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":180,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":203,"src":"6858:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":179,"name":"uint256","nodeType":"ElementaryTypeName","src":"6858:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":182,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":203,"src":"6869:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":181,"name":"uint256","nodeType":"ElementaryTypeName","src":"6869:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6857:22:0"},"returnParameters":{"id":186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":185,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":203,"src":"6903:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":184,"name":"uint256","nodeType":"ElementaryTypeName","src":"6903:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6902:9:0"},"scope":370,"src":"6845:162:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":219,"nodeType":"Block","src":"7318:61:0","statements":[{"expression":{"arguments":[{"id":214,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"7335:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":215,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":208,"src":"7338:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"536166654d6174683a207375627472616374696f6e206f766572666c6f77","id":216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7341:32:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","typeString":"literal_string \"SafeMath: subtraction overflow\""},"value":"SafeMath: subtraction overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","typeString":"literal_string \"SafeMath: subtraction overflow\""}],"id":213,"name":"sub","nodeType":"Identifier","overloadedDeclarations":[220,248],"referencedDeclaration":248,"src":"7331:3:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7331:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":212,"id":218,"nodeType":"Return","src":"7324:50:0"}]},"documentation":{"id":204,"nodeType":"StructuredDocumentation","src":"7011:237:0","text":" @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":220,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","parameters":{"id":209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":206,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":220,"src":"7264:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":205,"name":"uint256","nodeType":"ElementaryTypeName","src":"7264:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":208,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":220,"src":"7275:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":207,"name":"uint256","nodeType":"ElementaryTypeName","src":"7275:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7263:22:0"},"returnParameters":{"id":212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":211,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":220,"src":"7309:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":210,"name":"uint256","nodeType":"ElementaryTypeName","src":"7309:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7308:9:0"},"scope":370,"src":"7251:128:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":247,"nodeType":"Block","src":"7754:78:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":233,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"7768:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":234,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"7773:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7768:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":236,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"7776:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":232,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7760:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7760:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":238,"nodeType":"ExpressionStatement","src":"7760:29:0"},{"assignments":[240],"declarations":[{"constant":false,"id":240,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","scope":247,"src":"7795:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":239,"name":"uint256","nodeType":"ElementaryTypeName","src":"7795:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":244,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":241,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"7807:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":242,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"7811:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7807:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7795:17:0"},{"expression":{"id":245,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"7826:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":231,"id":246,"nodeType":"Return","src":"7819:8:0"}]},"documentation":{"id":221,"nodeType":"StructuredDocumentation","src":"7383:257:0","text":" @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":248,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","parameters":{"id":228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":223,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":248,"src":"7661:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":222,"name":"uint256","nodeType":"ElementaryTypeName","src":"7661:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":225,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":248,"src":"7676:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":224,"name":"uint256","nodeType":"ElementaryTypeName","src":"7676:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":227,"mutability":"mutable","name":"errorMessage","nodeType":"VariableDeclaration","scope":248,"src":"7691:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":226,"name":"string","nodeType":"ElementaryTypeName","src":"7691:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7655:66:0"},"returnParameters":{"id":231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":230,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":248,"src":"7745:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":229,"name":"uint256","nodeType":"ElementaryTypeName","src":"7745:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7744:9:0"},"scope":370,"src":"7643:189:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":282,"nodeType":"Block","src":"8119:352:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":258,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":251,"src":"8335:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8340:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8335:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":264,"nodeType":"IfStatement","src":"8331:35:0","trueBody":{"id":263,"nodeType":"Block","src":"8343:23:0","statements":[{"expression":{"hexValue":"30","id":261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8358:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":257,"id":262,"nodeType":"Return","src":"8351:8:0"}]}},{"assignments":[266],"declarations":[{"constant":false,"id":266,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","scope":282,"src":"8372:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":265,"name":"uint256","nodeType":"ElementaryTypeName","src":"8372:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":270,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":267,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":251,"src":"8384:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":268,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"8388:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8384:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8372:17:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":272,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"8403:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":273,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":251,"src":"8407:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8403:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":275,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"8412:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8403:10:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77","id":277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8415:35:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3","typeString":"literal_string \"SafeMath: multiplication overflow\""},"value":"SafeMath: multiplication overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3","typeString":"literal_string \"SafeMath: multiplication overflow\""}],"id":271,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8395:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8395:56:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":279,"nodeType":"ExpressionStatement","src":"8395:56:0"},{"expression":{"id":280,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"8465:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":257,"id":281,"nodeType":"Return","src":"8458:8:0"}]},"documentation":{"id":249,"nodeType":"StructuredDocumentation","src":"7836:213:0","text":" @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."},"id":283,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nodeType":"FunctionDefinition","parameters":{"id":254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":251,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":283,"src":"8065:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":250,"name":"uint256","nodeType":"ElementaryTypeName","src":"8065:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":253,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":283,"src":"8076:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":252,"name":"uint256","nodeType":"ElementaryTypeName","src":"8076:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8064:22:0"},"returnParameters":{"id":257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":256,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":283,"src":"8110:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":255,"name":"uint256","nodeType":"ElementaryTypeName","src":"8110:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8109:9:0"},"scope":370,"src":"8052:419:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":299,"nodeType":"Block","src":"8969:57:0","statements":[{"expression":{"arguments":[{"id":294,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"8986:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":295,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":288,"src":"8989:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"536166654d6174683a206469766973696f6e206279207a65726f","id":296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8992:28:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f","typeString":"literal_string \"SafeMath: division by zero\""},"value":"SafeMath: division by zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f","typeString":"literal_string \"SafeMath: division by zero\""}],"id":293,"name":"div","nodeType":"Identifier","overloadedDeclarations":[300,328],"referencedDeclaration":328,"src":"8982:3:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8982:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":292,"id":298,"nodeType":"Return","src":"8975:46:0"}]},"documentation":{"id":284,"nodeType":"StructuredDocumentation","src":"8475:424:0","text":" @dev Returns the integer division of two unsigned integers. Reverts on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":300,"implemented":true,"kind":"function","modifiers":[],"name":"div","nodeType":"FunctionDefinition","parameters":{"id":289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":286,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":300,"src":"8915:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":285,"name":"uint256","nodeType":"ElementaryTypeName","src":"8915:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":288,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":300,"src":"8926:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":287,"name":"uint256","nodeType":"ElementaryTypeName","src":"8926:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8914:22:0"},"returnParameters":{"id":292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":291,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":300,"src":"8960:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":290,"name":"uint256","nodeType":"ElementaryTypeName","src":"8960:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8959:9:0"},"scope":370,"src":"8902:124:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":327,"nodeType":"Block","src":"9588:221:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":313,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"9664:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9668:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9664:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":316,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"9671:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":312,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9656:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9656:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":318,"nodeType":"ExpressionStatement","src":"9656:28:0"},{"assignments":[320],"declarations":[{"constant":false,"id":320,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","scope":327,"src":"9690:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":319,"name":"uint256","nodeType":"ElementaryTypeName","src":"9690:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":324,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":321,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"9702:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":322,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"9706:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9702:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9690:17:0"},{"expression":{"id":325,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":320,"src":"9803:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":311,"id":326,"nodeType":"Return","src":"9796:8:0"}]},"documentation":{"id":301,"nodeType":"StructuredDocumentation","src":"9030:444:0","text":" @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":328,"implemented":true,"kind":"function","modifiers":[],"name":"div","nodeType":"FunctionDefinition","parameters":{"id":308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":303,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":328,"src":"9495:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":302,"name":"uint256","nodeType":"ElementaryTypeName","src":"9495:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":305,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":328,"src":"9510:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":304,"name":"uint256","nodeType":"ElementaryTypeName","src":"9510:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":307,"mutability":"mutable","name":"errorMessage","nodeType":"VariableDeclaration","scope":328,"src":"9525:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":306,"name":"string","nodeType":"ElementaryTypeName","src":"9525:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"9489:66:0"},"returnParameters":{"id":311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":310,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":328,"src":"9579:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":309,"name":"uint256","nodeType":"ElementaryTypeName","src":"9579:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9578:9:0"},"scope":370,"src":"9477:332:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":344,"nodeType":"Block","src":"10296:55:0","statements":[{"expression":{"arguments":[{"id":339,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"10313:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":340,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"10316:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"536166654d6174683a206d6f64756c6f206279207a65726f","id":341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10319:26:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832","typeString":"literal_string \"SafeMath: modulo by zero\""},"value":"SafeMath: modulo by zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832","typeString":"literal_string \"SafeMath: modulo by zero\""}],"id":338,"name":"mod","nodeType":"Identifier","overloadedDeclarations":[345,369],"referencedDeclaration":369,"src":"10309:3:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10309:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":337,"id":343,"nodeType":"Return","src":"10302:44:0"}]},"documentation":{"id":329,"nodeType":"StructuredDocumentation","src":"9813:413:0","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":345,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nodeType":"FunctionDefinition","parameters":{"id":334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":331,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":345,"src":"10242:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":330,"name":"uint256","nodeType":"ElementaryTypeName","src":"10242:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":333,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":345,"src":"10253:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":332,"name":"uint256","nodeType":"ElementaryTypeName","src":"10253:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10241:22:0"},"returnParameters":{"id":337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":336,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":345,"src":"10287:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":335,"name":"uint256","nodeType":"ElementaryTypeName","src":"10287:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10286:9:0"},"scope":370,"src":"10229:122:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":368,"nodeType":"Block","src":"10902:58:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":358,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":350,"src":"10916:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10916:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":361,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"10924:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":357,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10908:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10908:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":363,"nodeType":"ExpressionStatement","src":"10908:29:0"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":364,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"10950:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":365,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":350,"src":"10954:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10950:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":356,"id":367,"nodeType":"Return","src":"10943:12:0"}]},"documentation":{"id":346,"nodeType":"StructuredDocumentation","src":"10355:433:0","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts with custom message when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":369,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nodeType":"FunctionDefinition","parameters":{"id":353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":348,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":369,"src":"10809:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":347,"name":"uint256","nodeType":"ElementaryTypeName","src":"10809:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":350,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":369,"src":"10824:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":349,"name":"uint256","nodeType":"ElementaryTypeName","src":"10824:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":352,"mutability":"mutable","name":"errorMessage","nodeType":"VariableDeclaration","scope":369,"src":"10839:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":351,"name":"string","nodeType":"ElementaryTypeName","src":"10839:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"10803:66:0"},"returnParameters":{"id":356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":355,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":369,"src":"10893:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":354,"name":"uint256","nodeType":"ElementaryTypeName","src":"10893:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10892:9:0"},"scope":370,"src":"10791:169:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3651,"src":"6620:4342:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":371,"nodeType":"StructuredDocumentation","src":"10964:130:0","text":" @dev Collection of functions related to the address type\n From https://github.com/OpenZeppelin/openzeppelin-contracts"},"fullyImplemented":true,"id":432,"linearizedBaseContracts":[432],"name":"Address","nodeType":"ContractDefinition","nodes":[{"body":{"id":396,"nodeType":"Block","src":"11717:520:0","statements":[{"assignments":[380],"declarations":[{"constant":false,"id":380,"mutability":"mutable","name":"codehash","nodeType":"VariableDeclaration","scope":396,"src":"11953:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":379,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11953:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":381,"nodeType":"VariableDeclarationStatement","src":"11953:16:0"},{"assignments":[383],"declarations":[{"constant":false,"id":383,"mutability":"mutable","name":"accountHash","nodeType":"VariableDeclaration","scope":396,"src":"11975:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":382,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11975:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":385,"initialValue":{"hexValue":"307863356432343630313836663732333363393237653764623264636337303363306535303062363533636138323237336237626661643830343564383561343730","id":384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11997:66:0","typeDescriptions":{"typeIdentifier":"t_rational_89477152217924674838424037953991966239322087453347756267410168184682657981552_by_1","typeString":"int_const 8947...(69 digits omitted)...1552"},"value":"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"},"nodeType":"VariableDeclarationStatement","src":"11975:88:0"},{"AST":{"nodeType":"YulBlock","src":"12130:46:0","statements":[{"nodeType":"YulAssignment","src":"12138:32:0","value":{"arguments":[{"name":"account","nodeType":"YulIdentifier","src":"12162:7:0"}],"functionName":{"name":"extcodehash","nodeType":"YulIdentifier","src":"12150:11:0"},"nodeType":"YulFunctionCall","src":"12150:20:0"},"variableNames":[{"name":"codehash","nodeType":"YulIdentifier","src":"12138:8:0"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":374,"isOffset":false,"isSlot":false,"src":"12162:7:0","valueSize":1},{"declaration":380,"isOffset":false,"isSlot":false,"src":"12138:8:0","valueSize":1}],"id":386,"nodeType":"InlineAssembly","src":"12121:55:0"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":387,"name":"codehash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"12189:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":388,"name":"accountHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"12201:11:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"12189:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":390,"name":"codehash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"12216:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"307830","id":391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12228:3:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x0"},"src":"12216:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12189:42:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":394,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12188:44:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":378,"id":395,"nodeType":"Return","src":"12181:51:0"}]},"documentation":{"id":372,"nodeType":"StructuredDocumentation","src":"11115:533:0","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ===="},"id":397,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nodeType":"FunctionDefinition","parameters":{"id":375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":374,"mutability":"mutable","name":"account","nodeType":"VariableDeclaration","scope":397,"src":"11671:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":373,"name":"address","nodeType":"ElementaryTypeName","src":"11671:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11670:17:0"},"returnParameters":{"id":378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":377,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":397,"src":"11711:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":376,"name":"bool","nodeType":"ElementaryTypeName","src":"11711:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11710:6:0"},"scope":432,"src":"11651:586:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":430,"nodeType":"Block","src":"13191:300:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":408,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"13213:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$432","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$432","typeString":"library Address"}],"id":407,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13205:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":406,"name":"address","nodeType":"ElementaryTypeName","src":"13205:7:0","typeDescriptions":{}}},"id":409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13205:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"13205:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":411,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"13230:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13205:31:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13238:31:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":405,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13197:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13197:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":415,"nodeType":"ExpressionStatement","src":"13197:73:0"},{"assignments":[417,null],"declarations":[{"constant":false,"id":417,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":430,"src":"13351:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":416,"name":"bool","nodeType":"ElementaryTypeName","src":"13351:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":424,"initialValue":{"arguments":[{"hexValue":"","id":422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13399:2:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":418,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"13369:9:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"13369:14:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":420,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"13391:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"13369:29:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13369:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"13350:52:0"},{"expression":{"arguments":[{"id":426,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":417,"src":"13416:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13425:60:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":425,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13408:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13408:78:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":429,"nodeType":"ExpressionStatement","src":"13408:78:0"}]},"documentation":{"id":398,"nodeType":"StructuredDocumentation","src":"12241:876:0","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":431,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nodeType":"FunctionDefinition","parameters":{"id":403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":400,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":431,"src":"13139:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":399,"name":"address","nodeType":"ElementaryTypeName","src":"13139:15:0","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":402,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":431,"src":"13166:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":401,"name":"uint256","nodeType":"ElementaryTypeName","src":"13166:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13138:43:0"},"returnParameters":{"id":404,"nodeType":"ParameterList","parameters":[],"src":"13191:0:0"},"scope":432,"src":"13120:371:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":3651,"src":"11095:2398:0"},{"abstract":false,"baseContracts":[{"baseName":{"id":434,"name":"Context","nodeType":"UserDefinedTypeName","referencedDeclaration":100,"src":"14676:7:0","typeDescriptions":{"typeIdentifier":"t_contract$_Context_$100","typeString":"contract Context"}},"id":435,"nodeType":"InheritanceSpecifier","src":"14676:7:0"},{"baseName":{"id":436,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":176,"src":"14685:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},"id":437,"nodeType":"InheritanceSpecifier","src":"14685:6:0"}],"contractDependencies":[100,176],"contractKind":"contract","documentation":{"id":433,"nodeType":"StructuredDocumentation","src":"13495:1162:0","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin guidelines: functions revert instead\n of returning `false` on failure. This behavior is nonetheless conventional\n and does not conflict with the expectations of ERC20 applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."},"fullyImplemented":true,"id":933,"linearizedBaseContracts":[933,176,100],"name":"ERC20","nodeType":"ContractDefinition","nodes":[{"id":440,"libraryName":{"id":438,"name":"SafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":370,"src":"14702:8:0","typeDescriptions":{"typeIdentifier":"t_contract$_SafeMath_$370","typeString":"library SafeMath"}},"nodeType":"UsingForDirective","src":"14696:27:0","typeName":{"id":439,"name":"uint256","nodeType":"ElementaryTypeName","src":"14715:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"id":443,"libraryName":{"id":441,"name":"Address","nodeType":"UserDefinedTypeName","referencedDeclaration":432,"src":"14732:7:0","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$432","typeString":"library Address"}},"nodeType":"UsingForDirective","src":"14726:26:0","typeName":{"id":442,"name":"address","nodeType":"ElementaryTypeName","src":"14744:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"constant":false,"id":447,"mutability":"mutable","name":"_balances","nodeType":"VariableDeclaration","scope":933,"src":"14756:45:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":446,"keyType":{"id":444,"name":"address","nodeType":"ElementaryTypeName","src":"14764:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"14756:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":445,"name":"uint256","nodeType":"ElementaryTypeName","src":"14775:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":453,"mutability":"mutable","name":"_allowances","nodeType":"VariableDeclaration","scope":933,"src":"14806:67:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":452,"keyType":{"id":448,"name":"address","nodeType":"ElementaryTypeName","src":"14814:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"14806:47:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueType":{"id":451,"keyType":{"id":449,"name":"address","nodeType":"ElementaryTypeName","src":"14833:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"14825:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":450,"name":"uint256","nodeType":"ElementaryTypeName","src":"14844:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":455,"mutability":"mutable","name":"_totalSupply","nodeType":"VariableDeclaration","scope":933,"src":"14878:28:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":454,"name":"uint256","nodeType":"ElementaryTypeName","src":"14878:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":457,"mutability":"mutable","name":"_name","nodeType":"VariableDeclaration","scope":933,"src":"14911:21:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":456,"name":"string","nodeType":"ElementaryTypeName","src":"14911:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":459,"mutability":"mutable","name":"_symbol","nodeType":"VariableDeclaration","scope":933,"src":"14936:23:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":458,"name":"string","nodeType":"ElementaryTypeName","src":"14936:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":461,"mutability":"mutable","name":"_decimals","nodeType":"VariableDeclaration","scope":933,"src":"14963:23:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":460,"name":"uint8","nodeType":"ElementaryTypeName","src":"14963:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"body":{"id":481,"nodeType":"Block","src":"15350:65:0","statements":[{"expression":{"id":471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":469,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":457,"src":"15356:5:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":470,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"15364:4:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"15356:12:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":472,"nodeType":"ExpressionStatement","src":"15356:12:0"},{"expression":{"id":475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":473,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"15374:7:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":474,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"15384:6:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"15374:16:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":476,"nodeType":"ExpressionStatement","src":"15374:16:0"},{"expression":{"id":479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":477,"name":"_decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"15396:9:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"3138","id":478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15408:2:0","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"src":"15396:14:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":480,"nodeType":"ExpressionStatement","src":"15396:14:0"}]},"documentation":{"id":462,"nodeType":"StructuredDocumentation","src":"14991:295:0","text":" @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n a default value of 18.\n To select a different value for {decimals}, use {_setupDecimals}.\n All three of these values are immutable: they can only be set once during\n construction."},"id":482,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":464,"mutability":"mutable","name":"name","nodeType":"VariableDeclaration","scope":482,"src":"15301:18:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":463,"name":"string","nodeType":"ElementaryTypeName","src":"15301:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":466,"mutability":"mutable","name":"symbol","nodeType":"VariableDeclaration","scope":482,"src":"15321:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":465,"name":"string","nodeType":"ElementaryTypeName","src":"15321:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"15300:42:0"},"returnParameters":{"id":468,"nodeType":"ParameterList","parameters":[],"src":"15350:0:0"},"scope":933,"src":"15289:126:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":490,"nodeType":"Block","src":"15524:23:0","statements":[{"expression":{"id":488,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":457,"src":"15537:5:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":487,"id":489,"nodeType":"Return","src":"15530:12:0"}]},"documentation":{"id":483,"nodeType":"StructuredDocumentation","src":"15419:50:0","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":491,"implemented":true,"kind":"function","modifiers":[],"name":"name","nodeType":"FunctionDefinition","parameters":{"id":484,"nodeType":"ParameterList","parameters":[],"src":"15485:2:0"},"returnParameters":{"id":487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":486,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":491,"src":"15509:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":485,"name":"string","nodeType":"ElementaryTypeName","src":"15509:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"15508:15:0"},"scope":933,"src":"15472:75:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":499,"nodeType":"Block","src":"15704:25:0","statements":[{"expression":{"id":497,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"15717:7:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":496,"id":498,"nodeType":"Return","src":"15710:14:0"}]},"documentation":{"id":492,"nodeType":"StructuredDocumentation","src":"15551:96:0","text":" @dev Returns the symbol of the token, usually a shorter version of the\n name."},"functionSelector":"95d89b41","id":500,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nodeType":"FunctionDefinition","parameters":{"id":493,"nodeType":"ParameterList","parameters":[],"src":"15665:2:0"},"returnParameters":{"id":496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":495,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":500,"src":"15689:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":494,"name":"string","nodeType":"ElementaryTypeName","src":"15689:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"15688:15:0"},"scope":933,"src":"15650:79:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":508,"nodeType":"Block","src":"16372:27:0","statements":[{"expression":{"id":506,"name":"_decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"16385:9:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":505,"id":507,"nodeType":"Return","src":"16378:16:0"}]},"documentation":{"id":501,"nodeType":"StructuredDocumentation","src":"15733:588:0","text":" @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5,05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n called.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":509,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nodeType":"FunctionDefinition","parameters":{"id":502,"nodeType":"ParameterList","parameters":[],"src":"16341:2:0"},"returnParameters":{"id":505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":504,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":509,"src":"16365:5:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":503,"name":"uint8","nodeType":"ElementaryTypeName","src":"16365:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"16364:7:0"},"scope":933,"src":"16324:75:0","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[107],"body":{"id":518,"nodeType":"Block","src":"16513:30:0","statements":[{"expression":{"id":516,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"16526:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":515,"id":517,"nodeType":"Return","src":"16519:19:0"}]},"documentation":{"id":510,"nodeType":"StructuredDocumentation","src":"16403:45:0","text":" @dev See {IERC20-totalSupply}."},"functionSelector":"18160ddd","id":519,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nodeType":"FunctionDefinition","overrides":{"id":512,"nodeType":"OverrideSpecifier","overrides":[],"src":"16486:8:0"},"parameters":{"id":511,"nodeType":"ParameterList","parameters":[],"src":"16471:2:0"},"returnParameters":{"id":515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":514,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":519,"src":"16504:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":513,"name":"uint256","nodeType":"ElementaryTypeName","src":"16504:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16503:9:0"},"scope":933,"src":"16451:92:0","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[115],"body":{"id":532,"nodeType":"Block","src":"16668:36:0","statements":[{"expression":{"baseExpression":{"id":528,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"16681:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":530,"indexExpression":{"id":529,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"16691:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16681:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":527,"id":531,"nodeType":"Return","src":"16674:25:0"}]},"documentation":{"id":520,"nodeType":"StructuredDocumentation","src":"16547:43:0","text":" @dev See {IERC20-balanceOf}."},"functionSelector":"70a08231","id":533,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nodeType":"FunctionDefinition","overrides":{"id":524,"nodeType":"OverrideSpecifier","overrides":[],"src":"16641:8:0"},"parameters":{"id":523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":522,"mutability":"mutable","name":"account","nodeType":"VariableDeclaration","scope":533,"src":"16612:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":521,"name":"address","nodeType":"ElementaryTypeName","src":"16612:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16611:17:0"},"returnParameters":{"id":527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":526,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":533,"src":"16659:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":525,"name":"uint256","nodeType":"ElementaryTypeName","src":"16659:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16658:9:0"},"scope":933,"src":"16593:111:0","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[125],"body":{"id":553,"nodeType":"Block","src":"16981:70:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":545,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"16997:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16997:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":547,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"17011:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":548,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":538,"src":"17022:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":544,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"16987:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16987:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":550,"nodeType":"ExpressionStatement","src":"16987:42:0"},{"expression":{"hexValue":"74727565","id":551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"17042:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":543,"id":552,"nodeType":"Return","src":"17035:11:0"}]},"documentation":{"id":534,"nodeType":"StructuredDocumentation","src":"16708:178:0","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `recipient` cannot be the zero address.\n - the caller must have a balance of at least `amount`."},"functionSelector":"a9059cbb","id":554,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nodeType":"FunctionDefinition","overrides":{"id":540,"nodeType":"OverrideSpecifier","overrides":[],"src":"16957:8:0"},"parameters":{"id":539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":536,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":554,"src":"16907:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":535,"name":"address","nodeType":"ElementaryTypeName","src":"16907:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":538,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":554,"src":"16926:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":537,"name":"uint256","nodeType":"ElementaryTypeName","src":"16926:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16906:35:0"},"returnParameters":{"id":543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":542,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":554,"src":"16975:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":541,"name":"bool","nodeType":"ElementaryTypeName","src":"16975:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16974:6:0"},"scope":933,"src":"16889:162:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[135],"body":{"id":571,"nodeType":"Block","src":"17221:45:0","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":565,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"17234:11:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":567,"indexExpression":{"id":566,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"17246:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17234:18:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":569,"indexExpression":{"id":568,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"17253:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17234:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":564,"id":570,"nodeType":"Return","src":"17227:34:0"}]},"documentation":{"id":555,"nodeType":"StructuredDocumentation","src":"17055:43:0","text":" @dev See {IERC20-allowance}."},"functionSelector":"dd62ed3e","id":572,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nodeType":"FunctionDefinition","overrides":{"id":561,"nodeType":"OverrideSpecifier","overrides":[],"src":"17188:8:0"},"parameters":{"id":560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":557,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":572,"src":"17120:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":556,"name":"address","nodeType":"ElementaryTypeName","src":"17120:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":559,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":572,"src":"17135:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":558,"name":"address","nodeType":"ElementaryTypeName","src":"17135:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17119:32:0"},"returnParameters":{"id":564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":563,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":572,"src":"17210:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":562,"name":"uint256","nodeType":"ElementaryTypeName","src":"17210:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17209:9:0"},"scope":933,"src":"17101:165:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[145],"body":{"id":592,"nodeType":"Block","src":"17477:67:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":584,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"17492:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17492:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":586,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":575,"src":"17506:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":587,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"17515:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":583,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"17483:8:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17483:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":589,"nodeType":"ExpressionStatement","src":"17483:39:0"},{"expression":{"hexValue":"74727565","id":590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"17535:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":582,"id":591,"nodeType":"Return","src":"17528:11:0"}]},"documentation":{"id":573,"nodeType":"StructuredDocumentation","src":"17270:115:0","text":" @dev See {IERC20-approve}.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","id":593,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nodeType":"FunctionDefinition","overrides":{"id":579,"nodeType":"OverrideSpecifier","overrides":[],"src":"17453:8:0"},"parameters":{"id":578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":575,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":593,"src":"17405:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":574,"name":"address","nodeType":"ElementaryTypeName","src":"17405:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":577,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":593,"src":"17422:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":576,"name":"uint256","nodeType":"ElementaryTypeName","src":"17422:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17404:33:0"},"returnParameters":{"id":582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":581,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":593,"src":"17471:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":580,"name":"bool","nodeType":"ElementaryTypeName","src":"17471:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"17470:6:0"},"scope":933,"src":"17388:156:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[157],"body":{"id":630,"nodeType":"Block","src":"18106:215:0","statements":[{"expression":{"arguments":[{"id":607,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"18122:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":608,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"18130:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":609,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":600,"src":"18141:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":606,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"18112:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18112:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":611,"nodeType":"ExpressionStatement","src":"18112:36:0"},{"expression":{"arguments":[{"id":613,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"18170:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":614,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"18184:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18184:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"arguments":[{"id":623,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":600,"src":"18242:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365","id":624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18250:42:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330","typeString":"literal_string \"ERC20: transfer amount exceeds allowance\""},"value":"ERC20: transfer amount exceeds allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330","typeString":"literal_string \"ERC20: transfer amount exceeds allowance\""}],"expression":{"baseExpression":{"baseExpression":{"id":616,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"18204:11:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":618,"indexExpression":{"id":617,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"18216:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18204:19:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":621,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":619,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"18224:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18224:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18204:33:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":248,"src":"18204:37:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18204:89:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":612,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"18154:8:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18154:145:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":627,"nodeType":"ExpressionStatement","src":"18154:145:0"},{"expression":{"hexValue":"74727565","id":628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"18312:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":605,"id":629,"nodeType":"Return","src":"18305:11:0"}]},"documentation":{"id":594,"nodeType":"StructuredDocumentation","src":"17548:427:0","text":" @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20};\n Requirements:\n - `sender` and `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`.\n - the caller must have allowance for ``sender``'s tokens of at least\n `amount`."},"functionSelector":"23b872dd","id":631,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nodeType":"FunctionDefinition","overrides":{"id":602,"nodeType":"OverrideSpecifier","overrides":[],"src":"18082:8:0"},"parameters":{"id":601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":596,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":631,"src":"18005:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":595,"name":"address","nodeType":"ElementaryTypeName","src":"18005:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":598,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":631,"src":"18025:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":597,"name":"address","nodeType":"ElementaryTypeName","src":"18025:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":600,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":631,"src":"18048:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":599,"name":"uint256","nodeType":"ElementaryTypeName","src":"18048:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17999:67:0"},"returnParameters":{"id":605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":604,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":631,"src":"18100:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":603,"name":"bool","nodeType":"ElementaryTypeName","src":"18100:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"18099:6:0"},"scope":933,"src":"17978:343:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":658,"nodeType":"Block","src":"18784:111:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":642,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"18799:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18799:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":644,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":634,"src":"18813:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":652,"name":"addedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"18861:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"baseExpression":{"id":645,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"18822:11:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":648,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":646,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"18834:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18834:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18822:25:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":650,"indexExpression":{"id":649,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":634,"src":"18848:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18822:34:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":203,"src":"18822:38:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18822:50:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":641,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"18790:8:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18790:83:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":655,"nodeType":"ExpressionStatement","src":"18790:83:0"},{"expression":{"hexValue":"74727565","id":656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"18886:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":640,"id":657,"nodeType":"Return","src":"18879:11:0"}]},"documentation":{"id":632,"nodeType":"StructuredDocumentation","src":"18325:362:0","text":" @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"39509351","id":659,"implemented":true,"kind":"function","modifiers":[],"name":"increaseAllowance","nodeType":"FunctionDefinition","parameters":{"id":637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":634,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":659,"src":"18717:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":633,"name":"address","nodeType":"ElementaryTypeName","src":"18717:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":636,"mutability":"mutable","name":"addedValue","nodeType":"VariableDeclaration","scope":659,"src":"18734:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":635,"name":"uint256","nodeType":"ElementaryTypeName","src":"18734:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18716:37:0"},"returnParameters":{"id":640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":639,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":659,"src":"18778:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":638,"name":"bool","nodeType":"ElementaryTypeName","src":"18778:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"18777:6:0"},"scope":933,"src":"18690:205:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":687,"nodeType":"Block","src":"19465:205:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":670,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"19487:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19487:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":672,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":662,"src":"19507:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":680,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"19570:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"19595:39:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""},"value":"ERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""}],"expression":{"baseExpression":{"baseExpression":{"id":673,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"19522:11:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":676,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":674,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"19534:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19534:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19522:25:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":678,"indexExpression":{"id":677,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":662,"src":"19548:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19522:34:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":248,"src":"19522:38:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19522:120:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":669,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"19471:8:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19471:177:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":684,"nodeType":"ExpressionStatement","src":"19471:177:0"},{"expression":{"hexValue":"74727565","id":685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"19661:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":668,"id":686,"nodeType":"Return","src":"19654:11:0"}]},"documentation":{"id":660,"nodeType":"StructuredDocumentation","src":"18899:450:0","text":" @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."},"functionSelector":"a457c2d7","id":688,"implemented":true,"kind":"function","modifiers":[],"name":"decreaseAllowance","nodeType":"FunctionDefinition","parameters":{"id":665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":662,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":688,"src":"19379:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":661,"name":"address","nodeType":"ElementaryTypeName","src":"19379:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":664,"mutability":"mutable","name":"subtractedValue","nodeType":"VariableDeclaration","scope":688,"src":"19396:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":663,"name":"uint256","nodeType":"ElementaryTypeName","src":"19396:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19378:42:0"},"returnParameters":{"id":668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":667,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":688,"src":"19457:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":666,"name":"bool","nodeType":"ElementaryTypeName","src":"19457:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"19456:6:0"},"scope":933,"src":"19352:318:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":753,"nodeType":"Block","src":"20217:417:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":699,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":691,"src":"20231:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20249:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":701,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20241:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":700,"name":"address","nodeType":"ElementaryTypeName","src":"20241:7:0","typeDescriptions":{}}},"id":703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20241:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"20231:20:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373","id":705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20253:39:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""},"value":"ERC20: transfer from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""}],"id":698,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"20223:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20223:70:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":707,"nodeType":"ExpressionStatement","src":"20223:70:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":709,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"20307:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20328:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":711,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20320:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":710,"name":"address","nodeType":"ElementaryTypeName","src":"20320:7:0","typeDescriptions":{}}},"id":713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20320:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"20307:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472657373","id":715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20332:37:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""},"value":"ERC20: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""}],"id":708,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"20299:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20299:71:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":717,"nodeType":"ExpressionStatement","src":"20299:71:0"},{"expression":{"arguments":[{"id":719,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":691,"src":"20398:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":720,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"20406:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":721,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"20417:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":718,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":932,"src":"20377:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20377:47:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":723,"nodeType":"ExpressionStatement","src":"20377:47:0"},{"expression":{"id":734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":724,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"20431:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":726,"indexExpression":{"id":725,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":691,"src":"20441:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"20431:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":731,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"20473:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365","id":732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20481:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""},"value":"ERC20: transfer amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""}],"expression":{"baseExpression":{"id":727,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"20451:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":729,"indexExpression":{"id":728,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":691,"src":"20461:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20451:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":248,"src":"20451:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20451:71:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20431:91:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":735,"nodeType":"ExpressionStatement","src":"20431:91:0"},{"expression":{"id":745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":736,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"20528:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":738,"indexExpression":{"id":737,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"20538:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"20528:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":743,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"20576:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":739,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"20551:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":741,"indexExpression":{"id":740,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"20561:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20551:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":203,"src":"20551:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20551:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20528:55:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":746,"nodeType":"ExpressionStatement","src":"20528:55:0"},{"eventCall":{"arguments":[{"id":748,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":691,"src":"20603:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":749,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"20611:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":750,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"20622:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":747,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"20594:8:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20594:35:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":752,"nodeType":"EmitStatement","src":"20589:40:0"}]},"documentation":{"id":689,"nodeType":"StructuredDocumentation","src":"19674:437:0","text":" @dev Moves tokens `amount` from `sender` to `recipient`.\n This is internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `sender` cannot be the zero address.\n - `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`."},"id":754,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nodeType":"FunctionDefinition","parameters":{"id":696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":691,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":754,"src":"20138:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":690,"name":"address","nodeType":"ElementaryTypeName","src":"20138:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":693,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":754,"src":"20158:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":692,"name":"address","nodeType":"ElementaryTypeName","src":"20158:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":695,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":754,"src":"20181:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":694,"name":"uint256","nodeType":"ElementaryTypeName","src":"20181:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20132:67:0"},"returnParameters":{"id":697,"nodeType":"ParameterList","parameters":[],"src":"20217:0:0"},"scope":933,"src":"20114:520:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":808,"nodeType":"Block","src":"20949:283:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":763,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"20963:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20982:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":765,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20974:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":764,"name":"address","nodeType":"ElementaryTypeName","src":"20974:7:0","typeDescriptions":{}}},"id":767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20974:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"20963:21:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","id":769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20986:33:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""},"value":"ERC20: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""}],"id":762,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"20955:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20955:65:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":771,"nodeType":"ExpressionStatement","src":"20955:65:0"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21056:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":774,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21048:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":773,"name":"address","nodeType":"ElementaryTypeName","src":"21048:7:0","typeDescriptions":{}}},"id":776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21048:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":777,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"21060:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":778,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":759,"src":"21069:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":772,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":932,"src":"21027:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21027:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":780,"nodeType":"ExpressionStatement","src":"21027:49:0"},{"expression":{"id":786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":781,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"21083:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":784,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":759,"src":"21115:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":782,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"21098:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":203,"src":"21098:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21098:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21083:39:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":787,"nodeType":"ExpressionStatement","src":"21083:39:0"},{"expression":{"id":797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":788,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"21128:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":790,"indexExpression":{"id":789,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"21138:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21128:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":795,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":759,"src":"21172:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":791,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"21149:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":793,"indexExpression":{"id":792,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"21159:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21149:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":203,"src":"21149:22:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21149:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21128:51:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":798,"nodeType":"ExpressionStatement","src":"21128:51:0"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21207:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":801,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21199:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":800,"name":"address","nodeType":"ElementaryTypeName","src":"21199:7:0","typeDescriptions":{}}},"id":803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21199:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":804,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"21211:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":805,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":759,"src":"21220:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":799,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"21190:8:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21190:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":807,"nodeType":"EmitStatement","src":"21185:42:0"}]},"documentation":{"id":755,"nodeType":"StructuredDocumentation","src":"20638:243:0","text":"@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements\n - `to` cannot be the zero address."},"id":809,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nodeType":"FunctionDefinition","parameters":{"id":760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":757,"mutability":"mutable","name":"account","nodeType":"VariableDeclaration","scope":809,"src":"20899:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":756,"name":"address","nodeType":"ElementaryTypeName","src":"20899:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":759,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":809,"src":"20916:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":758,"name":"uint256","nodeType":"ElementaryTypeName","src":"20916:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20898:33:0"},"returnParameters":{"id":761,"nodeType":"ParameterList","parameters":[],"src":"20949:0:0"},"scope":933,"src":"20884:348:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":864,"nodeType":"Block","src":"21592:323:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":818,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"21606:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21625:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":820,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21617:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":819,"name":"address","nodeType":"ElementaryTypeName","src":"21617:7:0","typeDescriptions":{}}},"id":822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21617:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"21606:21:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f2061646472657373","id":824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"21629:35:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""},"value":"ERC20: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""}],"id":817,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"21598:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21598:67:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":826,"nodeType":"ExpressionStatement","src":"21598:67:0"},{"expression":{"arguments":[{"id":828,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"21693:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21710:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":830,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21702:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":829,"name":"address","nodeType":"ElementaryTypeName","src":"21702:7:0","typeDescriptions":{}}},"id":832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21702:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":833,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"21714:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":827,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":932,"src":"21672:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21672:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":835,"nodeType":"ExpressionStatement","src":"21672:49:0"},{"expression":{"id":846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":836,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"21728:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":838,"indexExpression":{"id":837,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"21738:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21728:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":843,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"21772:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365","id":844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"21780:36:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""},"value":"ERC20: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""}],"expression":{"baseExpression":{"id":839,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"21749:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":841,"indexExpression":{"id":840,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"21759:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21749:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":248,"src":"21749:22:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21749:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21728:89:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":847,"nodeType":"ExpressionStatement","src":"21728:89:0"},{"expression":{"id":853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":848,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"21823:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":851,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"21855:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":849,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"21838:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":220,"src":"21838:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21838:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21823:39:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":854,"nodeType":"ExpressionStatement","src":"21823:39:0"},{"eventCall":{"arguments":[{"id":856,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"21882:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21899:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":858,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21891:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":857,"name":"address","nodeType":"ElementaryTypeName","src":"21891:7:0","typeDescriptions":{}}},"id":860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21891:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":861,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"21903:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":855,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"21873:8:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21873:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":863,"nodeType":"EmitStatement","src":"21868:42:0"}]},"documentation":{"id":810,"nodeType":"StructuredDocumentation","src":"21236:288:0","text":" @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."},"id":865,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nodeType":"FunctionDefinition","parameters":{"id":815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":812,"mutability":"mutable","name":"account","nodeType":"VariableDeclaration","scope":865,"src":"21542:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":811,"name":"address","nodeType":"ElementaryTypeName","src":"21542:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":814,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":865,"src":"21559:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":813,"name":"uint256","nodeType":"ElementaryTypeName","src":"21559:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21541:33:0"},"returnParameters":{"id":816,"nodeType":"ParameterList","parameters":[],"src":"21592:0:0"},"scope":933,"src":"21527:388:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":909,"nodeType":"Block","src":"22411:239:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":876,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"22425:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22442:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":878,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22434:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":877,"name":"address","nodeType":"ElementaryTypeName","src":"22434:7:0","typeDescriptions":{}}},"id":880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22434:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"22425:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373","id":882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22446:38:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""},"value":"ERC20: approve from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""}],"id":875,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"22417:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22417:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":884,"nodeType":"ExpressionStatement","src":"22417:68:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":886,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"22499:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22518:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":888,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22510:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":887,"name":"address","nodeType":"ElementaryTypeName","src":"22510:7:0","typeDescriptions":{}}},"id":890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22510:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"22499:21:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f2061646472657373","id":892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22522:36:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""},"value":"ERC20: approve to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""}],"id":885,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"22491:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22491:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":894,"nodeType":"ExpressionStatement","src":"22491:68:0"},{"expression":{"id":901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":895,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"22566:11:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":898,"indexExpression":{"id":896,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"22578:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22566:18:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":899,"indexExpression":{"id":897,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"22585:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"22566:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":900,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"22596:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22566:36:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":902,"nodeType":"ExpressionStatement","src":"22566:36:0"},{"eventCall":{"arguments":[{"id":904,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"22622:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":905,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"22629:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":906,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"22638:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":903,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":175,"src":"22613:8:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22613:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":908,"nodeType":"EmitStatement","src":"22608:37:0"}]},"documentation":{"id":866,"nodeType":"StructuredDocumentation","src":"21919:390:0","text":" @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n This is internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."},"id":910,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nodeType":"FunctionDefinition","parameters":{"id":873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":868,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":910,"src":"22335:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":867,"name":"address","nodeType":"ElementaryTypeName","src":"22335:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":870,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":910,"src":"22354:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":869,"name":"address","nodeType":"ElementaryTypeName","src":"22354:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":872,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":910,"src":"22375:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":871,"name":"uint256","nodeType":"ElementaryTypeName","src":"22375:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22329:64:0"},"returnParameters":{"id":874,"nodeType":"ParameterList","parameters":[],"src":"22411:0:0"},"scope":933,"src":"22312:338:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":920,"nodeType":"Block","src":"23007:32:0","statements":[{"expression":{"id":918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":916,"name":"_decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"23013:9:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":917,"name":"decimals_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"23025:9:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"23013:21:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":919,"nodeType":"ExpressionStatement","src":"23013:21:0"}]},"documentation":{"id":911,"nodeType":"StructuredDocumentation","src":"22654:300:0","text":" @dev Sets {decimals} to a value other than the default one of 18.\n WARNING: This function should only be called from the constructor. Most\n applications that interact with token contracts will not expect\n {decimals} to ever change, and may work incorrectly if it does."},"id":921,"implemented":true,"kind":"function","modifiers":[],"name":"_setupDecimals","nodeType":"FunctionDefinition","parameters":{"id":914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":913,"mutability":"mutable","name":"decimals_","nodeType":"VariableDeclaration","scope":921,"src":"22981:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":912,"name":"uint8","nodeType":"ElementaryTypeName","src":"22981:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"22980:17:0"},"returnParameters":{"id":915,"nodeType":"ParameterList","parameters":[],"src":"23007:0:0"},"scope":933,"src":"22957:82:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":931,"nodeType":"Block","src":"23701:2:0","statements":[]},"documentation":{"id":922,"nodeType":"StructuredDocumentation","src":"23043:550:0","text":" @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be to transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":932,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nodeType":"FunctionDefinition","parameters":{"id":929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":924,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":932,"src":"23631:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":923,"name":"address","nodeType":"ElementaryTypeName","src":"23631:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":926,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":932,"src":"23649:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":925,"name":"address","nodeType":"ElementaryTypeName","src":"23649:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":928,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":932,"src":"23665:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":927,"name":"uint256","nodeType":"ElementaryTypeName","src":"23665:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23625:58:0"},"returnParameters":{"id":930,"nodeType":"ParameterList","parameters":[],"src":"23701:0:0"},"scope":933,"src":"23596:107:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":3651,"src":"14658:9047:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":958,"linearizedBaseContracts":[958],"name":"IStakedAave","nodeType":"ContractDefinition","nodes":[{"functionSelector":"adc9772e","id":940,"implemented":false,"kind":"function","modifiers":[],"name":"stake","nodeType":"FunctionDefinition","parameters":{"id":938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":935,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":940,"src":"23748:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":934,"name":"address","nodeType":"ElementaryTypeName","src":"23748:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":937,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":940,"src":"23760:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":936,"name":"uint256","nodeType":"ElementaryTypeName","src":"23760:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23747:28:0"},"returnParameters":{"id":939,"nodeType":"ParameterList","parameters":[],"src":"23784:0:0"},"scope":958,"src":"23733:52:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"1e9a6950","id":947,"implemented":false,"kind":"function","modifiers":[],"name":"redeem","nodeType":"FunctionDefinition","parameters":{"id":945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":942,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":947,"src":"23805:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":941,"name":"address","nodeType":"ElementaryTypeName","src":"23805:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":944,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":947,"src":"23817:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":943,"name":"uint256","nodeType":"ElementaryTypeName","src":"23817:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23804:28:0"},"returnParameters":{"id":946,"nodeType":"ParameterList","parameters":[],"src":"23841:0:0"},"scope":958,"src":"23789:53:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"787a08a6","id":950,"implemented":false,"kind":"function","modifiers":[],"name":"cooldown","nodeType":"FunctionDefinition","parameters":{"id":948,"nodeType":"ParameterList","parameters":[],"src":"23863:2:0"},"returnParameters":{"id":949,"nodeType":"ParameterList","parameters":[],"src":"23874:0:0"},"scope":958,"src":"23846:29:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"9a99b4f0","id":957,"implemented":false,"kind":"function","modifiers":[],"name":"claimRewards","nodeType":"FunctionDefinition","parameters":{"id":955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":952,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":957,"src":"23901:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":951,"name":"address","nodeType":"ElementaryTypeName","src":"23901:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":954,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":957,"src":"23913:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":953,"name":"uint256","nodeType":"ElementaryTypeName","src":"23913:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23900:28:0"},"returnParameters":{"id":956,"nodeType":"ParameterList","parameters":[],"src":"23937:0:0"},"scope":958,"src":"23879:59:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3651,"src":"23707:233:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":968,"linearizedBaseContracts":[968],"name":"ITransferHook","nodeType":"ContractDefinition","nodes":[{"functionSelector":"4a393149","id":967,"implemented":false,"kind":"function","modifiers":[],"name":"onTransfer","nodeType":"FunctionDefinition","parameters":{"id":965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":960,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":967,"src":"23995:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":959,"name":"address","nodeType":"ElementaryTypeName","src":"23995:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":962,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":967,"src":"24013:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":961,"name":"address","nodeType":"ElementaryTypeName","src":"24013:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":964,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":967,"src":"24029:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":963,"name":"uint256","nodeType":"ElementaryTypeName","src":"24029:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23989:58:0"},"returnParameters":{"id":966,"nodeType":"ParameterList","parameters":[],"src":"24056:0:0"},"scope":968,"src":"23970:87:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3651,"src":"23942:117:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":983,"linearizedBaseContracts":[983],"name":"DistributionTypes","nodeType":"ContractDefinition","nodes":[{"canonicalName":"DistributionTypes.AssetConfigInput","id":975,"members":[{"constant":false,"id":970,"mutability":"mutable","name":"emissionPerSecond","nodeType":"VariableDeclaration","scope":975,"src":"24121:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":969,"name":"uint128","nodeType":"ElementaryTypeName","src":"24121:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":972,"mutability":"mutable","name":"totalStaked","nodeType":"VariableDeclaration","scope":975,"src":"24152:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":971,"name":"uint256","nodeType":"ElementaryTypeName","src":"24152:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":974,"mutability":"mutable","name":"underlyingAsset","nodeType":"VariableDeclaration","scope":975,"src":"24177:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":973,"name":"address","nodeType":"ElementaryTypeName","src":"24177:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AssetConfigInput","nodeType":"StructDefinition","scope":983,"src":"24091:114:0","visibility":"public"},{"canonicalName":"DistributionTypes.UserStakeInput","id":982,"members":[{"constant":false,"id":977,"mutability":"mutable","name":"underlyingAsset","nodeType":"VariableDeclaration","scope":982,"src":"24237:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":976,"name":"address","nodeType":"ElementaryTypeName","src":"24237:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":979,"mutability":"mutable","name":"stakedByUser","nodeType":"VariableDeclaration","scope":982,"src":"24266:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":978,"name":"uint256","nodeType":"ElementaryTypeName","src":"24266:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":981,"mutability":"mutable","name":"totalStaked","nodeType":"VariableDeclaration","scope":982,"src":"24292:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":980,"name":"uint256","nodeType":"ElementaryTypeName","src":"24292:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"UserStakeInput","nodeType":"StructDefinition","scope":983,"src":"24209:107:0","visibility":"public"}],"scope":3651,"src":"24061:257:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":984,"nodeType":"StructuredDocumentation","src":"24320:520:0","text":" @title SafeERC20\n @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\n Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":1132,"linearizedBaseContracts":[1132],"name":"SafeERC20","nodeType":"ContractDefinition","nodes":[{"id":987,"libraryName":{"id":985,"name":"SafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":370,"src":"24869:8:0","typeDescriptions":{"typeIdentifier":"t_contract$_SafeMath_$370","typeString":"library SafeMath"}},"nodeType":"UsingForDirective","src":"24863:27:0","typeName":{"id":986,"name":"uint256","nodeType":"ElementaryTypeName","src":"24882:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"id":990,"libraryName":{"id":988,"name":"Address","nodeType":"UserDefinedTypeName","referencedDeclaration":432,"src":"24899:7:0","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$432","typeString":"library Address"}},"nodeType":"UsingForDirective","src":"24893:26:0","typeName":{"id":989,"name":"address","nodeType":"ElementaryTypeName","src":"24911:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":1011,"nodeType":"Block","src":"25011:96:0","statements":[{"expression":{"arguments":[{"id":1000,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"25036:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1003,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"25066:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},"id":1004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":125,"src":"25066:14:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"25066:23:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1006,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"25091:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1007,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"25095:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1001,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"25043:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1002,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"25043:22:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25043:58:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":999,"name":"callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"25017:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$176_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25017:85:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1010,"nodeType":"ExpressionStatement","src":"25017:85:0"}]},"id":1012,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nodeType":"FunctionDefinition","parameters":{"id":997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":992,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":1012,"src":"24950:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"},"typeName":{"id":991,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":176,"src":"24950:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":994,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":1012,"src":"24968:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":993,"name":"address","nodeType":"ElementaryTypeName","src":"24968:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":996,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":1012,"src":"24984:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":995,"name":"uint256","nodeType":"ElementaryTypeName","src":"24984:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24944:57:0"},"returnParameters":{"id":998,"nodeType":"ParameterList","parameters":[],"src":"25011:0:0"},"scope":1132,"src":"24923:184:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1036,"nodeType":"Block","src":"25221:106:0","statements":[{"expression":{"arguments":[{"id":1024,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1014,"src":"25246:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1027,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1014,"src":"25276:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},"id":1028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":157,"src":"25276:18:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"25276:27:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1030,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1016,"src":"25305:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1031,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1018,"src":"25311:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1032,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1020,"src":"25315:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1025,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"25253:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1026,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"25253:22:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25253:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1023,"name":"callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"25227:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$176_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25227:95:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1035,"nodeType":"ExpressionStatement","src":"25227:95:0"}]},"id":1037,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nodeType":"FunctionDefinition","parameters":{"id":1021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1014,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":1037,"src":"25142:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"},"typeName":{"id":1013,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":176,"src":"25142:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1016,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":1037,"src":"25160:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1015,"name":"address","nodeType":"ElementaryTypeName","src":"25160:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1018,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":1037,"src":"25178:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1017,"name":"address","nodeType":"ElementaryTypeName","src":"25178:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1020,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":1037,"src":"25194:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1019,"name":"uint256","nodeType":"ElementaryTypeName","src":"25194:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25136:75:0"},"returnParameters":{"id":1022,"nodeType":"ParameterList","parameters":[],"src":"25221:0:0"},"scope":1132,"src":"25111:216:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1078,"nodeType":"Block","src":"25423:253:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1047,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"25445:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25454:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"25445:10:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1050,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"25444:12:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1055,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"25485:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1132","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1132","typeString":"library SafeERC20"}],"id":1054,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25477:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1053,"name":"address","nodeType":"ElementaryTypeName","src":"25477:7:0","typeDescriptions":{}}},"id":1056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25477:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1057,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1041,"src":"25492:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1051,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"25461:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},"id":1052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":135,"src":"25461:15:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25461:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25504:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"25461:44:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1061,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"25460:46:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"25444:62:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":1063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"25514:56:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":1046,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"25429:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25429:147:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1065,"nodeType":"ExpressionStatement","src":"25429:147:0"},{"expression":{"arguments":[{"id":1067,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"25601:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1070,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"25631:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":145,"src":"25631:13:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"25631:22:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1073,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1041,"src":"25655:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1074,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"25664:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1068,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"25608:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1069,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"25608:22:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25608:62:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1066,"name":"callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"25582:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$176_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25582:89:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1077,"nodeType":"ExpressionStatement","src":"25582:89:0"}]},"id":1079,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nodeType":"FunctionDefinition","parameters":{"id":1044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1039,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":1079,"src":"25357:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"},"typeName":{"id":1038,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":176,"src":"25357:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1041,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":1079,"src":"25375:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1040,"name":"address","nodeType":"ElementaryTypeName","src":"25375:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1043,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":1079,"src":"25396:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1042,"name":"uint256","nodeType":"ElementaryTypeName","src":"25396:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25351:62:0"},"returnParameters":{"id":1045,"nodeType":"ParameterList","parameters":[],"src":"25423:0:0"},"scope":1132,"src":"25331:345:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1130,"nodeType":"Block","src":"25749:486:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1089,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"25771:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}],"id":1088,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25763:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1087,"name":"address","nodeType":"ElementaryTypeName","src":"25763:7:0","typeDescriptions":{}}},"id":1090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25763:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":397,"src":"25763:25:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25763:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"25792:33:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_f6ce7bfd656f35145dec774d6f7e67f4cba158373d2dd7a0f8273e232f86148d","typeString":"literal_string \"SafeERC20: call to non-contract\""},"value":"SafeERC20: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f6ce7bfd656f35145dec774d6f7e67f4cba158373d2dd7a0f8273e232f86148d","typeString":"literal_string \"SafeERC20: call to non-contract\""}],"id":1086,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"25755:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25755:71:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1095,"nodeType":"ExpressionStatement","src":"25755:71:0"},{"assignments":[1097,1099],"declarations":[{"constant":false,"id":1097,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":1130,"src":"25889:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1096,"name":"bool","nodeType":"ElementaryTypeName","src":"25889:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1099,"mutability":"mutable","name":"returndata","nodeType":"VariableDeclaration","scope":1130,"src":"25903:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1098,"name":"bytes","nodeType":"ElementaryTypeName","src":"25903:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1107,"initialValue":{"arguments":[{"id":1105,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"25950:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1102,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"25938:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}],"id":1101,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25930:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1100,"name":"address","nodeType":"ElementaryTypeName","src":"25930:7:0","typeDescriptions":{}}},"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25930:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"25930:19:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25930:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"25888:67:0"},{"expression":{"arguments":[{"id":1109,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1097,"src":"25969:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":1110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"25978:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"id":1108,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"25961:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25961:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1112,"nodeType":"ExpressionStatement","src":"25961:52:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1113,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"26024:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"26024:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26044:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"26024:21:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1129,"nodeType":"IfStatement","src":"26020:211:0","trueBody":{"id":1128,"nodeType":"Block","src":"26047:184:0","statements":[{"expression":{"arguments":[{"arguments":[{"id":1120,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"26158:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26171:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1121,"name":"bool","nodeType":"ElementaryTypeName","src":"26171:4:0","typeDescriptions":{}}}],"id":1123,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"26170:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1118,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"26147:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1119,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"26147:10:0","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26147:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":1125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"26179:44:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":1117,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"26139:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26139:85:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1127,"nodeType":"ExpressionStatement","src":"26139:85:0"}]}}]},"id":1131,"implemented":true,"kind":"function","modifiers":[],"name":"callOptionalReturn","nodeType":"FunctionDefinition","parameters":{"id":1084,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1081,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":1131,"src":"25708:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"},"typeName":{"id":1080,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":176,"src":"25708:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1083,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1131,"src":"25722:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1082,"name":"bytes","nodeType":"ElementaryTypeName","src":"25722:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"25707:33:0"},"returnParameters":{"id":1085,"nodeType":"ParameterList","parameters":[],"src":"25749:0:0"},"scope":1132,"src":"25680:555:0","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":3651,"src":"24841:1396:0"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":1133,"nodeType":"StructuredDocumentation","src":"26239:702:0","text":" @title VersionedInitializable\n @dev Helper contract to support initializer functions. To use it, replace\n the constructor with a function that has the `initializer` modifier.\n WARNING: Unlike constructors, initializer functions must be manually\n invoked. This applies both to deploying an Initializable contract, as well\n as extending an Initializable contract via inheritance.\n WARNING: When used with inheritance, manual care must be taken to not invoke\n a parent initializer twice, or ensure that all initializers are idempotent,\n because this is not dealt with automatically as with constructors.\n @author Aave, inspired by the OpenZeppelin Initializable contract"},"fullyImplemented":false,"id":1169,"linearizedBaseContracts":[1169],"name":"VersionedInitializable","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":1134,"nodeType":"StructuredDocumentation","src":"26987:69:0","text":" @dev Indicates that the contract has been initialized."},"id":1137,"mutability":"mutable","name":"lastInitializedRevision","nodeType":"VariableDeclaration","scope":1169,"src":"27059:44:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1135,"name":"uint256","nodeType":"ElementaryTypeName","src":"27059:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":1136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27102:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"internal"},{"body":{"id":1157,"nodeType":"Block","src":"27212:191:0","statements":[{"assignments":[1141],"declarations":[{"constant":false,"id":1141,"mutability":"mutable","name":"revision","nodeType":"VariableDeclaration","scope":1157,"src":"27218:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1140,"name":"uint256","nodeType":"ElementaryTypeName","src":"27218:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1144,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1142,"name":"getRevision","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"27237:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_uint256_$","typeString":"function () pure returns (uint256)"}},"id":1143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"27237:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"27218:32:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1146,"name":"revision","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"27264:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1147,"name":"lastInitializedRevision","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"27275:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27264:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564","id":1149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"27300:48:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fbba6c4dcac9134893b633b9564f36435b3f927c1d5fa152c5c14b20cecb1a4","typeString":"literal_string \"Contract instance has already been initialized\""},"value":"Contract instance has already been initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9fbba6c4dcac9134893b633b9564f36435b3f927c1d5fa152c5c14b20cecb1a4","typeString":"literal_string \"Contract instance has already been initialized\""}],"id":1145,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"27256:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"27256:93:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1151,"nodeType":"ExpressionStatement","src":"27256:93:0"},{"expression":{"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1152,"name":"lastInitializedRevision","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"27356:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1153,"name":"revision","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"27382:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27356:34:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1155,"nodeType":"ExpressionStatement","src":"27356:34:0"},{"id":1156,"nodeType":"PlaceholderStatement","src":"27397:1:0"}]},"documentation":{"id":1138,"nodeType":"StructuredDocumentation","src":"27108:78:0","text":" @dev Modifier to use in the initializer function of a contract."},"id":1158,"name":"initializer","nodeType":"ModifierDefinition","parameters":{"id":1139,"nodeType":"ParameterList","parameters":[],"src":"27209:2:0"},"src":"27189:214:0","virtual":false,"visibility":"internal"},{"documentation":{"id":1159,"nodeType":"StructuredDocumentation","src":"27407:117:0","text":"@dev returns the revision number of the contract.\n Needs to be defined in the inherited class as a constant."},"id":1164,"implemented":false,"kind":"function","modifiers":[],"name":"getRevision","nodeType":"FunctionDefinition","parameters":{"id":1160,"nodeType":"ParameterList","parameters":[],"src":"27547:2:0"},"returnParameters":{"id":1163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1162,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1164,"src":"27581:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1161,"name":"uint256","nodeType":"ElementaryTypeName","src":"27581:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27580:9:0"},"scope":1169,"src":"27527:63:0","stateMutability":"pure","virtual":true,"visibility":"internal"},{"constant":false,"id":1168,"mutability":"mutable","name":"______gap","nodeType":"VariableDeclaration","scope":1169,"src":"27665:29:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1165,"name":"uint256","nodeType":"ElementaryTypeName","src":"27665:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1167,"length":{"hexValue":"3530","id":1166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27673:2:0","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"27665:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":3651,"src":"26942:755:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1176,"linearizedBaseContracts":[1176],"name":"IAaveDistributionManager","nodeType":"ContractDefinition","nodes":[{"functionSelector":"b2a5dbfa","id":1175,"implemented":false,"kind":"function","modifiers":[],"name":"configureAssets","nodeType":"FunctionDefinition","parameters":{"id":1173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1172,"mutability":"mutable","name":"assetsConfigInput","nodeType":"VariableDeclaration","scope":1175,"src":"27763:63:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AssetConfigInput_$975_calldata_ptr_$dyn_calldata_ptr","typeString":"struct DistributionTypes.AssetConfigInput[]"},"typeName":{"baseType":{"id":1170,"name":"DistributionTypes.AssetConfigInput","nodeType":"UserDefinedTypeName","referencedDeclaration":975,"src":"27763:34:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetConfigInput_$975_storage_ptr","typeString":"struct DistributionTypes.AssetConfigInput"}},"id":1171,"nodeType":"ArrayTypeName","src":"27763:36:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AssetConfigInput_$975_storage_$dyn_storage_ptr","typeString":"struct DistributionTypes.AssetConfigInput[]"}},"visibility":"internal"}],"src":"27762:65:0"},"returnParameters":{"id":1174,"nodeType":"ParameterList","parameters":[],"src":"27840:0:0"},"scope":1176,"src":"27738:103:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3651,"src":"27699:144:0"},{"abstract":false,"baseContracts":[{"baseName":{"id":1178,"name":"IAaveDistributionManager","nodeType":"UserDefinedTypeName","referencedDeclaration":1176,"src":"28012:24:0","typeDescriptions":{"typeIdentifier":"t_contract$_IAaveDistributionManager_$1176","typeString":"contract IAaveDistributionManager"}},"id":1179,"nodeType":"InheritanceSpecifier","src":"28012:24:0"}],"contractDependencies":[1176],"contractKind":"contract","documentation":{"id":1177,"nodeType":"StructuredDocumentation","src":"27845:130:0","text":" @title AaveDistributionManager\n @notice Accounting contract to manage multiple staking distributions\n @author Aave*"},"fullyImplemented":true,"id":1702,"linearizedBaseContracts":[1702,1176],"name":"AaveDistributionManager","nodeType":"ContractDefinition","nodes":[{"id":1182,"libraryName":{"id":1180,"name":"SafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":370,"src":"28047:8:0","typeDescriptions":{"typeIdentifier":"t_contract$_SafeMath_$370","typeString":"library SafeMath"}},"nodeType":"UsingForDirective","src":"28041:27:0","typeName":{"id":1181,"name":"uint256","nodeType":"ElementaryTypeName","src":"28060:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"canonicalName":"AaveDistributionManager.AssetData","id":1193,"members":[{"constant":false,"id":1184,"mutability":"mutable","name":"emissionPerSecond","nodeType":"VariableDeclaration","scope":1193,"src":"28095:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1183,"name":"uint128","nodeType":"ElementaryTypeName","src":"28095:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1186,"mutability":"mutable","name":"lastUpdateTimestamp","nodeType":"VariableDeclaration","scope":1193,"src":"28126:27:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1185,"name":"uint128","nodeType":"ElementaryTypeName","src":"28126:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1188,"mutability":"mutable","name":"index","nodeType":"VariableDeclaration","scope":1193,"src":"28159:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1187,"name":"uint256","nodeType":"ElementaryTypeName","src":"28159:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1192,"mutability":"mutable","name":"users","nodeType":"VariableDeclaration","scope":1193,"src":"28178:33:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1191,"keyType":{"id":1189,"name":"address","nodeType":"ElementaryTypeName","src":"28186:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"28178:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":1190,"name":"uint256","nodeType":"ElementaryTypeName","src":"28197:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"AssetData","nodeType":"StructDefinition","scope":1702,"src":"28072:144:0","visibility":"public"},{"constant":false,"functionSelector":"919cd40f","id":1195,"mutability":"immutable","name":"DISTRIBUTION_END","nodeType":"VariableDeclaration","scope":1702,"src":"28220:41:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1194,"name":"uint256","nodeType":"ElementaryTypeName","src":"28220:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"cbcbb507","id":1197,"mutability":"immutable","name":"EMISSION_MANAGER","nodeType":"VariableDeclaration","scope":1702,"src":"28266:41:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1196,"name":"address","nodeType":"ElementaryTypeName","src":"28266:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":true,"functionSelector":"aaf5eb68","id":1200,"mutability":"constant","name":"PRECISION","nodeType":"VariableDeclaration","scope":1702,"src":"28312:36:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1198,"name":"uint8","nodeType":"ElementaryTypeName","src":"28312:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3138","id":1199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28346:2:0","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"visibility":"public"},{"constant":false,"functionSelector":"f11b8188","id":1204,"mutability":"mutable","name":"assets","nodeType":"VariableDeclaration","scope":1702,"src":"28353:43:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_AssetData_$1193_storage_$","typeString":"mapping(address => struct AaveDistributionManager.AssetData)"},"typeName":{"id":1203,"keyType":{"id":1201,"name":"address","nodeType":"ElementaryTypeName","src":"28361:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"28353:29:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_AssetData_$1193_storage_$","typeString":"mapping(address => struct AaveDistributionManager.AssetData)"},"valueType":{"id":1202,"name":"AssetData","nodeType":"UserDefinedTypeName","referencedDeclaration":1193,"src":"28372:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData"}}},"visibility":"public"},{"anonymous":false,"id":1210,"name":"AssetConfigUpdated","nodeType":"EventDefinition","parameters":{"id":1209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1206,"indexed":true,"mutability":"mutable","name":"asset","nodeType":"VariableDeclaration","scope":1210,"src":"28426:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1205,"name":"address","nodeType":"ElementaryTypeName","src":"28426:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1208,"indexed":false,"mutability":"mutable","name":"emission","nodeType":"VariableDeclaration","scope":1210,"src":"28449:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1207,"name":"uint256","nodeType":"ElementaryTypeName","src":"28449:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"28425:41:0"},"src":"28401:66:0"},{"anonymous":false,"id":1216,"name":"AssetIndexUpdated","nodeType":"EventDefinition","parameters":{"id":1215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1212,"indexed":true,"mutability":"mutable","name":"asset","nodeType":"VariableDeclaration","scope":1216,"src":"28494:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1211,"name":"address","nodeType":"ElementaryTypeName","src":"28494:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1214,"indexed":false,"mutability":"mutable","name":"index","nodeType":"VariableDeclaration","scope":1216,"src":"28517:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1213,"name":"uint256","nodeType":"ElementaryTypeName","src":"28517:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"28493:38:0"},"src":"28470:62:0"},{"anonymous":false,"id":1224,"name":"UserIndexUpdated","nodeType":"EventDefinition","parameters":{"id":1223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1218,"indexed":true,"mutability":"mutable","name":"user","nodeType":"VariableDeclaration","scope":1224,"src":"28558:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1217,"name":"address","nodeType":"ElementaryTypeName","src":"28558:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1220,"indexed":true,"mutability":"mutable","name":"asset","nodeType":"VariableDeclaration","scope":1224,"src":"28580:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1219,"name":"address","nodeType":"ElementaryTypeName","src":"28580:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1222,"indexed":false,"mutability":"mutable","name":"index","nodeType":"VariableDeclaration","scope":1224,"src":"28603:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1221,"name":"uint256","nodeType":"ElementaryTypeName","src":"28603:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"28557:60:0"},"src":"28535:83:0"},{"body":{"id":1243,"nodeType":"Block","src":"28696:111:0","statements":[{"expression":{"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1231,"name":"DISTRIBUTION_END","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"28702:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1235,"name":"distributionDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"28741:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":1232,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"28721:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"28721:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":203,"src":"28721:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"28721:41:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28702:60:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1238,"nodeType":"ExpressionStatement","src":"28702:60:0"},{"expression":{"id":1241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1239,"name":"EMISSION_MANAGER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"28768:16:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1240,"name":"emissionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"28787:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"28768:34:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1242,"nodeType":"ExpressionStatement","src":"28768:34:0"}]},"id":1244,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":1229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1226,"mutability":"mutable","name":"emissionManager","nodeType":"VariableDeclaration","scope":1244,"src":"28634:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1225,"name":"address","nodeType":"ElementaryTypeName","src":"28634:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1228,"mutability":"mutable","name":"distributionDuration","nodeType":"VariableDeclaration","scope":1244,"src":"28659:28:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1227,"name":"uint256","nodeType":"ElementaryTypeName","src":"28659:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"28633:55:0"},"returnParameters":{"id":1230,"nodeType":"ParameterList","parameters":[],"src":"28696:0:0"},"scope":1702,"src":"28622:185:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1175],"body":{"id":1314,"nodeType":"Block","src":"29078:591:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1253,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"29092:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"29092:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1255,"name":"EMISSION_MANAGER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"29106:16:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"29092:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f4e4c595f454d495353494f4e5f4d414e41474552","id":1257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"29124:23:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_a28d34ff463a8cc689c6ec4b8c995983f85d0a40987242bc4cc3cec37303c18e","typeString":"literal_string \"ONLY_EMISSION_MANAGER\""},"value":"ONLY_EMISSION_MANAGER"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a28d34ff463a8cc689c6ec4b8c995983f85d0a40987242bc4cc3cec37303c18e","typeString":"literal_string \"ONLY_EMISSION_MANAGER\""}],"id":1252,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"29084:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"29084:64:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1259,"nodeType":"ExpressionStatement","src":"29084:64:0"},{"body":{"id":1312,"nodeType":"Block","src":"29210:455:0","statements":[{"assignments":[1272],"declarations":[{"constant":false,"id":1272,"mutability":"mutable","name":"assetConfig","nodeType":"VariableDeclaration","scope":1312,"src":"29218:29:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData"},"typeName":{"id":1271,"name":"AssetData","nodeType":"UserDefinedTypeName","referencedDeclaration":1193,"src":"29218:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData"}},"visibility":"internal"}],"id":1279,"initialValue":{"baseExpression":{"id":1273,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"29250:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_AssetData_$1193_storage_$","typeString":"mapping(address => struct AaveDistributionManager.AssetData storage ref)"}},"id":1278,"indexExpression":{"expression":{"baseExpression":{"id":1274,"name":"assetsConfigInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"29257:17:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AssetConfigInput_$975_calldata_ptr_$dyn_calldata_ptr","typeString":"struct DistributionTypes.AssetConfigInput calldata[] calldata"}},"id":1276,"indexExpression":{"id":1275,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"29275:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29257:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetConfigInput_$975_calldata_ptr","typeString":"struct DistributionTypes.AssetConfigInput calldata"}},"id":1277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"underlyingAsset","nodeType":"MemberAccess","referencedDeclaration":974,"src":"29257:36:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29250:44:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage","typeString":"struct AaveDistributionManager.AssetData storage ref"}},"nodeType":"VariableDeclarationStatement","src":"29218:76:0"},{"expression":{"arguments":[{"expression":{"baseExpression":{"id":1281,"name":"assetsConfigInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"29338:17:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AssetConfigInput_$975_calldata_ptr_$dyn_calldata_ptr","typeString":"struct DistributionTypes.AssetConfigInput calldata[] calldata"}},"id":1283,"indexExpression":{"id":1282,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"29356:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29338:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetConfigInput_$975_calldata_ptr","typeString":"struct DistributionTypes.AssetConfigInput calldata"}},"id":1284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"underlyingAsset","nodeType":"MemberAccess","referencedDeclaration":974,"src":"29338:36:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1285,"name":"assetConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"29384:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData storage pointer"}},{"expression":{"baseExpression":{"id":1286,"name":"assetsConfigInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"29405:17:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AssetConfigInput_$975_calldata_ptr_$dyn_calldata_ptr","typeString":"struct DistributionTypes.AssetConfigInput calldata[] calldata"}},"id":1288,"indexExpression":{"id":1287,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"29423:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29405:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetConfigInput_$975_calldata_ptr","typeString":"struct DistributionTypes.AssetConfigInput calldata"}},"id":1289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"totalStaked","nodeType":"MemberAccess","referencedDeclaration":972,"src":"29405:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1280,"name":"_updateAssetStateInternal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"29303:25:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_struct$_AssetData_$1193_storage_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,struct AaveDistributionManager.AssetData storage pointer,uint256) returns (uint256)"}},"id":1290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"29303:142:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1291,"nodeType":"ExpressionStatement","src":"29303:142:0"},{"expression":{"id":1299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1292,"name":"assetConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"29454:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData storage pointer"}},"id":1294,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"emissionPerSecond","nodeType":"MemberAccess","referencedDeclaration":1184,"src":"29454:29:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"baseExpression":{"id":1295,"name":"assetsConfigInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"29486:17:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AssetConfigInput_$975_calldata_ptr_$dyn_calldata_ptr","typeString":"struct DistributionTypes.AssetConfigInput calldata[] calldata"}},"id":1297,"indexExpression":{"id":1296,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"29504:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29486:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetConfigInput_$975_calldata_ptr","typeString":"struct DistributionTypes.AssetConfigInput calldata"}},"id":1298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"emissionPerSecond","nodeType":"MemberAccess","referencedDeclaration":970,"src":"29486:38:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"29454:70:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":1300,"nodeType":"ExpressionStatement","src":"29454:70:0"},{"eventCall":{"arguments":[{"expression":{"baseExpression":{"id":1302,"name":"assetsConfigInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"29566:17:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AssetConfigInput_$975_calldata_ptr_$dyn_calldata_ptr","typeString":"struct DistributionTypes.AssetConfigInput calldata[] calldata"}},"id":1304,"indexExpression":{"id":1303,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"29584:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29566:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetConfigInput_$975_calldata_ptr","typeString":"struct DistributionTypes.AssetConfigInput calldata"}},"id":1305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"underlyingAsset","nodeType":"MemberAccess","referencedDeclaration":974,"src":"29566:36:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":1306,"name":"assetsConfigInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"29612:17:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AssetConfigInput_$975_calldata_ptr_$dyn_calldata_ptr","typeString":"struct DistributionTypes.AssetConfigInput calldata[] calldata"}},"id":1308,"indexExpression":{"id":1307,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"29630:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29612:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetConfigInput_$975_calldata_ptr","typeString":"struct DistributionTypes.AssetConfigInput calldata"}},"id":1309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"emissionPerSecond","nodeType":"MemberAccess","referencedDeclaration":970,"src":"29612:38:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"id":1301,"name":"AssetConfigUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"29538:18:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"29538:120:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1311,"nodeType":"EmitStatement","src":"29533:125:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1264,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"29175:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1265,"name":"assetsConfigInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"29179:17:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AssetConfigInput_$975_calldata_ptr_$dyn_calldata_ptr","typeString":"struct DistributionTypes.AssetConfigInput calldata[] calldata"}},"id":1266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"29179:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29175:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1313,"initializationExpression":{"assignments":[1261],"declarations":[{"constant":false,"id":1261,"mutability":"mutable","name":"i","nodeType":"VariableDeclaration","scope":1313,"src":"29160:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1260,"name":"uint256","nodeType":"ElementaryTypeName","src":"29160:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1263,"initialValue":{"hexValue":"30","id":1262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29172:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"29160:13:0"},"loopExpression":{"expression":{"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"29205:3:0","subExpression":{"id":1268,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"29205:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1270,"nodeType":"ExpressionStatement","src":"29205:3:0"},"nodeType":"ForStatement","src":"29155:510:0"}]},"documentation":{"id":1245,"nodeType":"StructuredDocumentation","src":"28811:146:0","text":" @dev Configures the distribution of rewards for a list of assets\n @param assetsConfigInput The list of configurations to apply*"},"functionSelector":"b2a5dbfa","id":1315,"implemented":true,"kind":"function","modifiers":[],"name":"configureAssets","nodeType":"FunctionDefinition","overrides":{"id":1250,"nodeType":"OverrideSpecifier","overrides":[],"src":"29067:8:0"},"parameters":{"id":1249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1248,"mutability":"mutable","name":"assetsConfigInput","nodeType":"VariableDeclaration","scope":1315,"src":"28985:63:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AssetConfigInput_$975_calldata_ptr_$dyn_calldata_ptr","typeString":"struct DistributionTypes.AssetConfigInput[]"},"typeName":{"baseType":{"id":1246,"name":"DistributionTypes.AssetConfigInput","nodeType":"UserDefinedTypeName","referencedDeclaration":975,"src":"28985:34:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetConfigInput_$975_storage_ptr","typeString":"struct DistributionTypes.AssetConfigInput"}},"id":1247,"nodeType":"ArrayTypeName","src":"28985:36:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AssetConfigInput_$975_storage_$dyn_storage_ptr","typeString":"struct DistributionTypes.AssetConfigInput[]"}},"visibility":"internal"}],"src":"28984:65:0"},"returnParameters":{"id":1251,"nodeType":"ParameterList","parameters":[],"src":"29078:0:0"},"scope":1702,"src":"28960:709:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1383,"nodeType":"Block","src":"30235:534:0","statements":[{"assignments":[1328],"declarations":[{"constant":false,"id":1328,"mutability":"mutable","name":"oldIndex","nodeType":"VariableDeclaration","scope":1383,"src":"30241:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1327,"name":"uint256","nodeType":"ElementaryTypeName","src":"30241:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1331,"initialValue":{"expression":{"id":1329,"name":"assetConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"30260:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData storage pointer"}},"id":1330,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"index","nodeType":"MemberAccess","referencedDeclaration":1188,"src":"30260:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"30241:36:0"},{"assignments":[1333],"declarations":[{"constant":false,"id":1333,"mutability":"mutable","name":"lastUpdateTimestamp","nodeType":"VariableDeclaration","scope":1383,"src":"30283:27:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1332,"name":"uint128","nodeType":"ElementaryTypeName","src":"30283:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"id":1336,"initialValue":{"expression":{"id":1334,"name":"assetConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"30313:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData storage pointer"}},"id":1335,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"lastUpdateTimestamp","nodeType":"MemberAccess","referencedDeclaration":1186,"src":"30313:31:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"VariableDeclarationStatement","src":"30283:61:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1337,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"30355:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"30355:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1339,"name":"lastUpdateTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"30374:19:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"30355:38:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1344,"nodeType":"IfStatement","src":"30351:74:0","trueBody":{"id":1343,"nodeType":"Block","src":"30395:30:0","statements":[{"expression":{"id":1341,"name":"oldIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"30410:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1326,"id":1342,"nodeType":"Return","src":"30403:15:0"}]}},{"assignments":[1346],"declarations":[{"constant":false,"id":1346,"mutability":"mutable","name":"newIndex","nodeType":"VariableDeclaration","scope":1383,"src":"30431:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1345,"name":"uint256","nodeType":"ElementaryTypeName","src":"30431:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1354,"initialValue":{"arguments":[{"id":1348,"name":"oldIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"30471:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1349,"name":"assetConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"30481:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData storage pointer"}},"id":1350,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"emissionPerSecond","nodeType":"MemberAccess","referencedDeclaration":1184,"src":"30481:29:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":1351,"name":"lastUpdateTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"30512:19:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":1352,"name":"totalStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1322,"src":"30533:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1347,"name":"_getAssetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1683,"src":"30456:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint128_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint128,uint256) view returns (uint256)"}},"id":1353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"30456:89:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"30431:114:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1355,"name":"newIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1346,"src":"30556:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1356,"name":"oldIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"30568:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30556:20:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1370,"nodeType":"IfStatement","src":"30552:126:0","trueBody":{"id":1369,"nodeType":"Block","src":"30578:100:0","statements":[{"expression":{"id":1362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1358,"name":"assetConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"30586:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData storage pointer"}},"id":1360,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"index","nodeType":"MemberAccess","referencedDeclaration":1188,"src":"30586:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1361,"name":"newIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1346,"src":"30606:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30586:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1363,"nodeType":"ExpressionStatement","src":"30586:28:0"},{"eventCall":{"arguments":[{"id":1365,"name":"underlyingAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"30645:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1366,"name":"newIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1346,"src":"30662:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1364,"name":"AssetIndexUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1216,"src":"30627:17:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"30627:44:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1368,"nodeType":"EmitStatement","src":"30622:49:0"}]}},{"expression":{"id":1379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1371,"name":"assetConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"30684:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData storage pointer"}},"id":1373,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"lastUpdateTimestamp","nodeType":"MemberAccess","referencedDeclaration":1186,"src":"30684:31:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":1376,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"30726:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"30726:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1375,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30718:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1374,"name":"uint128","nodeType":"ElementaryTypeName","src":"30718:7:0","typeDescriptions":{}}},"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"30718:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"30684:58:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":1380,"nodeType":"ExpressionStatement","src":"30684:58:0"},{"expression":{"id":1381,"name":"newIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1346,"src":"30756:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1326,"id":1382,"nodeType":"Return","src":"30749:15:0"}]},"documentation":{"id":1316,"nodeType":"StructuredDocumentation","src":"29673:404:0","text":" @dev Updates the state of one distribution, mainly rewards index and timestamp\n @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\n @param assetConfig Storage pointer to the distribution's config\n @param totalStaked Current total of staked assets for this distribution\n @return The new distribution index*"},"id":1384,"implemented":true,"kind":"function","modifiers":[],"name":"_updateAssetStateInternal","nodeType":"FunctionDefinition","parameters":{"id":1323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1318,"mutability":"mutable","name":"underlyingAsset","nodeType":"VariableDeclaration","scope":1384,"src":"30120:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1317,"name":"address","nodeType":"ElementaryTypeName","src":"30120:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1320,"mutability":"mutable","name":"assetConfig","nodeType":"VariableDeclaration","scope":1384,"src":"30149:29:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData"},"typeName":{"id":1319,"name":"AssetData","nodeType":"UserDefinedTypeName","referencedDeclaration":1193,"src":"30149:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData"}},"visibility":"internal"},{"constant":false,"id":1322,"mutability":"mutable","name":"totalStaked","nodeType":"VariableDeclaration","scope":1384,"src":"30184:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1321,"name":"uint256","nodeType":"ElementaryTypeName","src":"30184:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30114:93:0"},"returnParameters":{"id":1326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1325,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1384,"src":"30226:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1324,"name":"uint256","nodeType":"ElementaryTypeName","src":"30226:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30225:9:0"},"scope":1702,"src":"30080:689:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1457,"nodeType":"Block","src":"31327:488:0","statements":[{"assignments":[1399],"declarations":[{"constant":false,"id":1399,"mutability":"mutable","name":"assetData","nodeType":"VariableDeclaration","scope":1457,"src":"31333:27:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData"},"typeName":{"id":1398,"name":"AssetData","nodeType":"UserDefinedTypeName","referencedDeclaration":1193,"src":"31333:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData"}},"visibility":"internal"}],"id":1403,"initialValue":{"baseExpression":{"id":1400,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"31363:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_AssetData_$1193_storage_$","typeString":"mapping(address => struct AaveDistributionManager.AssetData storage ref)"}},"id":1402,"indexExpression":{"id":1401,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"31370:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"31363:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage","typeString":"struct AaveDistributionManager.AssetData storage ref"}},"nodeType":"VariableDeclarationStatement","src":"31333:43:0"},{"assignments":[1405],"declarations":[{"constant":false,"id":1405,"mutability":"mutable","name":"userIndex","nodeType":"VariableDeclaration","scope":1457,"src":"31382:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1404,"name":"uint256","nodeType":"ElementaryTypeName","src":"31382:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1410,"initialValue":{"baseExpression":{"expression":{"id":1406,"name":"assetData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"31402:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData storage pointer"}},"id":1407,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"users","nodeType":"MemberAccess","referencedDeclaration":1192,"src":"31402:15:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1409,"indexExpression":{"id":1408,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"31418:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"31402:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"31382:41:0"},{"assignments":[1412],"declarations":[{"constant":false,"id":1412,"mutability":"mutable","name":"accruedRewards","nodeType":"VariableDeclaration","scope":1457,"src":"31429:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1411,"name":"uint256","nodeType":"ElementaryTypeName","src":"31429:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1414,"initialValue":{"hexValue":"30","id":1413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31454:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"31429:26:0"},{"assignments":[1416],"declarations":[{"constant":false,"id":1416,"mutability":"mutable","name":"newIndex","nodeType":"VariableDeclaration","scope":1457,"src":"31462:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1415,"name":"uint256","nodeType":"ElementaryTypeName","src":"31462:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1422,"initialValue":{"arguments":[{"id":1418,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"31507:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1419,"name":"assetData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"31514:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData storage pointer"}},{"id":1420,"name":"totalStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1393,"src":"31525:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1417,"name":"_updateAssetStateInternal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"31481:25:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_struct$_AssetData_$1193_storage_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,struct AaveDistributionManager.AssetData storage pointer,uint256) returns (uint256)"}},"id":1421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31481:56:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"31462:75:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1423,"name":"userIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"31548:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1424,"name":"newIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1416,"src":"31561:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31548:21:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1454,"nodeType":"IfStatement","src":"31544:239:0","trueBody":{"id":1453,"nodeType":"Block","src":"31571:212:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1426,"name":"stakedByUser","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1391,"src":"31583:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31599:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"31583:17:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1438,"nodeType":"IfStatement","src":"31579:105:0","trueBody":{"id":1437,"nodeType":"Block","src":"31602:82:0","statements":[{"expression":{"id":1435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1429,"name":"accruedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"31612:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1431,"name":"stakedByUser","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1391,"src":"31641:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1432,"name":"newIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1416,"src":"31655:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1433,"name":"userIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"31665:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1430,"name":"_getRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"31629:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31629:46:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31612:63:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1436,"nodeType":"ExpressionStatement","src":"31612:63:0"}]}},{"expression":{"id":1445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":1439,"name":"assetData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"31692:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData storage pointer"}},"id":1442,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"users","nodeType":"MemberAccess","referencedDeclaration":1192,"src":"31692:15:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1443,"indexExpression":{"id":1441,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"31708:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"31692:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1444,"name":"newIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1416,"src":"31716:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31692:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1446,"nodeType":"ExpressionStatement","src":"31692:32:0"},{"eventCall":{"arguments":[{"id":1448,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"31754:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1449,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"31760:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1450,"name":"newIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1416,"src":"31767:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1447,"name":"UserIndexUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"31737:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31737:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1452,"nodeType":"EmitStatement","src":"31732:44:0"}]}},{"expression":{"id":1455,"name":"accruedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"31796:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1397,"id":1456,"nodeType":"Return","src":"31789:21:0"}]},"documentation":{"id":1385,"nodeType":"StructuredDocumentation","src":"30773:398:0","text":" @dev Updates the state of an user in a distribution\n @param user The user's address\n @param asset The address of the reference asset of the distribution\n @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\n @param totalStaked Total tokens staked in the distribution\n @return The accrued rewards for the user until the moment*"},"id":1458,"implemented":true,"kind":"function","modifiers":[],"name":"_updateUserAssetInternal","nodeType":"FunctionDefinition","parameters":{"id":1394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1387,"mutability":"mutable","name":"user","nodeType":"VariableDeclaration","scope":1458,"src":"31213:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1386,"name":"address","nodeType":"ElementaryTypeName","src":"31213:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1389,"mutability":"mutable","name":"asset","nodeType":"VariableDeclaration","scope":1458,"src":"31231:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1388,"name":"address","nodeType":"ElementaryTypeName","src":"31231:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1391,"mutability":"mutable","name":"stakedByUser","nodeType":"VariableDeclaration","scope":1458,"src":"31250:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1390,"name":"uint256","nodeType":"ElementaryTypeName","src":"31250:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1393,"mutability":"mutable","name":"totalStaked","nodeType":"VariableDeclaration","scope":1458,"src":"31276:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1392,"name":"uint256","nodeType":"ElementaryTypeName","src":"31276:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"31207:92:0"},"returnParameters":{"id":1397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1396,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1458,"src":"31318:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1395,"name":"uint256","nodeType":"ElementaryTypeName","src":"31318:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"31317:9:0"},"scope":1702,"src":"31174:641:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1509,"nodeType":"Block","src":"32243:337:0","statements":[{"assignments":[1470],"declarations":[{"constant":false,"id":1470,"mutability":"mutable","name":"accruedRewards","nodeType":"VariableDeclaration","scope":1509,"src":"32249:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1469,"name":"uint256","nodeType":"ElementaryTypeName","src":"32249:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1472,"initialValue":{"hexValue":"30","id":1471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32274:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"32249:26:0"},{"body":{"id":1505,"nodeType":"Block","src":"32326:222:0","statements":[{"expression":{"id":1503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1484,"name":"accruedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"32334:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":1488,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"32415:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":1489,"name":"stakes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"32431:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserStakeInput_$982_memory_ptr_$dyn_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput memory[] memory"}},"id":1491,"indexExpression":{"id":1490,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"32438:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"32431:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_UserStakeInput_$982_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput memory"}},"id":1492,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"underlyingAsset","nodeType":"MemberAccess","referencedDeclaration":977,"src":"32431:25:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":1493,"name":"stakes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"32468:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserStakeInput_$982_memory_ptr_$dyn_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput memory[] memory"}},"id":1495,"indexExpression":{"id":1494,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"32475:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"32468:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_UserStakeInput_$982_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput memory"}},"id":1496,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"stakedByUser","nodeType":"MemberAccess","referencedDeclaration":979,"src":"32468:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"baseExpression":{"id":1497,"name":"stakes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"32502:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserStakeInput_$982_memory_ptr_$dyn_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput memory[] memory"}},"id":1499,"indexExpression":{"id":1498,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"32509:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"32502:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_UserStakeInput_$982_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput memory"}},"id":1500,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"totalStaked","nodeType":"MemberAccess","referencedDeclaration":981,"src":"32502:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1487,"name":"_updateUserAssetInternal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"32379:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,uint256,uint256) returns (uint256)"}},"id":1501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32379:154:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1485,"name":"accruedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"32351:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":203,"src":"32351:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32351:190:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"32334:207:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1504,"nodeType":"ExpressionStatement","src":"32334:207:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1477,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"32302:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1478,"name":"stakes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"32306:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserStakeInput_$982_memory_ptr_$dyn_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput memory[] memory"}},"id":1479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"32306:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"32302:17:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1506,"initializationExpression":{"assignments":[1474],"declarations":[{"constant":false,"id":1474,"mutability":"mutable","name":"i","nodeType":"VariableDeclaration","scope":1506,"src":"32287:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1473,"name":"uint256","nodeType":"ElementaryTypeName","src":"32287:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1476,"initialValue":{"hexValue":"30","id":1475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32299:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"32287:13:0"},"loopExpression":{"expression":{"id":1482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"32321:3:0","subExpression":{"id":1481,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"32321:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1483,"nodeType":"ExpressionStatement","src":"32321:3:0"},"nodeType":"ForStatement","src":"32282:266:0"},{"expression":{"id":1507,"name":"accruedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"32561:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1468,"id":1508,"nodeType":"Return","src":"32554:21:0"}]},"documentation":{"id":1459,"nodeType":"StructuredDocumentation","src":"31819:297:0","text":" @dev Used by \"frontend\" stake contracts to update the data of an user when claiming rewards from there\n @param user The address of the user\n @param stakes List of structs of the user data related with his stake\n @return The accrued rewards for the user until the moment*"},"id":1510,"implemented":true,"kind":"function","modifiers":[],"name":"_claimRewards","nodeType":"FunctionDefinition","parameters":{"id":1465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1461,"mutability":"mutable","name":"user","nodeType":"VariableDeclaration","scope":1510,"src":"32142:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1460,"name":"address","nodeType":"ElementaryTypeName","src":"32142:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1464,"mutability":"mutable","name":"stakes","nodeType":"VariableDeclaration","scope":1510,"src":"32156:48:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserStakeInput_$982_memory_ptr_$dyn_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput[]"},"typeName":{"baseType":{"id":1462,"name":"DistributionTypes.UserStakeInput","nodeType":"UserDefinedTypeName","referencedDeclaration":982,"src":"32156:32:0","typeDescriptions":{"typeIdentifier":"t_struct$_UserStakeInput_$982_storage_ptr","typeString":"struct DistributionTypes.UserStakeInput"}},"id":1463,"nodeType":"ArrayTypeName","src":"32156:34:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserStakeInput_$982_storage_$dyn_storage_ptr","typeString":"struct DistributionTypes.UserStakeInput[]"}},"visibility":"internal"}],"src":"32141:64:0"},"returnParameters":{"id":1468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1467,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1510,"src":"32232:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1466,"name":"uint256","nodeType":"ElementaryTypeName","src":"32232:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"32231:9:0"},"scope":1702,"src":"32119:461:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1581,"nodeType":"Block","src":"32993:535:0","statements":[{"assignments":[1522],"declarations":[{"constant":false,"id":1522,"mutability":"mutable","name":"accruedRewards","nodeType":"VariableDeclaration","scope":1581,"src":"32999:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1521,"name":"uint256","nodeType":"ElementaryTypeName","src":"32999:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1524,"initialValue":{"hexValue":"30","id":1523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33024:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"32999:26:0"},{"body":{"id":1577,"nodeType":"Block","src":"33076:421:0","statements":[{"assignments":[1537],"declarations":[{"constant":false,"id":1537,"mutability":"mutable","name":"assetConfig","nodeType":"VariableDeclaration","scope":1577,"src":"33084:29:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData"},"typeName":{"id":1536,"name":"AssetData","nodeType":"UserDefinedTypeName","referencedDeclaration":1193,"src":"33084:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData"}},"visibility":"internal"}],"id":1544,"initialValue":{"baseExpression":{"id":1538,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"33116:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_AssetData_$1193_storage_$","typeString":"mapping(address => struct AaveDistributionManager.AssetData storage ref)"}},"id":1543,"indexExpression":{"expression":{"baseExpression":{"id":1539,"name":"stakes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1516,"src":"33123:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserStakeInput_$982_memory_ptr_$dyn_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput memory[] memory"}},"id":1541,"indexExpression":{"id":1540,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"33130:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"33123:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_UserStakeInput_$982_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput memory"}},"id":1542,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"underlyingAsset","nodeType":"MemberAccess","referencedDeclaration":977,"src":"33123:25:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"33116:33:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage","typeString":"struct AaveDistributionManager.AssetData storage ref"}},"nodeType":"VariableDeclarationStatement","src":"33084:65:0"},{"assignments":[1546],"declarations":[{"constant":false,"id":1546,"mutability":"mutable","name":"assetIndex","nodeType":"VariableDeclaration","scope":1577,"src":"33157:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1545,"name":"uint256","nodeType":"ElementaryTypeName","src":"33157:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1559,"initialValue":{"arguments":[{"expression":{"id":1548,"name":"assetConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"33212:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData storage pointer"}},"id":1549,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"index","nodeType":"MemberAccess","referencedDeclaration":1188,"src":"33212:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1550,"name":"assetConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"33241:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData storage pointer"}},"id":1551,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"emissionPerSecond","nodeType":"MemberAccess","referencedDeclaration":1184,"src":"33241:29:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"expression":{"id":1552,"name":"assetConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"33282:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData storage pointer"}},"id":1553,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"lastUpdateTimestamp","nodeType":"MemberAccess","referencedDeclaration":1186,"src":"33282:31:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"expression":{"baseExpression":{"id":1554,"name":"stakes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1516,"src":"33325:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserStakeInput_$982_memory_ptr_$dyn_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput memory[] memory"}},"id":1556,"indexExpression":{"id":1555,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"33332:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"33325:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_UserStakeInput_$982_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput memory"}},"id":1557,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"totalStaked","nodeType":"MemberAccess","referencedDeclaration":981,"src":"33325:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1547,"name":"_getAssetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1683,"src":"33186:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint128_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint128,uint256) view returns (uint256)"}},"id":1558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33186:170:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"33157:199:0"},{"expression":{"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1560,"name":"accruedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1522,"src":"33365:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"expression":{"baseExpression":{"id":1564,"name":"stakes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1516,"src":"33422:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserStakeInput_$982_memory_ptr_$dyn_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput memory[] memory"}},"id":1566,"indexExpression":{"id":1565,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"33429:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"33422:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_UserStakeInput_$982_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput memory"}},"id":1567,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"stakedByUser","nodeType":"MemberAccess","referencedDeclaration":979,"src":"33422:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1568,"name":"assetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"33446:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"expression":{"id":1569,"name":"assetConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"33458:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData storage pointer"}},"id":1570,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"users","nodeType":"MemberAccess","referencedDeclaration":1192,"src":"33458:17:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1572,"indexExpression":{"id":1571,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"33476:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"33458:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1563,"name":"_getRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"33410:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33410:72:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1561,"name":"accruedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1522,"src":"33382:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":203,"src":"33382:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33382:108:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"33365:125:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1576,"nodeType":"ExpressionStatement","src":"33365:125:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1529,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"33052:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1530,"name":"stakes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1516,"src":"33056:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserStakeInput_$982_memory_ptr_$dyn_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput memory[] memory"}},"id":1531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"33056:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"33052:17:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1578,"initializationExpression":{"assignments":[1526],"declarations":[{"constant":false,"id":1526,"mutability":"mutable","name":"i","nodeType":"VariableDeclaration","scope":1578,"src":"33037:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1525,"name":"uint256","nodeType":"ElementaryTypeName","src":"33037:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1528,"initialValue":{"hexValue":"30","id":1527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33049:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"33037:13:0"},"loopExpression":{"expression":{"id":1534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"33071:3:0","subExpression":{"id":1533,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"33071:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1535,"nodeType":"ExpressionStatement","src":"33071:3:0"},"nodeType":"ForStatement","src":"33032:465:0"},{"expression":{"id":1579,"name":"accruedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1522,"src":"33509:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1520,"id":1580,"nodeType":"Return","src":"33502:21:0"}]},"documentation":{"id":1511,"nodeType":"StructuredDocumentation","src":"32584:266:0","text":" @dev Return the accrued rewards for an user over a list of distribution\n @param user The address of the user\n @param stakes List of structs of the user data related with his stake\n @return The accrued rewards for the user until the moment*"},"id":1582,"implemented":true,"kind":"function","modifiers":[],"name":"_getUnclaimedRewards","nodeType":"FunctionDefinition","parameters":{"id":1517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1513,"mutability":"mutable","name":"user","nodeType":"VariableDeclaration","scope":1582,"src":"32883:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1512,"name":"address","nodeType":"ElementaryTypeName","src":"32883:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1516,"mutability":"mutable","name":"stakes","nodeType":"VariableDeclaration","scope":1582,"src":"32897:48:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserStakeInput_$982_memory_ptr_$dyn_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput[]"},"typeName":{"baseType":{"id":1514,"name":"DistributionTypes.UserStakeInput","nodeType":"UserDefinedTypeName","referencedDeclaration":982,"src":"32897:32:0","typeDescriptions":{"typeIdentifier":"t_struct$_UserStakeInput_$982_storage_ptr","typeString":"struct DistributionTypes.UserStakeInput"}},"id":1515,"nodeType":"ArrayTypeName","src":"32897:34:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserStakeInput_$982_storage_$dyn_storage_ptr","typeString":"struct DistributionTypes.UserStakeInput[]"}},"visibility":"internal"}],"src":"32882:64:0"},"returnParameters":{"id":1520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1519,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1582,"src":"32982:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1518,"name":"uint256","nodeType":"ElementaryTypeName","src":"32982:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"32981:9:0"},"scope":1702,"src":"32853:675:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1610,"nodeType":"Block","src":"34013:99:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1607,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"34084:2:0","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"arguments":[{"id":1605,"name":"PRECISION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"34096:9:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1604,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34088:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1603,"name":"uint256","nodeType":"ElementaryTypeName","src":"34088:7:0","typeDescriptions":{}}},"id":1606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34088:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"34084:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[{"id":1598,"name":"userIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"34068:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1596,"name":"reserveIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"34051:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":220,"src":"34051:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34051:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1594,"name":"principalUserBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1585,"src":"34026:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":283,"src":"34026:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34026:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":300,"src":"34026:57:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34026:81:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1593,"id":1609,"nodeType":"Return","src":"34019:88:0"}]},"documentation":{"id":1583,"nodeType":"StructuredDocumentation","src":"33532:338:0","text":" @dev Internal function for the calculation of user's rewards on a distribution\n @param principalUserBalance Amount staked by the user on a distribution\n @param reserveIndex Current index of the distribution\n @param userIndex Index stored for the user, representation his staking moment\n @return The rewards*"},"id":1611,"implemented":true,"kind":"function","modifiers":[],"name":"_getRewards","nodeType":"FunctionDefinition","parameters":{"id":1590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1585,"mutability":"mutable","name":"principalUserBalance","nodeType":"VariableDeclaration","scope":1611,"src":"33899:28:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1584,"name":"uint256","nodeType":"ElementaryTypeName","src":"33899:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1587,"mutability":"mutable","name":"reserveIndex","nodeType":"VariableDeclaration","scope":1611,"src":"33933:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1586,"name":"uint256","nodeType":"ElementaryTypeName","src":"33933:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1589,"mutability":"mutable","name":"userIndex","nodeType":"VariableDeclaration","scope":1611,"src":"33959:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1588,"name":"uint256","nodeType":"ElementaryTypeName","src":"33959:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"33893:87:0"},"returnParameters":{"id":1593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1592,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1611,"src":"34004:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1591,"name":"uint256","nodeType":"ElementaryTypeName","src":"34004:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34003:9:0"},"scope":1702,"src":"33873:239:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1682,"nodeType":"Block","src":"34741:517:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1625,"name":"emissionPerSecond","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"34758:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"34779:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"34758:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1628,"name":"totalBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"34790:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"34806:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"34790:17:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"34758:49:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1632,"name":"lastUpdateTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"34817:19:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1633,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"34840:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"34840:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"34817:38:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"34758:97:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1637,"name":"lastUpdateTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"34865:19:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1638,"name":"DISTRIBUTION_END","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"34888:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"34865:39:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"34758:146:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1644,"nodeType":"IfStatement","src":"34747:198:0","trueBody":{"id":1643,"nodeType":"Block","src":"34911:34:0","statements":[{"expression":{"id":1641,"name":"currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"34926:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1624,"id":1642,"nodeType":"Return","src":"34919:19:0"}]}},{"assignments":[1646],"declarations":[{"constant":false,"id":1646,"mutability":"mutable","name":"currentTimestamp","nodeType":"VariableDeclaration","scope":1682,"src":"34951:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1645,"name":"uint256","nodeType":"ElementaryTypeName","src":"34951:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1655,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1647,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"34984:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"34984:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1649,"name":"DISTRIBUTION_END","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"35002:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"34984:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"id":1652,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"35040:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"35040:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"34984:71:0","trueExpression":{"id":1651,"name":"DISTRIBUTION_END","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"35021:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"34951:104:0"},{"assignments":[1657],"declarations":[{"constant":false,"id":1657,"mutability":"mutable","name":"timeDelta","nodeType":"VariableDeclaration","scope":1682,"src":"35061:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1656,"name":"uint256","nodeType":"ElementaryTypeName","src":"35061:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1662,"initialValue":{"arguments":[{"id":1660,"name":"lastUpdateTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"35102:19:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":1658,"name":"currentTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"35081:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":220,"src":"35081:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35081:41:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"35061:61:0"},{"expression":{"arguments":[{"id":1679,"name":"currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"35233:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":1676,"name":"totalBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"35206:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1673,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35178:2:0","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"arguments":[{"id":1671,"name":"PRECISION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"35190:9:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"35182:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1669,"name":"uint256","nodeType":"ElementaryTypeName","src":"35182:7:0","typeDescriptions":{}}},"id":1672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35182:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"35178:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":1665,"name":"timeDelta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"35163:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1663,"name":"emissionPerSecond","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"35141:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":283,"src":"35141:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35141:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":283,"src":"35141:36:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35141:60:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":300,"src":"35141:64:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35141:78:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":203,"src":"35141:82:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35141:112:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1624,"id":1681,"nodeType":"Return","src":"35128:125:0"}]},"documentation":{"id":1612,"nodeType":"StructuredDocumentation","src":"34116:446:0","text":" @dev Calculates the next value of an specific distribution index, with validations\n @param currentIndex Current index of the distribution\n @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\n @param lastUpdateTimestamp Last moment this distribution was updated\n @param totalBalance of tokens considered for the distribution\n @return The new index.*"},"id":1683,"implemented":true,"kind":"function","modifiers":[],"name":"_getAssetIndex","nodeType":"FunctionDefinition","parameters":{"id":1621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1614,"mutability":"mutable","name":"currentIndex","nodeType":"VariableDeclaration","scope":1683,"src":"34594:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1613,"name":"uint256","nodeType":"ElementaryTypeName","src":"34594:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1616,"mutability":"mutable","name":"emissionPerSecond","nodeType":"VariableDeclaration","scope":1683,"src":"34620:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1615,"name":"uint256","nodeType":"ElementaryTypeName","src":"34620:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1618,"mutability":"mutable","name":"lastUpdateTimestamp","nodeType":"VariableDeclaration","scope":1683,"src":"34651:27:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1617,"name":"uint128","nodeType":"ElementaryTypeName","src":"34651:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1620,"mutability":"mutable","name":"totalBalance","nodeType":"VariableDeclaration","scope":1683,"src":"34684:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1619,"name":"uint256","nodeType":"ElementaryTypeName","src":"34684:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34588:120:0"},"returnParameters":{"id":1624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1623,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1683,"src":"34732:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1622,"name":"uint256","nodeType":"ElementaryTypeName","src":"34732:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34731:9:0"},"scope":1702,"src":"34565:693:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1700,"nodeType":"Block","src":"35553:43:0","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":1693,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"35566:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_AssetData_$1193_storage_$","typeString":"mapping(address => struct AaveDistributionManager.AssetData storage ref)"}},"id":1695,"indexExpression":{"id":1694,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"35573:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"35566:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage","typeString":"struct AaveDistributionManager.AssetData storage ref"}},"id":1696,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"users","nodeType":"MemberAccess","referencedDeclaration":1192,"src":"35566:19:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1698,"indexExpression":{"id":1697,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"35586:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"35566:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1692,"id":1699,"nodeType":"Return","src":"35559:32:0"}]},"documentation":{"id":1684,"nodeType":"StructuredDocumentation","src":"35262:203:0","text":" @dev Returns the data of an user on a distribution\n @param user Address of the user\n @param asset The address of the reference asset of the distribution\n @return The new index*"},"functionSelector":"3373ee4c","id":1701,"implemented":true,"kind":"function","modifiers":[],"name":"getUserAssetData","nodeType":"FunctionDefinition","parameters":{"id":1689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1686,"mutability":"mutable","name":"user","nodeType":"VariableDeclaration","scope":1701,"src":"35494:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1685,"name":"address","nodeType":"ElementaryTypeName","src":"35494:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1688,"mutability":"mutable","name":"asset","nodeType":"VariableDeclaration","scope":1701,"src":"35508:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1687,"name":"address","nodeType":"ElementaryTypeName","src":"35508:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"35493:29:0"},"returnParameters":{"id":1692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1691,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1701,"src":"35544:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1690,"name":"uint256","nodeType":"ElementaryTypeName","src":"35544:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"35543:9:0"},"scope":1702,"src":"35468:128:0","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":3651,"src":"27976:7622:0"},{"abstract":true,"baseContracts":[{"baseName":{"id":1704,"name":"ERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":933,"src":"35729:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_ERC20_$933","typeString":"contract ERC20"}},"id":1705,"nodeType":"InheritanceSpecifier","src":"35729:5:0"},{"baseName":{"id":1706,"name":"IGovernancePowerDelegationToken","nodeType":"UserDefinedTypeName","referencedDeclaration":78,"src":"35736:31:0","typeDescriptions":{"typeIdentifier":"t_contract$_IGovernancePowerDelegationToken_$78","typeString":"contract IGovernancePowerDelegationToken"}},"id":1707,"nodeType":"InheritanceSpecifier","src":"35736:31:0"}],"contractDependencies":[78,100,176,933],"contractKind":"contract","documentation":{"id":1703,"nodeType":"StructuredDocumentation","src":"35600:76:0","text":" @notice implementation of the AAVE token contract\n @author Aave"},"fullyImplemented":false,"id":2383,"linearizedBaseContracts":[2383,78,933,176,100],"name":"GovernancePowerDelegationERC20","nodeType":"ContractDefinition","nodes":[{"id":1710,"libraryName":{"id":1708,"name":"SafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":370,"src":"35778:8:0","typeDescriptions":{"typeIdentifier":"t_contract$_SafeMath_$370","typeString":"library SafeMath"}},"nodeType":"UsingForDirective","src":"35772:27:0","typeName":{"id":1709,"name":"uint256","nodeType":"ElementaryTypeName","src":"35791:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":true,"documentation":{"id":1711,"nodeType":"StructuredDocumentation","src":"35802:79:0","text":"@notice The EIP-712 typehash for the delegation struct used by the contract"},"functionSelector":"aa9fbe02","id":1716,"mutability":"constant","name":"DELEGATE_BY_TYPE_TYPEHASH","nodeType":"VariableDeclaration","scope":2383,"src":"35884:144:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1712,"name":"bytes32","nodeType":"ElementaryTypeName","src":"35884:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"44656c656761746542795479706528616464726573732064656c6567617465652c75696e7432353620747970652c75696e74323536206e6f6e63652c75696e743235362065787069727929","id":1714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"35950:77:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_10d8d059343739efce7dad10d09f0806da52b252b3e6a7951920d2d6ec4102e5","typeString":"literal_string \"DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)\""},"value":"DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_10d8d059343739efce7dad10d09f0806da52b252b3e6a7951920d2d6ec4102e5","typeString":"literal_string \"DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)\""}],"id":1713,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"35940:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35940:88:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"41cbf54a","id":1721,"mutability":"constant","name":"DELEGATE_TYPEHASH","nodeType":"VariableDeclaration","scope":2383,"src":"36033:117:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1717,"name":"bytes32","nodeType":"ElementaryTypeName","src":"36033:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"44656c656761746528616464726573732064656c6567617465652c75696e74323536206e6f6e63652c75696e743235362065787069727929","id":1719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"36091:58:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9a9a49b990ba9bb39f8048c490a40ab25c18f55d208d5fbcf958261a9b48716d","typeString":"literal_string \"Delegate(address delegatee,uint256 nonce,uint256 expiry)\""},"value":"Delegate(address delegatee,uint256 nonce,uint256 expiry)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9a9a49b990ba9bb39f8048c490a40ab25c18f55d208d5fbcf958261a9b48716d","typeString":"literal_string \"Delegate(address delegatee,uint256 nonce,uint256 expiry)\""}],"id":1718,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"36081:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36081:69:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"canonicalName":"GovernancePowerDelegationERC20.Snapshot","id":1726,"members":[{"constant":false,"id":1723,"mutability":"mutable","name":"blockNumber","nodeType":"VariableDeclaration","scope":1726,"src":"36244:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1722,"name":"uint128","nodeType":"ElementaryTypeName","src":"36244:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1725,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":1726,"src":"36269:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1724,"name":"uint128","nodeType":"ElementaryTypeName","src":"36269:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"name":"Snapshot","nodeType":"StructDefinition","scope":2383,"src":"36222:65:0","visibility":"public"},{"baseFunctions":[31],"body":{"id":1742,"nodeType":"Block","src":"36599:65:0","statements":[{"expression":{"arguments":[{"expression":{"id":1736,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"36621:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"36621:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":1738,"name":"delegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"36633:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1739,"name":"delegationType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"36644:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}],"id":1735,"name":"_delegateByType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"36605:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_enum$_DelegationType_$5_$returns$__$","typeString":"function (address,address,enum IGovernancePowerDelegationToken.DelegationType)"}},"id":1740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36605:54:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1741,"nodeType":"ExpressionStatement","src":"36605:54:0"}]},"documentation":{"id":1727,"nodeType":"StructuredDocumentation","src":"36291:213:0","text":" @dev delegates one specific power to a delegatee\n @param delegatee the user which delegated power has changed\n @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)*"},"functionSelector":"dc937e1c","id":1743,"implemented":true,"kind":"function","modifiers":[],"name":"delegateByType","nodeType":"FunctionDefinition","overrides":{"id":1733,"nodeType":"OverrideSpecifier","overrides":[],"src":"36590:8:0"},"parameters":{"id":1732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1729,"mutability":"mutable","name":"delegatee","nodeType":"VariableDeclaration","scope":1743,"src":"36531:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1728,"name":"address","nodeType":"ElementaryTypeName","src":"36531:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1731,"mutability":"mutable","name":"delegationType","nodeType":"VariableDeclaration","scope":1743,"src":"36550:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"},"typeName":{"id":1730,"name":"DelegationType","nodeType":"UserDefinedTypeName","referencedDeclaration":5,"src":"36550:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}},"visibility":"internal"}],"src":"36530:50:0"},"returnParameters":{"id":1734,"nodeType":"ParameterList","parameters":[],"src":"36599:0:0"},"scope":2383,"src":"36507:157:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[37],"body":{"id":1766,"nodeType":"Block","src":"36858:156:0","statements":[{"expression":{"arguments":[{"expression":{"id":1751,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"36880:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"36880:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":1753,"name":"delegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"36892:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1754,"name":"DelegationType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"36903:14:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_DelegationType_$5_$","typeString":"type(enum IGovernancePowerDelegationToken.DelegationType)"}},"id":1755,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"VOTING_POWER","nodeType":"MemberAccess","src":"36903:27:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}],"id":1750,"name":"_delegateByType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"36864:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_enum$_DelegationType_$5_$returns$__$","typeString":"function (address,address,enum IGovernancePowerDelegationToken.DelegationType)"}},"id":1756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36864:67:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1757,"nodeType":"ExpressionStatement","src":"36864:67:0"},{"expression":{"arguments":[{"expression":{"id":1759,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"36953:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"36953:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":1761,"name":"delegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"36965:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1762,"name":"DelegationType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"36976:14:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_DelegationType_$5_$","typeString":"type(enum IGovernancePowerDelegationToken.DelegationType)"}},"id":1763,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"PROPOSITION_POWER","nodeType":"MemberAccess","src":"36976:32:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}],"id":1758,"name":"_delegateByType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"36937:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_enum$_DelegationType_$5_$returns$__$","typeString":"function (address,address,enum IGovernancePowerDelegationToken.DelegationType)"}},"id":1764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36937:72:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1765,"nodeType":"ExpressionStatement","src":"36937:72:0"}]},"documentation":{"id":1744,"nodeType":"StructuredDocumentation","src":"36668:132:0","text":" @dev delegates all the powers to a specific user\n @param delegatee the user to which the power will be delegated*"},"functionSelector":"5c19a95c","id":1767,"implemented":true,"kind":"function","modifiers":[],"name":"delegate","nodeType":"FunctionDefinition","overrides":{"id":1748,"nodeType":"OverrideSpecifier","overrides":[],"src":"36849:8:0"},"parameters":{"id":1747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1746,"mutability":"mutable","name":"delegatee","nodeType":"VariableDeclaration","scope":1767,"src":"36821:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1745,"name":"address","nodeType":"ElementaryTypeName","src":"36821:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"36820:19:0"},"returnParameters":{"id":1749,"nodeType":"ParameterList","parameters":[],"src":"36858:0:0"},"scope":2383,"src":"36803:211:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[47],"body":{"id":1791,"nodeType":"Block","src":"37262:154:0","statements":[{"assignments":[null,null,1781],"declarations":[null,null,{"constant":false,"id":1781,"mutability":"mutable","name":"delegates","nodeType":"VariableDeclaration","scope":1791,"src":"37273:45:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"typeName":{"id":1780,"keyType":{"id":1778,"name":"address","nodeType":"ElementaryTypeName","src":"37281:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"37273:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"valueType":{"id":1779,"name":"address","nodeType":"ElementaryTypeName","src":"37292:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"}],"id":1785,"initialValue":{"arguments":[{"id":1783,"name":"delegationType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1772,"src":"37347:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}],"id":1782,"name":"_getDelegationDataByType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"37322:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_DelegationType_$5_$returns$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$_$_t_mapping$_t_address_$_t_uint256_$_$_t_mapping$_t_address_$_t_address_$_$","typeString":"function (enum IGovernancePowerDelegationToken.DelegationType) view returns (mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)),mapping(address => uint256),mapping(address => address))"}},"id":1784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"37322:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$_$_t_mapping$_t_address_$_t_uint256_$_$_t_mapping$_t_address_$_t_address_$_$","typeString":"tuple(mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)),mapping(address => uint256),mapping(address => address))"}},"nodeType":"VariableDeclarationStatement","src":"37268:94:0"},{"expression":{"arguments":[{"id":1787,"name":"delegator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1770,"src":"37390:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1788,"name":"delegates","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1781,"src":"37401:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}],"id":1786,"name":"_getDelegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2382,"src":"37376:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_mapping$_t_address_$_t_address_$_$returns$_t_address_$","typeString":"function (address,mapping(address => address)) view returns (address)"}},"id":1789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"37376:35:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1777,"id":1790,"nodeType":"Return","src":"37369:42:0"}]},"documentation":{"id":1768,"nodeType":"StructuredDocumentation","src":"37018:104:0","text":" @dev returns the delegatee of an user\n @param delegator the address of the delegator*"},"functionSelector":"6f50458d","id":1792,"implemented":true,"kind":"function","modifiers":[],"name":"getDelegateeByType","nodeType":"FunctionDefinition","overrides":{"id":1774,"nodeType":"OverrideSpecifier","overrides":[],"src":"37229:8:0"},"parameters":{"id":1773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1770,"mutability":"mutable","name":"delegator","nodeType":"VariableDeclaration","scope":1792,"src":"37153:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1769,"name":"address","nodeType":"ElementaryTypeName","src":"37153:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1772,"mutability":"mutable","name":"delegationType","nodeType":"VariableDeclaration","scope":1792,"src":"37172:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"},"typeName":{"id":1771,"name":"DelegationType","nodeType":"UserDefinedTypeName","referencedDeclaration":5,"src":"37172:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}},"visibility":"internal"}],"src":"37152:50:0"},"returnParameters":{"id":1777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1776,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1792,"src":"37251:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1775,"name":"address","nodeType":"ElementaryTypeName","src":"37251:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"37250:9:0"},"scope":2383,"src":"37125:291:0","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[57],"body":{"id":1825,"nodeType":"Block","src":"37724:277:0","statements":[{"assignments":[1808,1812,null],"declarations":[{"constant":false,"id":1808,"mutability":"mutable","name":"snapshots","nodeType":"VariableDeclaration","scope":1825,"src":"37738:66:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot))"},"typeName":{"id":1807,"keyType":{"id":1803,"name":"address","nodeType":"ElementaryTypeName","src":"37746:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"37738:48:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot))"},"valueType":{"id":1806,"keyType":{"id":1804,"name":"uint256","nodeType":"ElementaryTypeName","src":"37765:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"37757:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$","typeString":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot)"},"valueType":{"id":1805,"name":"Snapshot","nodeType":"UserDefinedTypeName","referencedDeclaration":1726,"src":"37776:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_storage_ptr","typeString":"struct GovernancePowerDelegationERC20.Snapshot"}}}},"visibility":"internal"},{"constant":false,"id":1812,"mutability":"mutable","name":"snapshotsCounts","nodeType":"VariableDeclaration","scope":1825,"src":"37812:51:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1811,"keyType":{"id":1809,"name":"address","nodeType":"ElementaryTypeName","src":"37820:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"37812:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":1810,"name":"uint256","nodeType":"ElementaryTypeName","src":"37831:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},null],"id":1816,"initialValue":{"arguments":[{"id":1814,"name":"delegationType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1797,"src":"37899:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}],"id":1813,"name":"_getDelegationDataByType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"37874:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_DelegationType_$5_$returns$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$_$_t_mapping$_t_address_$_t_uint256_$_$_t_mapping$_t_address_$_t_address_$_$","typeString":"function (enum IGovernancePowerDelegationToken.DelegationType) view returns (mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)),mapping(address => uint256),mapping(address => address))"}},"id":1815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"37874:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$_$_t_mapping$_t_address_$_t_uint256_$_$_t_mapping$_t_address_$_t_address_$_$","typeString":"tuple(mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)),mapping(address => uint256),mapping(address => address))"}},"nodeType":"VariableDeclarationStatement","src":"37730:184:0"},{"expression":{"arguments":[{"id":1818,"name":"snapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1808,"src":"37949:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref))"}},{"id":1819,"name":"snapshotsCounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"37960:15:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},{"id":1820,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1795,"src":"37977:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1821,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"37983:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"number","nodeType":"MemberAccess","src":"37983:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref))"},{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1817,"name":"_searchByBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"37928:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$_$_t_mapping$_t_address_$_t_uint256_$_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)),mapping(address => uint256),address,uint256) view returns (uint256)"}},"id":1823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"37928:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1802,"id":1824,"nodeType":"Return","src":"37921:75:0"}]},"documentation":{"id":1793,"nodeType":"StructuredDocumentation","src":"37420:172:0","text":" @dev returns the current delegated power of a user. The current power is the\n power delegated at the time of the last snapshot\n @param user the user*"},"functionSelector":"b2f4201d","id":1826,"implemented":true,"kind":"function","modifiers":[],"name":"getPowerCurrent","nodeType":"FunctionDefinition","overrides":{"id":1799,"nodeType":"OverrideSpecifier","overrides":[],"src":"37691:8:0"},"parameters":{"id":1798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1795,"mutability":"mutable","name":"user","nodeType":"VariableDeclaration","scope":1826,"src":"37620:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1794,"name":"address","nodeType":"ElementaryTypeName","src":"37620:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1797,"mutability":"mutable","name":"delegationType","nodeType":"VariableDeclaration","scope":1826,"src":"37634:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"},"typeName":{"id":1796,"name":"DelegationType","nodeType":"UserDefinedTypeName","referencedDeclaration":5,"src":"37634:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}},"visibility":"internal"}],"src":"37619:45:0"},"returnParameters":{"id":1802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1801,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1826,"src":"37713:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1800,"name":"uint256","nodeType":"ElementaryTypeName","src":"37713:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"37712:9:0"},"scope":2383,"src":"37595:406:0","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[69],"body":{"id":1860,"nodeType":"Block","src":"38259:276:0","statements":[{"assignments":[1844,1848,null],"declarations":[{"constant":false,"id":1844,"mutability":"mutable","name":"snapshots","nodeType":"VariableDeclaration","scope":1860,"src":"38273:66:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot))"},"typeName":{"id":1843,"keyType":{"id":1839,"name":"address","nodeType":"ElementaryTypeName","src":"38281:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"38273:48:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot))"},"valueType":{"id":1842,"keyType":{"id":1840,"name":"uint256","nodeType":"ElementaryTypeName","src":"38300:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"38292:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$","typeString":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot)"},"valueType":{"id":1841,"name":"Snapshot","nodeType":"UserDefinedTypeName","referencedDeclaration":1726,"src":"38311:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_storage_ptr","typeString":"struct GovernancePowerDelegationERC20.Snapshot"}}}},"visibility":"internal"},{"constant":false,"id":1848,"mutability":"mutable","name":"snapshotsCounts","nodeType":"VariableDeclaration","scope":1860,"src":"38347:51:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1847,"keyType":{"id":1845,"name":"address","nodeType":"ElementaryTypeName","src":"38355:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"38347:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":1846,"name":"uint256","nodeType":"ElementaryTypeName","src":"38366:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},null],"id":1852,"initialValue":{"arguments":[{"id":1850,"name":"delegationType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1833,"src":"38434:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}],"id":1849,"name":"_getDelegationDataByType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"38409:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_DelegationType_$5_$returns$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$_$_t_mapping$_t_address_$_t_uint256_$_$_t_mapping$_t_address_$_t_address_$_$","typeString":"function (enum IGovernancePowerDelegationToken.DelegationType) view returns (mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)),mapping(address => uint256),mapping(address => address))"}},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38409:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$_$_t_mapping$_t_address_$_t_uint256_$_$_t_mapping$_t_address_$_t_address_$_$","typeString":"tuple(mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)),mapping(address => uint256),mapping(address => address))"}},"nodeType":"VariableDeclarationStatement","src":"38265:184:0"},{"expression":{"arguments":[{"id":1854,"name":"snapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1844,"src":"38484:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref))"}},{"id":1855,"name":"snapshotsCounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"38495:15:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},{"id":1856,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"38512:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1857,"name":"blockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"38518:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref))"},{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1853,"name":"_searchByBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"38463:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$_$_t_mapping$_t_address_$_t_uint256_$_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)),mapping(address => uint256),address,uint256) view returns (uint256)"}},"id":1858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38463:67:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1838,"id":1859,"nodeType":"Return","src":"38456:74:0"}]},"documentation":{"id":1827,"nodeType":"StructuredDocumentation","src":"38005:103:0","text":" @dev returns the delegated power of a user at a certain block\n @param user the user*"},"functionSelector":"c2ffbb91","id":1861,"implemented":true,"kind":"function","modifiers":[],"name":"getPowerAtBlock","nodeType":"FunctionDefinition","overrides":{"id":1835,"nodeType":"OverrideSpecifier","overrides":[],"src":"38232:8:0"},"parameters":{"id":1834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1829,"mutability":"mutable","name":"user","nodeType":"VariableDeclaration","scope":1861,"src":"38141:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1828,"name":"address","nodeType":"ElementaryTypeName","src":"38141:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1831,"mutability":"mutable","name":"blockNumber","nodeType":"VariableDeclaration","scope":1861,"src":"38159:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1830,"name":"uint256","nodeType":"ElementaryTypeName","src":"38159:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1833,"mutability":"mutable","name":"delegationType","nodeType":"VariableDeclaration","scope":1861,"src":"38184:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"},"typeName":{"id":1832,"name":"DelegationType","nodeType":"UserDefinedTypeName","referencedDeclaration":5,"src":"38184:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}},"visibility":"internal"}],"src":"38135:82:0"},"returnParameters":{"id":1838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1837,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1861,"src":"38250:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1836,"name":"uint256","nodeType":"ElementaryTypeName","src":"38250:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"38249:9:0"},"scope":2383,"src":"38111:424:0","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[77],"body":{"id":1874,"nodeType":"Block","src":"39002:37:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1870,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"39015:5:0","typeDescriptions":{"typeIdentifier":"t_super$_GovernancePowerDelegationERC20_$2383","typeString":"contract super GovernancePowerDelegationERC20"}},"id":1871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":519,"src":"39015:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39015:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1869,"id":1873,"nodeType":"Return","src":"39008:26:0"}]},"documentation":{"id":1862,"nodeType":"StructuredDocumentation","src":"38539:375:0","text":" @dev returns the total supply at a certain block number\n used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\n In this initial implementation with no AAVE minting, simply returns the current supply\n A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future*"},"functionSelector":"981b24d0","id":1875,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupplyAt","nodeType":"FunctionDefinition","overrides":{"id":1866,"nodeType":"OverrideSpecifier","overrides":[],"src":"38975:8:0"},"parameters":{"id":1865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1864,"mutability":"mutable","name":"blockNumber","nodeType":"VariableDeclaration","scope":1875,"src":"38940:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1863,"name":"uint256","nodeType":"ElementaryTypeName","src":"38940:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"38939:21:0"},"returnParameters":{"id":1869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1868,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1875,"src":"38993:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1867,"name":"uint256","nodeType":"ElementaryTypeName","src":"38993:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"38992:9:0"},"scope":2383,"src":"38917:122:0","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1935,"nodeType":"Block","src":"39378:483:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1886,"name":"delegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1880,"src":"39392:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"39413:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1888,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"39405:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1887,"name":"address","nodeType":"ElementaryTypeName","src":"39405:7:0","typeDescriptions":{}}},"id":1890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39405:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"39392:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f44454c454741544545","id":1892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"39417:19:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_f448a4555410856eaebeffbdb1aef2dfca19f9de0904eb1029e0bbcd0330450f","typeString":"literal_string \"INVALID_DELEGATEE\""},"value":"INVALID_DELEGATEE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f448a4555410856eaebeffbdb1aef2dfca19f9de0904eb1029e0bbcd0330450f","typeString":"literal_string \"INVALID_DELEGATEE\""}],"id":1885,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"39384:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39384:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1894,"nodeType":"ExpressionStatement","src":"39384:53:0"},{"assignments":[null,null,1898],"declarations":[null,null,{"constant":false,"id":1898,"mutability":"mutable","name":"delegates","nodeType":"VariableDeclaration","scope":1935,"src":"39449:45:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"typeName":{"id":1897,"keyType":{"id":1895,"name":"address","nodeType":"ElementaryTypeName","src":"39457:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"39449:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"valueType":{"id":1896,"name":"address","nodeType":"ElementaryTypeName","src":"39468:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"}],"id":1902,"initialValue":{"arguments":[{"id":1900,"name":"delegationType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1882,"src":"39523:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}],"id":1899,"name":"_getDelegationDataByType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"39498:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_DelegationType_$5_$returns$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$_$_t_mapping$_t_address_$_t_uint256_$_$_t_mapping$_t_address_$_t_address_$_$","typeString":"function (enum IGovernancePowerDelegationToken.DelegationType) view returns (mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)),mapping(address => uint256),mapping(address => address))"}},"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39498:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$_$_t_mapping$_t_address_$_t_uint256_$_$_t_mapping$_t_address_$_t_address_$_$","typeString":"tuple(mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)),mapping(address => uint256),mapping(address => address))"}},"nodeType":"VariableDeclarationStatement","src":"39444:94:0"},{"assignments":[1904],"declarations":[{"constant":false,"id":1904,"mutability":"mutable","name":"delegatorBalance","nodeType":"VariableDeclaration","scope":1935,"src":"39545:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1903,"name":"uint256","nodeType":"ElementaryTypeName","src":"39545:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1908,"initialValue":{"arguments":[{"id":1906,"name":"delegator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1878,"src":"39582:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1905,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"39572:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":1907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39572:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"39545:47:0"},{"assignments":[1910],"declarations":[{"constant":false,"id":1910,"mutability":"mutable","name":"previousDelegatee","nodeType":"VariableDeclaration","scope":1935,"src":"39599:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1909,"name":"address","nodeType":"ElementaryTypeName","src":"39599:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1915,"initialValue":{"arguments":[{"id":1912,"name":"delegator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1878,"src":"39641:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1913,"name":"delegates","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"39652:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}],"id":1911,"name":"_getDelegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2382,"src":"39627:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_mapping$_t_address_$_t_address_$_$returns$_t_address_$","typeString":"function (address,mapping(address => address)) view returns (address)"}},"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39627:35:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"39599:63:0"},{"expression":{"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1916,"name":"delegates","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"39669:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1918,"indexExpression":{"id":1917,"name":"delegator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1878,"src":"39679:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"39669:20:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1919,"name":"delegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1880,"src":"39692:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"39669:32:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1921,"nodeType":"ExpressionStatement","src":"39669:32:0"},{"expression":{"arguments":[{"id":1923,"name":"previousDelegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"39729:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1924,"name":"delegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1880,"src":"39748:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1925,"name":"delegatorBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1904,"src":"39759:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1926,"name":"delegationType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1882,"src":"39777:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}],"id":1922,"name":"_moveDelegatesByType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"39708:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_enum$_DelegationType_$5_$returns$__$","typeString":"function (address,address,uint256,enum IGovernancePowerDelegationToken.DelegationType)"}},"id":1927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39708:84:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1928,"nodeType":"ExpressionStatement","src":"39708:84:0"},{"eventCall":{"arguments":[{"id":1930,"name":"delegator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1878,"src":"39819:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1931,"name":"delegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1880,"src":"39830:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1932,"name":"delegationType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1882,"src":"39841:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}],"id":1929,"name":"DelegateChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"39803:15:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_enum$_DelegationType_$5_$returns$__$","typeString":"function (address,address,enum IGovernancePowerDelegationToken.DelegationType)"}},"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39803:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1934,"nodeType":"EmitStatement","src":"39798:58:0"}]},"documentation":{"id":1876,"nodeType":"StructuredDocumentation","src":"39043:213:0","text":" @dev delegates the specific power to a delegatee\n @param delegatee the user which delegated power has changed\n @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)*"},"id":1936,"implemented":true,"kind":"function","modifiers":[],"name":"_delegateByType","nodeType":"FunctionDefinition","parameters":{"id":1883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1878,"mutability":"mutable","name":"delegator","nodeType":"VariableDeclaration","scope":1936,"src":"39289:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1877,"name":"address","nodeType":"ElementaryTypeName","src":"39289:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1880,"mutability":"mutable","name":"delegatee","nodeType":"VariableDeclaration","scope":1936,"src":"39312:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1879,"name":"address","nodeType":"ElementaryTypeName","src":"39312:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1882,"mutability":"mutable","name":"delegationType","nodeType":"VariableDeclaration","scope":1936,"src":"39335:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"},"typeName":{"id":1881,"name":"DelegationType","nodeType":"UserDefinedTypeName","referencedDeclaration":5,"src":"39335:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}},"visibility":"internal"}],"src":"39283:85:0"},"returnParameters":{"id":1884,"nodeType":"ParameterList","parameters":[],"src":"39378:0:0"},"scope":2383,"src":"39259:602:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2102,"nodeType":"Block","src":"40336:1258:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1948,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"40346:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1949,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"40354:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"40346:10:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1953,"nodeType":"IfStatement","src":"40342:37:0","trueBody":{"id":1952,"nodeType":"Block","src":"40358:21:0","statements":[{"functionReturnParameters":1947,"id":1951,"nodeType":"Return","src":"40366:7:0"}]}},{"assignments":[1959,1963,null],"declarations":[{"constant":false,"id":1959,"mutability":"mutable","name":"snapshots","nodeType":"VariableDeclaration","scope":2102,"src":"40393:66:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot))"},"typeName":{"id":1958,"keyType":{"id":1954,"name":"address","nodeType":"ElementaryTypeName","src":"40401:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"40393:48:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot))"},"valueType":{"id":1957,"keyType":{"id":1955,"name":"uint256","nodeType":"ElementaryTypeName","src":"40420:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"40412:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$","typeString":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot)"},"valueType":{"id":1956,"name":"Snapshot","nodeType":"UserDefinedTypeName","referencedDeclaration":1726,"src":"40431:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_storage_ptr","typeString":"struct GovernancePowerDelegationERC20.Snapshot"}}}},"visibility":"internal"},{"constant":false,"id":1963,"mutability":"mutable","name":"snapshotsCounts","nodeType":"VariableDeclaration","scope":2102,"src":"40467:51:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1962,"keyType":{"id":1960,"name":"address","nodeType":"ElementaryTypeName","src":"40475:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"40467:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":1961,"name":"uint256","nodeType":"ElementaryTypeName","src":"40486:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},null],"id":1967,"initialValue":{"arguments":[{"id":1965,"name":"delegationType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"40554:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}],"id":1964,"name":"_getDelegationDataByType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"40529:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_DelegationType_$5_$returns$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$_$_t_mapping$_t_address_$_t_uint256_$_$_t_mapping$_t_address_$_t_address_$_$","typeString":"function (enum IGovernancePowerDelegationToken.DelegationType) view returns (mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)),mapping(address => uint256),mapping(address => address))"}},"id":1966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40529:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$_$_t_mapping$_t_address_$_t_uint256_$_$_t_mapping$_t_address_$_t_address_$_$","typeString":"tuple(mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)),mapping(address => uint256),mapping(address => address))"}},"nodeType":"VariableDeclarationStatement","src":"40385:184:0"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1968,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"40580:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"40596:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"40588:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1969,"name":"address","nodeType":"ElementaryTypeName","src":"40588:7:0","typeDescriptions":{}}},"id":1972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40588:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"40580:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2034,"nodeType":"IfStatement","src":"40576:514:0","trueBody":{"id":2033,"nodeType":"Block","src":"40600:490:0","statements":[{"assignments":[1975],"declarations":[{"constant":false,"id":1975,"mutability":"mutable","name":"previous","nodeType":"VariableDeclaration","scope":2033,"src":"40608:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1974,"name":"uint256","nodeType":"ElementaryTypeName","src":"40608:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1977,"initialValue":{"hexValue":"30","id":1976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"40627:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"40608:20:0"},{"assignments":[1979],"declarations":[{"constant":false,"id":1979,"mutability":"mutable","name":"fromSnapshotsCount","nodeType":"VariableDeclaration","scope":2033,"src":"40636:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1978,"name":"uint256","nodeType":"ElementaryTypeName","src":"40636:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1983,"initialValue":{"baseExpression":{"id":1980,"name":"snapshotsCounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"40665:15:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1982,"indexExpression":{"id":1981,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"40681:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"40665:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"40636:50:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1984,"name":"fromSnapshotsCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1979,"src":"40699:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"40721:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"40699:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2005,"nodeType":"Block","src":"40805:45:0","statements":[{"expression":{"id":2003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1999,"name":"previous","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1975,"src":"40815:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2001,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"40836:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2000,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"40826:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40826:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"40815:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2004,"nodeType":"ExpressionStatement","src":"40815:26:0"}]},"id":2006,"nodeType":"IfStatement","src":"40695:155:0","trueBody":{"id":1998,"nodeType":"Block","src":"40724:75:0","statements":[{"expression":{"id":1996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1987,"name":"previous","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1975,"src":"40734:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":1988,"name":"snapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"40745:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref))"}},"id":1990,"indexExpression":{"id":1989,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"40755:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"40745:15:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$","typeString":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)"}},"id":1994,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1991,"name":"fromSnapshotsCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1979,"src":"40761:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"40782:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"40761:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"40745:39:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_storage","typeString":"struct GovernancePowerDelegationERC20.Snapshot storage ref"}},"id":1995,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1725,"src":"40745:45:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"40734:56:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1997,"nodeType":"ExpressionStatement","src":"40734:56:0"}]}},{"expression":{"arguments":[{"id":2008,"name":"snapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"40882:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref))"}},{"id":2009,"name":"snapshotsCounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"40901:15:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},{"id":2010,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"40926:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2013,"name":"previous","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1975,"src":"40948:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2012,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"40940:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":2011,"name":"uint128","nodeType":"ElementaryTypeName","src":"40940:7:0","typeDescriptions":{}}},"id":2014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40940:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"arguments":[{"arguments":[{"id":2019,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"40988:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2017,"name":"previous","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1975,"src":"40975:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":220,"src":"40975:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40975:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2016,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"40967:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":2015,"name":"uint128","nodeType":"ElementaryTypeName","src":"40967:7:0","typeDescriptions":{}}},"id":2021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40967:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref))"},{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"id":2007,"name":"_writeSnapshot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2351,"src":"40858:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$_$_t_mapping$_t_address_$_t_uint256_$_$_t_address_$_t_uint128_$_t_uint128_$returns$__$","typeString":"function (mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)),mapping(address => uint256),address,uint128,uint128)"}},"id":2022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40858:146:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2023,"nodeType":"ExpressionStatement","src":"40858:146:0"},{"eventCall":{"arguments":[{"id":2025,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"41040:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2028,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"41059:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2026,"name":"previous","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1975,"src":"41046:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":220,"src":"41046:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41046:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2030,"name":"delegationType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"41068:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}],"id":2024,"name":"DelegatedPowerChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":23,"src":"41018:21:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_enum$_DelegationType_$5_$returns$__$","typeString":"function (address,uint256,enum IGovernancePowerDelegationToken.DelegationType)"}},"id":2031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41018:65:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2032,"nodeType":"EmitStatement","src":"41013:70:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2035,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"41099:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"41113:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2037,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"41105:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2036,"name":"address","nodeType":"ElementaryTypeName","src":"41105:7:0","typeDescriptions":{}}},"id":2039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41105:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"41099:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2101,"nodeType":"IfStatement","src":"41095:495:0","trueBody":{"id":2100,"nodeType":"Block","src":"41117:473:0","statements":[{"assignments":[2042],"declarations":[{"constant":false,"id":2042,"mutability":"mutable","name":"previous","nodeType":"VariableDeclaration","scope":2100,"src":"41125:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2041,"name":"uint256","nodeType":"ElementaryTypeName","src":"41125:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2044,"initialValue":{"hexValue":"30","id":2043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"41144:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"41125:20:0"},{"assignments":[2046],"declarations":[{"constant":false,"id":2046,"mutability":"mutable","name":"toSnapshotsCount","nodeType":"VariableDeclaration","scope":2100,"src":"41153:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2045,"name":"uint256","nodeType":"ElementaryTypeName","src":"41153:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2050,"initialValue":{"baseExpression":{"id":2047,"name":"snapshotsCounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"41180:15:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2049,"indexExpression":{"id":2048,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"41196:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"41180:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"41153:46:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2051,"name":"toSnapshotsCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"41211:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"41231:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"41211:21:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2072,"nodeType":"Block","src":"41311:43:0","statements":[{"expression":{"id":2070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2066,"name":"previous","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2042,"src":"41321:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2068,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"41342:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2067,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"41332:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41332:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"41321:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2071,"nodeType":"ExpressionStatement","src":"41321:24:0"}]},"id":2073,"nodeType":"IfStatement","src":"41207:147:0","trueBody":{"id":2065,"nodeType":"Block","src":"41234:71:0","statements":[{"expression":{"id":2063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2054,"name":"previous","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2042,"src":"41244:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":2055,"name":"snapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"41255:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref))"}},"id":2057,"indexExpression":{"id":2056,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"41265:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"41255:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$","typeString":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)"}},"id":2061,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2058,"name":"toSnapshotsCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"41269:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"41288:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"41269:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"41255:35:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_storage","typeString":"struct GovernancePowerDelegationERC20.Snapshot storage ref"}},"id":2062,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1725,"src":"41255:41:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"41244:52:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2064,"nodeType":"ExpressionStatement","src":"41244:52:0"}]}},{"expression":{"arguments":[{"id":2075,"name":"snapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"41386:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref))"}},{"id":2076,"name":"snapshotsCounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"41405:15:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},{"id":2077,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"41430:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2080,"name":"previous","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2042,"src":"41450:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2079,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"41442:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":2078,"name":"uint128","nodeType":"ElementaryTypeName","src":"41442:7:0","typeDescriptions":{}}},"id":2081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41442:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"arguments":[{"arguments":[{"id":2086,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"41490:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2084,"name":"previous","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2042,"src":"41477:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":203,"src":"41477:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41477:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2083,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"41469:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":2082,"name":"uint128","nodeType":"ElementaryTypeName","src":"41469:7:0","typeDescriptions":{}}},"id":2088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41469:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref))"},{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"id":2074,"name":"_writeSnapshot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2351,"src":"41362:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$_$_t_mapping$_t_address_$_t_uint256_$_$_t_address_$_t_uint128_$_t_uint128_$returns$__$","typeString":"function (mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)),mapping(address => uint256),address,uint128,uint128)"}},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41362:144:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2090,"nodeType":"ExpressionStatement","src":"41362:144:0"},{"eventCall":{"arguments":[{"id":2092,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"41542:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2095,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"41559:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2093,"name":"previous","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2042,"src":"41546:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":203,"src":"41546:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41546:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2097,"name":"delegationType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"41568:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}],"id":2091,"name":"DelegatedPowerChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":23,"src":"41520:21:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_enum$_DelegationType_$5_$returns$__$","typeString":"function (address,uint256,enum IGovernancePowerDelegationToken.DelegationType)"}},"id":2098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41520:63:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2099,"nodeType":"EmitStatement","src":"41515:68:0"}]}}]},"documentation":{"id":1937,"nodeType":"StructuredDocumentation","src":"39865:336:0","text":" @dev moves delegated power from one user to another\n @param from the user from which delegated power is moved\n @param to the user that will receive the delegated power\n @param amount the amount of delegated power to be moved\n @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)*"},"id":2103,"implemented":true,"kind":"function","modifiers":[],"name":"_moveDelegatesByType","nodeType":"FunctionDefinition","parameters":{"id":1946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1939,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":2103,"src":"40239:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1938,"name":"address","nodeType":"ElementaryTypeName","src":"40239:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1941,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":2103,"src":"40257:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1940,"name":"address","nodeType":"ElementaryTypeName","src":"40257:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1943,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":2103,"src":"40273:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1942,"name":"uint256","nodeType":"ElementaryTypeName","src":"40273:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1945,"mutability":"mutable","name":"delegationType","nodeType":"VariableDeclaration","scope":2103,"src":"40293:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"},"typeName":{"id":1944,"name":"DelegationType","nodeType":"UserDefinedTypeName","referencedDeclaration":5,"src":"40293:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}},"visibility":"internal"}],"src":"40233:93:0"},"returnParameters":{"id":1947,"nodeType":"ParameterList","parameters":[],"src":"40336:0:0"},"scope":2383,"src":"40204:1390:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2246,"nodeType":"Block","src":"42135:973:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2124,"name":"blockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"42149:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":2125,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"42164:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"number","nodeType":"MemberAccess","src":"42164:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"42149:27:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f424c4f434b5f4e554d424552","id":2128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"42178:22:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_dd61c748dcfe71393203093270c457f6ceb8834cce0160376620e7b2f811559c","typeString":"literal_string \"INVALID_BLOCK_NUMBER\""},"value":"INVALID_BLOCK_NUMBER"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dd61c748dcfe71393203093270c457f6ceb8834cce0160376620e7b2f811559c","typeString":"literal_string \"INVALID_BLOCK_NUMBER\""}],"id":2123,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"42141:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42141:60:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2130,"nodeType":"ExpressionStatement","src":"42141:60:0"},{"assignments":[2132],"declarations":[{"constant":false,"id":2132,"mutability":"mutable","name":"snapshotsCount","nodeType":"VariableDeclaration","scope":2246,"src":"42208:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2131,"name":"uint256","nodeType":"ElementaryTypeName","src":"42208:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2136,"initialValue":{"baseExpression":{"id":2133,"name":"snapshotsCounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"42233:15:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2135,"indexExpression":{"id":2134,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2116,"src":"42249:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"42233:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"42208:46:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2137,"name":"snapshotsCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"42265:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"42283:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"42265:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2145,"nodeType":"IfStatement","src":"42261:62:0","trueBody":{"id":2144,"nodeType":"Block","src":"42286:37:0","statements":[{"expression":{"arguments":[{"id":2141,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2116,"src":"42311:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2140,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"42301:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42301:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2122,"id":2143,"nodeType":"Return","src":"42294:22:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"id":2146,"name":"snapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"42372:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref))"}},"id":2148,"indexExpression":{"id":2147,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2116,"src":"42382:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"42372:15:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$","typeString":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)"}},"id":2152,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2149,"name":"snapshotsCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"42388:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"42405:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"42388:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"42372:35:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_storage","typeString":"struct GovernancePowerDelegationERC20.Snapshot storage ref"}},"id":2153,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"blockNumber","nodeType":"MemberAccess","referencedDeclaration":1723,"src":"42372:47:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2154,"name":"blockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"42423:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"42372:62:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2166,"nodeType":"IfStatement","src":"42368:131:0","trueBody":{"id":2165,"nodeType":"Block","src":"42436:63:0","statements":[{"expression":{"expression":{"baseExpression":{"baseExpression":{"id":2156,"name":"snapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"42451:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref))"}},"id":2158,"indexExpression":{"id":2157,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2116,"src":"42461:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"42451:15:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$","typeString":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)"}},"id":2162,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2159,"name":"snapshotsCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"42467:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"42484:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"42467:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"42451:35:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_storage","typeString":"struct GovernancePowerDelegationERC20.Snapshot storage ref"}},"id":2163,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1725,"src":"42451:41:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":2122,"id":2164,"nodeType":"Return","src":"42444:48:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"id":2167,"name":"snapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"42549:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref))"}},"id":2169,"indexExpression":{"id":2168,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2116,"src":"42559:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"42549:15:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$","typeString":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)"}},"id":2171,"indexExpression":{"hexValue":"30","id":2170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"42565:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"42549:18:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_storage","typeString":"struct GovernancePowerDelegationERC20.Snapshot storage ref"}},"id":2172,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"blockNumber","nodeType":"MemberAccess","referencedDeclaration":1723,"src":"42549:30:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2173,"name":"blockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"42582:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"42549:44:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2178,"nodeType":"IfStatement","src":"42545:73:0","trueBody":{"id":2177,"nodeType":"Block","src":"42595:23:0","statements":[{"expression":{"hexValue":"30","id":2175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"42610:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2122,"id":2176,"nodeType":"Return","src":"42603:8:0"}]}},{"assignments":[2180],"declarations":[{"constant":false,"id":2180,"mutability":"mutable","name":"lower","nodeType":"VariableDeclaration","scope":2246,"src":"42624:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2179,"name":"uint256","nodeType":"ElementaryTypeName","src":"42624:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2182,"initialValue":{"hexValue":"30","id":2181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"42640:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"42624:17:0"},{"assignments":[2184],"declarations":[{"constant":false,"id":2184,"mutability":"mutable","name":"upper","nodeType":"VariableDeclaration","scope":2246,"src":"42647:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2183,"name":"uint256","nodeType":"ElementaryTypeName","src":"42647:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2188,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2185,"name":"snapshotsCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"42663:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"42680:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"42663:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"42647:34:0"},{"body":{"id":2237,"nodeType":"Block","src":"42709:354:0","statements":[{"assignments":[2193],"declarations":[{"constant":false,"id":2193,"mutability":"mutable","name":"center","nodeType":"VariableDeclaration","scope":2237,"src":"42717:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2192,"name":"uint256","nodeType":"ElementaryTypeName","src":"42717:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2202,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2194,"name":"upper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2184,"src":"42734:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2195,"name":"upper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2184,"src":"42743:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2196,"name":"lower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2180,"src":"42751:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"42743:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2198,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"42742:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"42760:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"42742:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"42734:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"42717:44:0"},{"assignments":[2204],"declarations":[{"constant":false,"id":2204,"mutability":"mutable","name":"snapshot","nodeType":"VariableDeclaration","scope":2237,"src":"42796:24:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_memory_ptr","typeString":"struct GovernancePowerDelegationERC20.Snapshot"},"typeName":{"id":2203,"name":"Snapshot","nodeType":"UserDefinedTypeName","referencedDeclaration":1726,"src":"42796:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_storage_ptr","typeString":"struct GovernancePowerDelegationERC20.Snapshot"}},"visibility":"internal"}],"id":2210,"initialValue":{"baseExpression":{"baseExpression":{"id":2205,"name":"snapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"42823:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref))"}},"id":2207,"indexExpression":{"id":2206,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2116,"src":"42833:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"42823:15:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$","typeString":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)"}},"id":2209,"indexExpression":{"id":2208,"name":"center","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"42839:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"42823:23:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_storage","typeString":"struct GovernancePowerDelegationERC20.Snapshot storage ref"}},"nodeType":"VariableDeclarationStatement","src":"42796:50:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2211,"name":"snapshot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2204,"src":"42858:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_memory_ptr","typeString":"struct GovernancePowerDelegationERC20.Snapshot memory"}},"id":2212,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"blockNumber","nodeType":"MemberAccess","referencedDeclaration":1723,"src":"42858:20:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2213,"name":"blockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"42882:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"42858:35:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2219,"name":"snapshot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2204,"src":"42945:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_memory_ptr","typeString":"struct GovernancePowerDelegationERC20.Snapshot memory"}},"id":2220,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"blockNumber","nodeType":"MemberAccess","referencedDeclaration":1723,"src":"42945:20:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2221,"name":"blockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"42968:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"42945:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2234,"nodeType":"Block","src":"43020:37:0","statements":[{"expression":{"id":2232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2228,"name":"upper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2184,"src":"43030:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2229,"name":"center","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"43038:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"43047:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"43038:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"43030:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2233,"nodeType":"ExpressionStatement","src":"43030:18:0"}]},"id":2235,"nodeType":"IfStatement","src":"42941:116:0","trueBody":{"id":2227,"nodeType":"Block","src":"42981:33:0","statements":[{"expression":{"id":2225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2223,"name":"lower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2180,"src":"42991:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2224,"name":"center","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"42999:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"42991:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2226,"nodeType":"ExpressionStatement","src":"42991:14:0"}]}},"id":2236,"nodeType":"IfStatement","src":"42854:203:0","trueBody":{"id":2218,"nodeType":"Block","src":"42895:40:0","statements":[{"expression":{"expression":{"id":2215,"name":"snapshot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2204,"src":"42912:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_memory_ptr","typeString":"struct GovernancePowerDelegationERC20.Snapshot memory"}},"id":2216,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1725,"src":"42912:14:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":2122,"id":2217,"nodeType":"Return","src":"42905:21:0"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2189,"name":"upper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2184,"src":"42694:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2190,"name":"lower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2180,"src":"42702:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"42694:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2238,"nodeType":"WhileStatement","src":"42687:376:0"},{"expression":{"expression":{"baseExpression":{"baseExpression":{"id":2239,"name":"snapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"43075:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref))"}},"id":2241,"indexExpression":{"id":2240,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2116,"src":"43085:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"43075:15:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$","typeString":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)"}},"id":2243,"indexExpression":{"id":2242,"name":"lower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2180,"src":"43091:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"43075:22:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_storage","typeString":"struct GovernancePowerDelegationERC20.Snapshot storage ref"}},"id":2244,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1725,"src":"43075:28:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":2122,"id":2245,"nodeType":"Return","src":"43068:35:0"}]},"documentation":{"id":2104,"nodeType":"StructuredDocumentation","src":"41598:296:0","text":" @dev searches a snapshot by block number. Uses binary search.\n @param snapshots the snapshots mapping\n @param snapshotsCounts the number of snapshots\n @param user the user for which the snapshot is being searched\n @param blockNumber the block number being searched*"},"id":2247,"implemented":true,"kind":"function","modifiers":[],"name":"_searchByBlockNumber","nodeType":"FunctionDefinition","parameters":{"id":2119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2110,"mutability":"mutable","name":"snapshots","nodeType":"VariableDeclaration","scope":2247,"src":"41932:66:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot))"},"typeName":{"id":2109,"keyType":{"id":2105,"name":"address","nodeType":"ElementaryTypeName","src":"41940:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"41932:48:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot))"},"valueType":{"id":2108,"keyType":{"id":2106,"name":"uint256","nodeType":"ElementaryTypeName","src":"41959:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"41951:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$","typeString":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot)"},"valueType":{"id":2107,"name":"Snapshot","nodeType":"UserDefinedTypeName","referencedDeclaration":1726,"src":"41970:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_storage_ptr","typeString":"struct GovernancePowerDelegationERC20.Snapshot"}}}},"visibility":"internal"},{"constant":false,"id":2114,"mutability":"mutable","name":"snapshotsCounts","nodeType":"VariableDeclaration","scope":2247,"src":"42004:51:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2113,"keyType":{"id":2111,"name":"address","nodeType":"ElementaryTypeName","src":"42012:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"42004:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":2112,"name":"uint256","nodeType":"ElementaryTypeName","src":"42023:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":2116,"mutability":"mutable","name":"user","nodeType":"VariableDeclaration","scope":2247,"src":"42061:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2115,"name":"address","nodeType":"ElementaryTypeName","src":"42061:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2118,"mutability":"mutable","name":"blockNumber","nodeType":"VariableDeclaration","scope":2247,"src":"42079:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2117,"name":"uint256","nodeType":"ElementaryTypeName","src":"42079:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"41926:176:0"},"returnParameters":{"id":2122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2121,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2247,"src":"42126:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2120,"name":"uint256","nodeType":"ElementaryTypeName","src":"42126:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"42125:9:0"},"scope":2383,"src":"41897:1211:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"documentation":{"id":2248,"nodeType":"StructuredDocumentation","src":"43112:464:0","text":" @dev returns the delegation data (snapshot, snapshotsCount, list of delegates) by delegation type\n NOTE: Ideal implementation would have mapped this in a struct by delegation type. Unfortunately,\n the AAVE token and StakeToken already include a mapping for the snapshots, so we require contracts\n who inherit from this to provide access to the delegation data by overriding this method.\n @param delegationType the type of delegation*"},"id":2267,"implemented":false,"kind":"function","modifiers":[],"name":"_getDelegationDataByType","nodeType":"FunctionDefinition","parameters":{"id":2251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2250,"mutability":"mutable","name":"delegationType","nodeType":"VariableDeclaration","scope":2267,"src":"43613:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"},"typeName":{"id":2249,"name":"DelegationType","nodeType":"UserDefinedTypeName","referencedDeclaration":5,"src":"43613:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}},"visibility":"internal"}],"src":"43612:31:0"},"returnParameters":{"id":2266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2257,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2267,"src":"43698:56:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot))"},"typeName":{"id":2256,"keyType":{"id":2252,"name":"address","nodeType":"ElementaryTypeName","src":"43706:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"43698:48:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot))"},"valueType":{"id":2255,"keyType":{"id":2253,"name":"uint256","nodeType":"ElementaryTypeName","src":"43725:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"43717:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$","typeString":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot)"},"valueType":{"id":2254,"name":"Snapshot","nodeType":"UserDefinedTypeName","referencedDeclaration":1726,"src":"43736:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_storage_ptr","typeString":"struct GovernancePowerDelegationERC20.Snapshot"}}}},"visibility":"internal"},{"constant":false,"id":2261,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2267,"src":"43774:35:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2260,"keyType":{"id":2258,"name":"address","nodeType":"ElementaryTypeName","src":"43782:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"43774:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":2259,"name":"uint256","nodeType":"ElementaryTypeName","src":"43793:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":2265,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2267,"src":"43835:35:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"typeName":{"id":2264,"keyType":{"id":2262,"name":"address","nodeType":"ElementaryTypeName","src":"43843:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"43835:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"valueType":{"id":2263,"name":"address","nodeType":"ElementaryTypeName","src":"43854:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"}],"src":"43690:204:0"},"scope":2383,"src":"43579:316:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2350,"nodeType":"Block","src":"44381:584:0","statements":[{"assignments":[2288],"declarations":[{"constant":false,"id":2288,"mutability":"mutable","name":"currentBlock","nodeType":"VariableDeclaration","scope":2350,"src":"44387:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2287,"name":"uint128","nodeType":"ElementaryTypeName","src":"44387:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"id":2294,"initialValue":{"arguments":[{"expression":{"id":2291,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"44418:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"number","nodeType":"MemberAccess","src":"44418:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2290,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"44410:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":2289,"name":"uint128","nodeType":"ElementaryTypeName","src":"44410:7:0","typeDescriptions":{}}},"id":2293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"44410:21:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"VariableDeclarationStatement","src":"44387:44:0"},{"assignments":[2296],"declarations":[{"constant":false,"id":2296,"mutability":"mutable","name":"ownerSnapshotsCount","nodeType":"VariableDeclaration","scope":2350,"src":"44438:27:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2295,"name":"uint256","nodeType":"ElementaryTypeName","src":"44438:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2300,"initialValue":{"baseExpression":{"id":2297,"name":"snapshotsCounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"44468:15:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2299,"indexExpression":{"id":2298,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"44484:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"44468:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"44438:52:0"},{"assignments":[2304],"declarations":[{"constant":false,"id":2304,"mutability":"mutable","name":"snapshotsOwner","nodeType":"VariableDeclaration","scope":2350,"src":"44496:51:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$","typeString":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot)"},"typeName":{"id":2303,"keyType":{"id":2301,"name":"uint256","nodeType":"ElementaryTypeName","src":"44504:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"44496:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$","typeString":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot)"},"valueType":{"id":2302,"name":"Snapshot","nodeType":"UserDefinedTypeName","referencedDeclaration":1726,"src":"44515:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_storage_ptr","typeString":"struct GovernancePowerDelegationERC20.Snapshot"}}},"visibility":"internal"}],"id":2308,"initialValue":{"baseExpression":{"id":2305,"name":"snapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2274,"src":"44550:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref))"}},"id":2307,"indexExpression":{"id":2306,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"44560:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"44550:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$","typeString":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)"}},"nodeType":"VariableDeclarationStatement","src":"44496:70:0"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2309,"name":"ownerSnapshotsCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"44635:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"44658:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"44635:24:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":2312,"name":"snapshotsOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"44669:14:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$","typeString":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)"}},"id":2316,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2313,"name":"ownerSnapshotsCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"44684:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"44706:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"44684:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"44669:39:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_storage","typeString":"struct GovernancePowerDelegationERC20.Snapshot storage ref"}},"id":2317,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"blockNumber","nodeType":"MemberAccess","referencedDeclaration":1723,"src":"44669:51:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2318,"name":"currentBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2288,"src":"44724:12:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"44669:67:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"44635:101:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2348,"nodeType":"Block","src":"44820:141:0","statements":[{"expression":{"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2331,"name":"snapshotsOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"44828:14:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$","typeString":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)"}},"id":2333,"indexExpression":{"id":2332,"name":"ownerSnapshotsCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"44843:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"44828:35:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_storage","typeString":"struct GovernancePowerDelegationERC20.Snapshot storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2335,"name":"currentBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2288,"src":"44875:12:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":2336,"name":"newValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2284,"src":"44889:8:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"id":2334,"name":"Snapshot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1726,"src":"44866:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Snapshot_$1726_storage_ptr_$","typeString":"type(struct GovernancePowerDelegationERC20.Snapshot storage pointer)"}},"id":2337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"44866:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_memory_ptr","typeString":"struct GovernancePowerDelegationERC20.Snapshot memory"}},"src":"44828:70:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_storage","typeString":"struct GovernancePowerDelegationERC20.Snapshot storage ref"}},"id":2339,"nodeType":"ExpressionStatement","src":"44828:70:0"},{"expression":{"id":2346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2340,"name":"snapshotsCounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"44906:15:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2342,"indexExpression":{"id":2341,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"44922:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"44906:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2343,"name":"ownerSnapshotsCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"44931:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"44953:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"44931:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"44906:48:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2347,"nodeType":"ExpressionStatement","src":"44906:48:0"}]},"id":2349,"nodeType":"IfStatement","src":"44624:337:0","trueBody":{"id":2330,"nodeType":"Block","src":"44743:71:0","statements":[{"expression":{"id":2328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":2321,"name":"snapshotsOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"44751:14:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$","typeString":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)"}},"id":2325,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2322,"name":"ownerSnapshotsCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"44766:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"44788:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"44766:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"44751:39:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_storage","typeString":"struct GovernancePowerDelegationERC20.Snapshot storage ref"}},"id":2326,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1725,"src":"44751:45:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2327,"name":"newValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2284,"src":"44799:8:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"44751:56:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":2329,"nodeType":"ExpressionStatement","src":"44751:56:0"}]}}]},"documentation":{"id":2268,"nodeType":"StructuredDocumentation","src":"43899:250:0","text":" @dev Writes a snapshot for an owner of tokens\n @param owner The owner of the tokens\n @param oldValue The value before the operation that is gonna be executed after the snapshot\n @param newValue The value after the operation"},"id":2351,"implemented":true,"kind":"function","modifiers":[],"name":"_writeSnapshot","nodeType":"FunctionDefinition","parameters":{"id":2285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2274,"mutability":"mutable","name":"snapshots","nodeType":"VariableDeclaration","scope":2351,"src":"44181:66:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot))"},"typeName":{"id":2273,"keyType":{"id":2269,"name":"address","nodeType":"ElementaryTypeName","src":"44189:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"44181:48:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot))"},"valueType":{"id":2272,"keyType":{"id":2270,"name":"uint256","nodeType":"ElementaryTypeName","src":"44208:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"44200:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$","typeString":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot)"},"valueType":{"id":2271,"name":"Snapshot","nodeType":"UserDefinedTypeName","referencedDeclaration":1726,"src":"44219:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_storage_ptr","typeString":"struct GovernancePowerDelegationERC20.Snapshot"}}}},"visibility":"internal"},{"constant":false,"id":2278,"mutability":"mutable","name":"snapshotsCounts","nodeType":"VariableDeclaration","scope":2351,"src":"44253:51:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2277,"keyType":{"id":2275,"name":"address","nodeType":"ElementaryTypeName","src":"44261:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"44253:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":2276,"name":"uint256","nodeType":"ElementaryTypeName","src":"44272:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":2280,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":2351,"src":"44310:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2279,"name":"address","nodeType":"ElementaryTypeName","src":"44310:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2282,"mutability":"mutable","name":"oldValue","nodeType":"VariableDeclaration","scope":2351,"src":"44329:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2281,"name":"uint128","nodeType":"ElementaryTypeName","src":"44329:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":2284,"mutability":"mutable","name":"newValue","nodeType":"VariableDeclaration","scope":2351,"src":"44351:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2283,"name":"uint128","nodeType":"ElementaryTypeName","src":"44351:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"44175:196:0"},"returnParameters":{"id":2286,"nodeType":"ParameterList","parameters":[],"src":"44381:0:0"},"scope":2383,"src":"44152:813:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2381,"nodeType":"Block","src":"45441:164:0","statements":[{"assignments":[2364],"declarations":[{"constant":false,"id":2364,"mutability":"mutable","name":"previousDelegatee","nodeType":"VariableDeclaration","scope":2381,"src":"45447:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2363,"name":"address","nodeType":"ElementaryTypeName","src":"45447:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2368,"initialValue":{"baseExpression":{"id":2365,"name":"delegates","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"45475:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2367,"indexExpression":{"id":2366,"name":"delegator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"45485:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"45475:20:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"45447:48:0"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2369,"name":"previousDelegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2364,"src":"45506:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"45535:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2371,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"45527:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2370,"name":"address","nodeType":"ElementaryTypeName","src":"45527:7:0","typeDescriptions":{}}},"id":2373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"45527:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"45506:31:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2378,"nodeType":"IfStatement","src":"45502:68:0","trueBody":{"id":2377,"nodeType":"Block","src":"45539:31:0","statements":[{"expression":{"id":2375,"name":"delegator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"45554:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2362,"id":2376,"nodeType":"Return","src":"45547:16:0"}]}},{"expression":{"id":2379,"name":"previousDelegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2364,"src":"45583:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2362,"id":2380,"nodeType":"Return","src":"45576:24:0"}]},"documentation":{"id":2352,"nodeType":"StructuredDocumentation","src":"44969:334:0","text":" @dev returns the user delegatee. If a user never performed any delegation,\n his delegated address will be 0x0. In that case we simply return the user itself\n @param delegator the address of the user for which return the delegatee\n @param delegates the array of delegates for a particular type of delegation*"},"id":2382,"implemented":true,"kind":"function","modifiers":[],"name":"_getDelegatee","nodeType":"FunctionDefinition","parameters":{"id":2359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2354,"mutability":"mutable","name":"delegator","nodeType":"VariableDeclaration","scope":2382,"src":"45329:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2353,"name":"address","nodeType":"ElementaryTypeName","src":"45329:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2358,"mutability":"mutable","name":"delegates","nodeType":"VariableDeclaration","scope":2382,"src":"45348:45:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"typeName":{"id":2357,"keyType":{"id":2355,"name":"address","nodeType":"ElementaryTypeName","src":"45356:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"45348:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"valueType":{"id":2356,"name":"address","nodeType":"ElementaryTypeName","src":"45367:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"}],"src":"45328:66:0"},"returnParameters":{"id":2362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2361,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2382,"src":"45430:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2360,"name":"address","nodeType":"ElementaryTypeName","src":"45430:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"45429:9:0"},"scope":2383,"src":"45306:299:0","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":3651,"src":"35677:9930:0"},{"abstract":true,"baseContracts":[{"baseName":{"id":2385,"name":"GovernancePowerDelegationERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":2383,"src":"45788:30:0","typeDescriptions":{"typeIdentifier":"t_contract$_GovernancePowerDelegationERC20_$2383","typeString":"contract GovernancePowerDelegationERC20"}},"id":2386,"nodeType":"InheritanceSpecifier","src":"45788:30:0"}],"contractDependencies":[78,100,176,933,2383],"contractKind":"contract","documentation":{"id":2384,"nodeType":"StructuredDocumentation","src":"45609:129:0","text":" @title ERC20WithSnapshot\n @notice ERC20 including snapshots of balances on transfer-related actions\n @author Aave*"},"fullyImplemented":false,"id":2414,"linearizedBaseContracts":[2414,2383,78,933,176,100],"name":"GovernancePowerWithSnapshot","nodeType":"ContractDefinition","nodes":[{"id":2389,"libraryName":{"id":2387,"name":"SafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":370,"src":"45829:8:0","typeDescriptions":{"typeIdentifier":"t_contract$_SafeMath_$370","typeString":"library SafeMath"}},"nodeType":"UsingForDirective","src":"45823:27:0","typeName":{"id":2388,"name":"uint256","nodeType":"ElementaryTypeName","src":"45842:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"documentation":{"id":2390,"nodeType":"StructuredDocumentation","src":"45854:225:0","text":" @dev The following storage layout points to the prior StakedToken.sol implementation:\n _snapshots => _votingSnapshots\n _snapshotsCounts =>  _votingSnapshotsCounts\n _aaveGovernance => _aaveGovernance"},"functionSelector":"5b3cc0cf","id":2396,"mutability":"mutable","name":"_votingSnapshots","nodeType":"VariableDeclaration","scope":2414,"src":"46082:72:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot))"},"typeName":{"id":2395,"keyType":{"id":2391,"name":"address","nodeType":"ElementaryTypeName","src":"46090:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"46082:48:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot))"},"valueType":{"id":2394,"keyType":{"id":2392,"name":"uint256","nodeType":"ElementaryTypeName","src":"46109:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"46101:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$","typeString":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot)"},"valueType":{"id":2393,"name":"Snapshot","nodeType":"UserDefinedTypeName","referencedDeclaration":1726,"src":"46120:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_storage_ptr","typeString":"struct GovernancePowerDelegationERC20.Snapshot"}}}},"visibility":"public"},{"constant":false,"functionSelector":"7bb73c97","id":2400,"mutability":"mutable","name":"_votingSnapshotsCounts","nodeType":"VariableDeclaration","scope":2414,"src":"46158:57:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2399,"keyType":{"id":2397,"name":"address","nodeType":"ElementaryTypeName","src":"46166:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"46158:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":2398,"name":"uint256","nodeType":"ElementaryTypeName","src":"46177:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"documentation":{"id":2401,"nodeType":"StructuredDocumentation","src":"46220:278:0","text":"@dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\n !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\n to control all potential reentrancies by calling back the this contract"},"functionSelector":"c3863ada","id":2403,"mutability":"mutable","name":"_aaveGovernance","nodeType":"VariableDeclaration","scope":2414,"src":"46501:36:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITransferHook_$968","typeString":"contract ITransferHook"},"typeName":{"id":2402,"name":"ITransferHook","nodeType":"UserDefinedTypeName","referencedDeclaration":968,"src":"46501:13:0","typeDescriptions":{"typeIdentifier":"t_contract$_ITransferHook_$968","typeString":"contract ITransferHook"}},"visibility":"public"},{"body":{"id":2412,"nodeType":"Block","src":"46617:43:0","statements":[{"expression":{"id":2410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2408,"name":"_aaveGovernance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"46623:15:0","typeDescriptions":{"typeIdentifier":"t_contract$_ITransferHook_$968","typeString":"contract ITransferHook"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2409,"name":"aaveGovernance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2405,"src":"46641:14:0","typeDescriptions":{"typeIdentifier":"t_contract$_ITransferHook_$968","typeString":"contract ITransferHook"}},"src":"46623:32:0","typeDescriptions":{"typeIdentifier":"t_contract$_ITransferHook_$968","typeString":"contract ITransferHook"}},"id":2411,"nodeType":"ExpressionStatement","src":"46623:32:0"}]},"id":2413,"implemented":true,"kind":"function","modifiers":[],"name":"_setAaveGovernance","nodeType":"FunctionDefinition","parameters":{"id":2406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2405,"mutability":"mutable","name":"aaveGovernance","nodeType":"VariableDeclaration","scope":2413,"src":"46570:28:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITransferHook_$968","typeString":"contract ITransferHook"},"typeName":{"id":2404,"name":"ITransferHook","nodeType":"UserDefinedTypeName","referencedDeclaration":968,"src":"46570:13:0","typeDescriptions":{"typeIdentifier":"t_contract$_ITransferHook_$968","typeString":"contract ITransferHook"}},"visibility":"internal"}],"src":"46569:30:0"},"returnParameters":{"id":2407,"nodeType":"ParameterList","parameters":[],"src":"46617:0:0"},"scope":2414,"src":"46542:118:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":3651,"src":"45739:923:0"},{"abstract":false,"baseContracts":[{"baseName":{"id":2416,"name":"IStakedAave","nodeType":"UserDefinedTypeName","referencedDeclaration":958,"src":"46871:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStakedAave_$958","typeString":"contract IStakedAave"}},"id":2417,"nodeType":"InheritanceSpecifier","src":"46871:11:0"},{"baseName":{"id":2418,"name":"GovernancePowerWithSnapshot","nodeType":"UserDefinedTypeName","referencedDeclaration":2414,"src":"46886:27:0","typeDescriptions":{"typeIdentifier":"t_contract$_GovernancePowerWithSnapshot_$2414","typeString":"contract GovernancePowerWithSnapshot"}},"id":2419,"nodeType":"InheritanceSpecifier","src":"46886:27:0"},{"baseName":{"id":2420,"name":"VersionedInitializable","nodeType":"UserDefinedTypeName","referencedDeclaration":1169,"src":"46917:22:0","typeDescriptions":{"typeIdentifier":"t_contract$_VersionedInitializable_$1169","typeString":"contract VersionedInitializable"}},"id":2421,"nodeType":"InheritanceSpecifier","src":"46917:22:0"},{"baseName":{"id":2422,"name":"AaveDistributionManager","nodeType":"UserDefinedTypeName","referencedDeclaration":1702,"src":"46943:23:0","typeDescriptions":{"typeIdentifier":"t_contract$_AaveDistributionManager_$1702","typeString":"contract AaveDistributionManager"}},"id":2423,"nodeType":"InheritanceSpecifier","src":"46943:23:0"}],"contractDependencies":[78,100,176,933,958,1169,1176,1702,2383,2414],"contractKind":"contract","documentation":{"id":2415,"nodeType":"StructuredDocumentation","src":"46664:174:0","text":" @title StakedToken\n @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\n @author Aave*"},"fullyImplemented":true,"id":3650,"linearizedBaseContracts":[3650,1702,1176,1169,2414,2383,78,933,176,100,958],"name":"StakedTokenV2Rev3","nodeType":"ContractDefinition","nodes":[{"id":2426,"libraryName":{"id":2424,"name":"SafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":370,"src":"46977:8:0","typeDescriptions":{"typeIdentifier":"t_contract$_SafeMath_$370","typeString":"library SafeMath"}},"nodeType":"UsingForDirective","src":"46971:27:0","typeName":{"id":2425,"name":"uint256","nodeType":"ElementaryTypeName","src":"46990:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"id":2429,"libraryName":{"id":2427,"name":"SafeERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":1132,"src":"47007:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1132","typeString":"library SafeERC20"}},"nodeType":"UsingForDirective","src":"47001:27:0","typeName":{"id":2428,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":176,"src":"47021:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}}},{"constant":true,"documentation":{"id":2430,"nodeType":"StructuredDocumentation","src":"47032:52:0","text":"@dev Start of Storage layout from StakedToken v1"},"functionSelector":"dde43cba","id":2433,"mutability":"constant","name":"REVISION","nodeType":"VariableDeclaration","scope":3650,"src":"47087:36:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2431,"name":"uint256","nodeType":"ElementaryTypeName","src":"47087:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":2432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"47122:1:0","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"public"},{"constant":false,"functionSelector":"312f6b83","id":2435,"mutability":"immutable","name":"STAKED_TOKEN","nodeType":"VariableDeclaration","scope":3650,"src":"47128:36:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"},"typeName":{"id":2434,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":176,"src":"47128:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},"visibility":"public"},{"constant":false,"functionSelector":"99248ea7","id":2437,"mutability":"immutable","name":"REWARD_TOKEN","nodeType":"VariableDeclaration","scope":3650,"src":"47168:36:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"},"typeName":{"id":2436,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":176,"src":"47168:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},"visibility":"public"},{"constant":false,"functionSelector":"72b49d63","id":2439,"mutability":"immutable","name":"COOLDOWN_SECONDS","nodeType":"VariableDeclaration","scope":3650,"src":"47208:41:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2438,"name":"uint256","nodeType":"ElementaryTypeName","src":"47208:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":2440,"nodeType":"StructuredDocumentation","src":"47254:78:0","text":"@notice Seconds available to redeem once the cooldown period is fullfilled"},"functionSelector":"359c4a96","id":2442,"mutability":"immutable","name":"UNSTAKE_WINDOW","nodeType":"VariableDeclaration","scope":3650,"src":"47335:39:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2441,"name":"uint256","nodeType":"ElementaryTypeName","src":"47335:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":2443,"nodeType":"StructuredDocumentation","src":"47379:82:0","text":"@notice Address to pull from the rewards, needs to have approved this contract"},"functionSelector":"946776cd","id":2445,"mutability":"immutable","name":"REWARDS_VAULT","nodeType":"VariableDeclaration","scope":3650,"src":"47464:38:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2444,"name":"address","nodeType":"ElementaryTypeName","src":"47464:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"7e90d7ef","id":2449,"mutability":"mutable","name":"stakerRewardsToClaim","nodeType":"VariableDeclaration","scope":3650,"src":"47507:55:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2448,"keyType":{"id":2446,"name":"address","nodeType":"ElementaryTypeName","src":"47515:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"47507:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":2447,"name":"uint256","nodeType":"ElementaryTypeName","src":"47526:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"091030c3","id":2453,"mutability":"mutable","name":"stakersCooldowns","nodeType":"VariableDeclaration","scope":3650,"src":"47566:51:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2452,"keyType":{"id":2450,"name":"address","nodeType":"ElementaryTypeName","src":"47574:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"47566:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":2451,"name":"uint256","nodeType":"ElementaryTypeName","src":"47585:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"documentation":{"id":2454,"nodeType":"StructuredDocumentation","src":"47676:74:0","text":"@dev To see the voting mappings, go to GovernancePowerWithSnapshot.sol"},"id":2458,"mutability":"mutable","name":"_votingDelegates","nodeType":"VariableDeclaration","scope":3650,"src":"47753:53:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"typeName":{"id":2457,"keyType":{"id":2455,"name":"address","nodeType":"ElementaryTypeName","src":"47761:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"47753:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"valueType":{"id":2456,"name":"address","nodeType":"ElementaryTypeName","src":"47772:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"},{"constant":false,"id":2464,"mutability":"mutable","name":"_propositionPowerSnapshots","nodeType":"VariableDeclaration","scope":3650,"src":"47811:84:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot))"},"typeName":{"id":2463,"keyType":{"id":2459,"name":"address","nodeType":"ElementaryTypeName","src":"47819:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"47811:48:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot))"},"valueType":{"id":2462,"keyType":{"id":2460,"name":"uint256","nodeType":"ElementaryTypeName","src":"47838:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"47830:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$","typeString":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot)"},"valueType":{"id":2461,"name":"Snapshot","nodeType":"UserDefinedTypeName","referencedDeclaration":1726,"src":"47849:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_storage_ptr","typeString":"struct GovernancePowerDelegationERC20.Snapshot"}}}},"visibility":"internal"},{"constant":false,"id":2468,"mutability":"mutable","name":"_propositionPowerSnapshotsCounts","nodeType":"VariableDeclaration","scope":3650,"src":"47899:69:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2467,"keyType":{"id":2465,"name":"address","nodeType":"ElementaryTypeName","src":"47907:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"47899:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":2466,"name":"uint256","nodeType":"ElementaryTypeName","src":"47918:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":2472,"mutability":"mutable","name":"_propositionPowerDelegates","nodeType":"VariableDeclaration","scope":3650,"src":"47972:63:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"typeName":{"id":2471,"keyType":{"id":2469,"name":"address","nodeType":"ElementaryTypeName","src":"47980:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"47972:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"valueType":{"id":2470,"name":"address","nodeType":"ElementaryTypeName","src":"47991:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"},{"constant":false,"functionSelector":"3644e515","id":2474,"mutability":"mutable","name":"DOMAIN_SEPARATOR","nodeType":"VariableDeclaration","scope":3650,"src":"48040:31:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2473,"name":"bytes32","nodeType":"ElementaryTypeName","src":"48040:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"78160376","id":2480,"mutability":"constant","name":"EIP712_REVISION","nodeType":"VariableDeclaration","scope":3650,"src":"48075:50:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2475,"name":"bytes","nodeType":"ElementaryTypeName","src":"48075:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":{"arguments":[{"hexValue":"31","id":2478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"48121:3:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6","typeString":"literal_string \"1\""},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6","typeString":"literal_string \"1\""}],"id":2477,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"48115:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2476,"name":"bytes","nodeType":"ElementaryTypeName","src":"48115:5:0","typeDescriptions":{}}},"id":2479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"48115:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"visibility":"public"},{"constant":true,"id":2485,"mutability":"constant","name":"EIP712_DOMAIN","nodeType":"VariableDeclaration","scope":3650,"src":"48129:141:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2481,"name":"bytes32","nodeType":"ElementaryTypeName","src":"48129:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","id":2483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"48185:84:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""},"value":"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""}],"id":2482,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"48175:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"48175:95:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"functionSelector":"30adf81f","id":2490,"mutability":"constant","name":"PERMIT_TYPEHASH","nodeType":"VariableDeclaration","scope":3650,"src":"48274:141:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2486,"name":"bytes32","nodeType":"ElementaryTypeName","src":"48274:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529","id":2488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"48330:84:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9","typeString":"literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""},"value":"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9","typeString":"literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""}],"id":2487,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"48320:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"48320:95:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"documentation":{"id":2491,"nodeType":"StructuredDocumentation","src":"48420:58:0","text":"@dev owner => next valid nonce to submit with permit()"},"functionSelector":"b9844d8d","id":2495,"mutability":"mutable","name":"_nonces","nodeType":"VariableDeclaration","scope":3650,"src":"48481:42:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2494,"keyType":{"id":2492,"name":"address","nodeType":"ElementaryTypeName","src":"48489:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"48481:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":2493,"name":"uint256","nodeType":"ElementaryTypeName","src":"48500:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"anonymous":false,"id":2503,"name":"Staked","nodeType":"EventDefinition","parameters":{"id":2502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2497,"indexed":true,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":2503,"src":"48541:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2496,"name":"address","nodeType":"ElementaryTypeName","src":"48541:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2499,"indexed":true,"mutability":"mutable","name":"onBehalfOf","nodeType":"VariableDeclaration","scope":2503,"src":"48563:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2498,"name":"address","nodeType":"ElementaryTypeName","src":"48563:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2501,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":2503,"src":"48591:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2500,"name":"uint256","nodeType":"ElementaryTypeName","src":"48591:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"48540:66:0"},"src":"48528:79:0"},{"anonymous":false,"id":2511,"name":"Redeem","nodeType":"EventDefinition","parameters":{"id":2510,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2505,"indexed":true,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":2511,"src":"48623:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2504,"name":"address","nodeType":"ElementaryTypeName","src":"48623:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2507,"indexed":true,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":2511,"src":"48645:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2506,"name":"address","nodeType":"ElementaryTypeName","src":"48645:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2509,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":2511,"src":"48665:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2508,"name":"uint256","nodeType":"ElementaryTypeName","src":"48665:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"48622:58:0"},"src":"48610:71:0"},{"anonymous":false,"id":2517,"name":"RewardsAccrued","nodeType":"EventDefinition","parameters":{"id":2516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2513,"indexed":false,"mutability":"mutable","name":"user","nodeType":"VariableDeclaration","scope":2517,"src":"48706:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2512,"name":"address","nodeType":"ElementaryTypeName","src":"48706:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2515,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":2517,"src":"48720:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2514,"name":"uint256","nodeType":"ElementaryTypeName","src":"48720:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"48705:30:0"},"src":"48685:51:0"},{"anonymous":false,"id":2525,"name":"RewardsClaimed","nodeType":"EventDefinition","parameters":{"id":2524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2519,"indexed":true,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":2525,"src":"48760:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2518,"name":"address","nodeType":"ElementaryTypeName","src":"48760:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2521,"indexed":true,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":2525,"src":"48782:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2520,"name":"address","nodeType":"ElementaryTypeName","src":"48782:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2523,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":2525,"src":"48802:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2522,"name":"uint256","nodeType":"ElementaryTypeName","src":"48802:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"48759:58:0"},"src":"48739:79:0"},{"anonymous":false,"id":2529,"name":"Cooldown","nodeType":"EventDefinition","parameters":{"id":2528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2527,"indexed":true,"mutability":"mutable","name":"user","nodeType":"VariableDeclaration","scope":2529,"src":"48837:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2526,"name":"address","nodeType":"ElementaryTypeName","src":"48837:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"48836:22:0"},"src":"48822:37:0"},{"body":{"id":2594,"nodeType":"Block","src":"49256:264:0","statements":[{"expression":{"id":2564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2562,"name":"STAKED_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2435,"src":"49262:12:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2563,"name":"stakedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"49277:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},"src":"49262:26:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},"id":2565,"nodeType":"ExpressionStatement","src":"49262:26:0"},{"expression":{"id":2568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2566,"name":"REWARD_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"49294:12:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2567,"name":"rewardToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2533,"src":"49309:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},"src":"49294:26:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},"id":2569,"nodeType":"ExpressionStatement","src":"49294:26:0"},{"expression":{"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2570,"name":"COOLDOWN_SECONDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"49326:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2571,"name":"cooldownSeconds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"49345:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"49326:34:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2573,"nodeType":"ExpressionStatement","src":"49326:34:0"},{"expression":{"id":2576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2574,"name":"UNSTAKE_WINDOW","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"49366:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2575,"name":"unstakeWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2537,"src":"49383:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"49366:30:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2577,"nodeType":"ExpressionStatement","src":"49366:30:0"},{"expression":{"id":2580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2578,"name":"REWARDS_VAULT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"49402:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2579,"name":"rewardsVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"49418:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"49402:28:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2581,"nodeType":"ExpressionStatement","src":"49402:28:0"},{"expression":{"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2582,"name":"_aaveGovernance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"49436:15:0","typeDescriptions":{"typeIdentifier":"t_contract$_ITransferHook_$968","typeString":"contract ITransferHook"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2584,"name":"governance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"49468:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2583,"name":"ITransferHook","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":968,"src":"49454:13:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ITransferHook_$968_$","typeString":"type(contract ITransferHook)"}},"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49454:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ITransferHook_$968","typeString":"contract ITransferHook"}},"src":"49436:43:0","typeDescriptions":{"typeIdentifier":"t_contract$_ITransferHook_$968","typeString":"contract ITransferHook"}},"id":2587,"nodeType":"ExpressionStatement","src":"49436:43:0"},{"expression":{"arguments":[{"id":2591,"name":"decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2549,"src":"49506:8:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":2588,"name":"ERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"49485:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20_$933_$","typeString":"type(contract ERC20)"}},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"_setupDecimals","nodeType":"MemberAccess","referencedDeclaration":921,"src":"49485:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":2592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49485:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2593,"nodeType":"ExpressionStatement","src":"49485:30:0"}]},"id":2595,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":2554,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2545,"src":"49179:4:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2555,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"49185:6:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":2556,"modifierName":{"id":2553,"name":"ERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"49173:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20_$933_$","typeString":"type(contract ERC20)"}},"nodeType":"ModifierInvocation","src":"49173:19:0"},{"arguments":[{"id":2558,"name":"emissionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2541,"src":"49217:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2559,"name":"distributionDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2543,"src":"49234:20:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"id":2560,"modifierName":{"id":2557,"name":"AaveDistributionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1702,"src":"49193:23:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AaveDistributionManager_$1702_$","typeString":"type(contract AaveDistributionManager)"}},"nodeType":"ModifierInvocation","src":"49193:62:0"}],"name":"","nodeType":"FunctionDefinition","parameters":{"id":2552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2531,"mutability":"mutable","name":"stakedToken","nodeType":"VariableDeclaration","scope":2595,"src":"48880:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"},"typeName":{"id":2530,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":176,"src":"48880:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2533,"mutability":"mutable","name":"rewardToken","nodeType":"VariableDeclaration","scope":2595,"src":"48904:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"},"typeName":{"id":2532,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":176,"src":"48904:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2535,"mutability":"mutable","name":"cooldownSeconds","nodeType":"VariableDeclaration","scope":2595,"src":"48928:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2534,"name":"uint256","nodeType":"ElementaryTypeName","src":"48928:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2537,"mutability":"mutable","name":"unstakeWindow","nodeType":"VariableDeclaration","scope":2595,"src":"48957:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2536,"name":"uint256","nodeType":"ElementaryTypeName","src":"48957:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2539,"mutability":"mutable","name":"rewardsVault","nodeType":"VariableDeclaration","scope":2595,"src":"48984:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2538,"name":"address","nodeType":"ElementaryTypeName","src":"48984:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2541,"mutability":"mutable","name":"emissionManager","nodeType":"VariableDeclaration","scope":2595,"src":"49010:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2540,"name":"address","nodeType":"ElementaryTypeName","src":"49010:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2543,"mutability":"mutable","name":"distributionDuration","nodeType":"VariableDeclaration","scope":2595,"src":"49039:28:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2542,"name":"uint128","nodeType":"ElementaryTypeName","src":"49039:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":2545,"mutability":"mutable","name":"name","nodeType":"VariableDeclaration","scope":2595,"src":"49073:18:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2544,"name":"string","nodeType":"ElementaryTypeName","src":"49073:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2547,"mutability":"mutable","name":"symbol","nodeType":"VariableDeclaration","scope":2595,"src":"49097:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2546,"name":"string","nodeType":"ElementaryTypeName","src":"49097:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2549,"mutability":"mutable","name":"decimals","nodeType":"VariableDeclaration","scope":2595,"src":"49123:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2548,"name":"uint8","nodeType":"ElementaryTypeName","src":"49123:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2551,"mutability":"mutable","name":"governance","nodeType":"VariableDeclaration","scope":2595,"src":"49143:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2550,"name":"address","nodeType":"ElementaryTypeName","src":"49143:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"48874:291:0"},"returnParameters":{"id":2561,"nodeType":"ParameterList","parameters":[],"src":"49256:0:0"},"scope":3650,"src":"48863:657:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2644,"nodeType":"Block","src":"49619:515:0","statements":[{"assignments":[2602],"declarations":[{"constant":false,"id":2602,"mutability":"mutable","name":"chainId","nodeType":"VariableDeclaration","scope":2644,"src":"49625:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2601,"name":"uint256","nodeType":"ElementaryTypeName","src":"49625:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2603,"nodeType":"VariableDeclarationStatement","src":"49625:15:0"},{"AST":{"nodeType":"YulBlock","src":"49687:34:0","statements":[{"nodeType":"YulAssignment","src":"49695:20:0","value":{"arguments":[],"functionName":{"name":"chainid","nodeType":"YulIdentifier","src":"49706:7:0"},"nodeType":"YulFunctionCall","src":"49706:9:0"},"variableNames":[{"name":"chainId","nodeType":"YulIdentifier","src":"49695:7:0"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2602,"isOffset":false,"isSlot":false,"src":"49695:7:0","valueSize":1}],"id":2604,"nodeType":"InlineAssembly","src":"49678:43:0"},{"expression":{"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2605,"name":"DOMAIN_SEPARATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"49727:16:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2609,"name":"EIP712_DOMAIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2485,"src":"49783:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2613,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"49822:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":2614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49822:6:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2612,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"49816:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2611,"name":"bytes","nodeType":"ElementaryTypeName","src":"49816:5:0","typeDescriptions":{}}},"id":2615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49816:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2610,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"49806:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49806:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":2618,"name":"EIP712_REVISION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2480,"src":"49850:15:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2617,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"49840:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49840:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2620,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"49876:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":2623,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"49901:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_StakedTokenV2Rev3_$3650","typeString":"contract StakedTokenV2Rev3"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_StakedTokenV2Rev3_$3650","typeString":"contract StakedTokenV2Rev3"}],"id":2622,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"49893:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2621,"name":"address","nodeType":"ElementaryTypeName","src":"49893:7:0","typeDescriptions":{}}},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49893:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2607,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"49763:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2608,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"49763:10:0","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49763:151:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2606,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"49746:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49746:174:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"49727:193:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2628,"nodeType":"ExpressionStatement","src":"49727:193:0"},{"assignments":[2630],"declarations":[{"constant":false,"id":2630,"mutability":"mutable","name":"assetData","nodeType":"VariableDeclaration","scope":2644,"src":"50030:27:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData"},"typeName":{"id":2629,"name":"AssetData","nodeType":"UserDefinedTypeName","referencedDeclaration":1193,"src":"50030:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData"}},"visibility":"internal"}],"id":2637,"initialValue":{"baseExpression":{"id":2631,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"50060:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_AssetData_$1193_storage_$","typeString":"mapping(address => struct AaveDistributionManager.AssetData storage ref)"}},"id":2636,"indexExpression":{"arguments":[{"id":2634,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"50075:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_StakedTokenV2Rev3_$3650","typeString":"contract StakedTokenV2Rev3"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_StakedTokenV2Rev3_$3650","typeString":"contract StakedTokenV2Rev3"}],"id":2633,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"50067:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2632,"name":"address","nodeType":"ElementaryTypeName","src":"50067:7:0","typeDescriptions":{}}},"id":2635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50067:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"50060:21:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage","typeString":"struct AaveDistributionManager.AssetData storage ref"}},"nodeType":"VariableDeclarationStatement","src":"50030:51:0"},{"expression":{"id":2642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2638,"name":"assetData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2630,"src":"50087:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_AssetData_$1193_storage_ptr","typeString":"struct AaveDistributionManager.AssetData storage pointer"}},"id":2640,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"lastUpdateTimestamp","nodeType":"MemberAccess","referencedDeclaration":1186,"src":"50087:29:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31363230353934373230","id":2641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"50119:10:0","typeDescriptions":{"typeIdentifier":"t_rational_1620594720_by_1","typeString":"int_const 1620594720"},"value":"1620594720"},"src":"50087:42:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":2643,"nodeType":"ExpressionStatement","src":"50087:42:0"}]},"documentation":{"id":2596,"nodeType":"StructuredDocumentation","src":"49524:49:0","text":" @dev Called by the proxy contract*"},"functionSelector":"8129fc1c","id":2645,"implemented":true,"kind":"function","modifiers":[{"id":2599,"modifierName":{"id":2598,"name":"initializer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1158,"src":"49607:11:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"49607:11:0"}],"name":"initialize","nodeType":"FunctionDefinition","parameters":{"id":2597,"nodeType":"ParameterList","parameters":[],"src":"49595:2:0"},"returnParameters":{"id":2600,"nodeType":"ParameterList","parameters":[],"src":"49619:0:0"},"scope":3650,"src":"49576:558:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[940],"body":{"id":2736,"nodeType":"Block","src":"50207:671:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2654,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"50221:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"50231:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"50221:11:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f5a45524f5f414d4f554e54","id":2657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"50234:21:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_33d2eb294587ef7b32eb48e48695ebfec45a9c8922ec7d1c444cfad1fb208e8d","typeString":"literal_string \"INVALID_ZERO_AMOUNT\""},"value":"INVALID_ZERO_AMOUNT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_33d2eb294587ef7b32eb48e48695ebfec45a9c8922ec7d1c444cfad1fb208e8d","typeString":"literal_string \"INVALID_ZERO_AMOUNT\""}],"id":2653,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"50213:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50213:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2659,"nodeType":"ExpressionStatement","src":"50213:43:0"},{"assignments":[2661],"declarations":[{"constant":false,"id":2661,"mutability":"mutable","name":"balanceOfUser","nodeType":"VariableDeclaration","scope":2736,"src":"50262:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2660,"name":"uint256","nodeType":"ElementaryTypeName","src":"50262:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2665,"initialValue":{"arguments":[{"id":2663,"name":"onBehalfOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"50296:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2662,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"50286:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50286:21:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"50262:45:0"},{"assignments":[2667],"declarations":[{"constant":false,"id":2667,"mutability":"mutable","name":"accruedRewards","nodeType":"VariableDeclaration","scope":2736,"src":"50314:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2666,"name":"uint256","nodeType":"ElementaryTypeName","src":"50314:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2678,"initialValue":{"arguments":[{"id":2669,"name":"onBehalfOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"50370:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2672,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"50390:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_StakedTokenV2Rev3_$3650","typeString":"contract StakedTokenV2Rev3"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_StakedTokenV2Rev3_$3650","typeString":"contract StakedTokenV2Rev3"}],"id":2671,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"50382:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2670,"name":"address","nodeType":"ElementaryTypeName","src":"50382:7:0","typeDescriptions":{}}},"id":2673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50382:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2674,"name":"balanceOfUser","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2661,"src":"50397:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2675,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"50412:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50412:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2668,"name":"_updateUserAssetInternal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"50345:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,uint256,uint256) returns (uint256)"}},"id":2677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50345:81:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"50314:112:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2679,"name":"accruedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"50436:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"50454:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"50436:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2699,"nodeType":"IfStatement","src":"50432:182:0","trueBody":{"id":2698,"nodeType":"Block","src":"50457:157:0","statements":[{"eventCall":{"arguments":[{"id":2683,"name":"onBehalfOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"50485:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2684,"name":"accruedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"50497:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2682,"name":"RewardsAccrued","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"50470:14:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50470:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2686,"nodeType":"EmitStatement","src":"50465:47:0"},{"expression":{"id":2696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2687,"name":"stakerRewardsToClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2449,"src":"50520:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2689,"indexExpression":{"id":2688,"name":"onBehalfOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"50541:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"50520:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2694,"name":"accruedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"50592:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":2690,"name":"stakerRewardsToClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2449,"src":"50555:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2692,"indexExpression":{"id":2691,"name":"onBehalfOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"50576:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"50555:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":203,"src":"50555:36:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50555:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"50520:87:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2697,"nodeType":"ExpressionStatement","src":"50520:87:0"}]}},{"expression":{"id":2709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2700,"name":"stakersCooldowns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"50620:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2702,"indexExpression":{"id":2701,"name":"onBehalfOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"50637:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"50620:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":2704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"50676:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2705,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"50679:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2706,"name":"onBehalfOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"50687:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2707,"name":"balanceOfUser","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2661,"src":"50699:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2703,"name":"getNextCooldownTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3164,"src":"50651:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,address,uint256) view returns (uint256)"}},"id":2708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50651:62:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"50620:93:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2710,"nodeType":"ExpressionStatement","src":"50620:93:0"},{"expression":{"arguments":[{"id":2712,"name":"onBehalfOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"50726:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2713,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"50738:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2711,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"50720:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50720:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2715,"nodeType":"ExpressionStatement","src":"50720:25:0"},{"expression":{"arguments":[{"expression":{"id":2720,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"50789:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"50789:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"arguments":[{"id":2724,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"50809:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_StakedTokenV2Rev3_$3650","typeString":"contract StakedTokenV2Rev3"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_StakedTokenV2Rev3_$3650","typeString":"contract StakedTokenV2Rev3"}],"id":2723,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"50801:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2722,"name":"address","nodeType":"ElementaryTypeName","src":"50801:7:0","typeDescriptions":{}}},"id":2725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50801:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2726,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"50816:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":2717,"name":"STAKED_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2435,"src":"50758:12:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}],"id":2716,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"50751:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$176_$","typeString":"type(contract IERC20)"}},"id":2718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50751:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},"id":2719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":1037,"src":"50751:37:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$176_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$176_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":2727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50751:72:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2728,"nodeType":"ExpressionStatement","src":"50751:72:0"},{"eventCall":{"arguments":[{"expression":{"id":2730,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"50842:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"50842:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":2732,"name":"onBehalfOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"50854:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2733,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"50866:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2729,"name":"Staked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"50835:6:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50835:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2735,"nodeType":"EmitStatement","src":"50830:43:0"}]},"functionSelector":"adc9772e","id":2737,"implemented":true,"kind":"function","modifiers":[],"name":"stake","nodeType":"FunctionDefinition","overrides":{"id":2651,"nodeType":"OverrideSpecifier","overrides":[],"src":"50198:8:0"},"parameters":{"id":2650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2647,"mutability":"mutable","name":"onBehalfOf","nodeType":"VariableDeclaration","scope":2737,"src":"50153:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2646,"name":"address","nodeType":"ElementaryTypeName","src":"50153:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2649,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":2737,"src":"50173:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2648,"name":"uint256","nodeType":"ElementaryTypeName","src":"50173:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"50152:36:0"},"returnParameters":{"id":2652,"nodeType":"ParameterList","parameters":[],"src":"50207:0:0"},"scope":3650,"src":"50138:740:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[947],"body":{"id":2845,"nodeType":"Block","src":"51087:909:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2747,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"51101:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"51111:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"51101:11:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f5a45524f5f414d4f554e54","id":2750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"51114:21:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_33d2eb294587ef7b32eb48e48695ebfec45a9c8922ec7d1c444cfad1fb208e8d","typeString":"literal_string \"INVALID_ZERO_AMOUNT\""},"value":"INVALID_ZERO_AMOUNT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_33d2eb294587ef7b32eb48e48695ebfec45a9c8922ec7d1c444cfad1fb208e8d","typeString":"literal_string \"INVALID_ZERO_AMOUNT\""}],"id":2746,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"51093:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"51093:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2752,"nodeType":"ExpressionStatement","src":"51093:43:0"},{"assignments":[2754],"declarations":[{"constant":false,"id":2754,"mutability":"mutable","name":"cooldownStartTimestamp","nodeType":"VariableDeclaration","scope":2845,"src":"51173:30:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2753,"name":"uint256","nodeType":"ElementaryTypeName","src":"51173:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2759,"initialValue":{"baseExpression":{"id":2755,"name":"stakersCooldowns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"51206:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2758,"indexExpression":{"expression":{"id":2756,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"51223:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"51223:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"51206:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"51173:61:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2761,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"51255:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"51255:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[{"id":2765,"name":"COOLDOWN_SECONDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"51300:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2763,"name":"cooldownStartTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"51273:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":203,"src":"51273:26:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"51273:44:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"51255:62:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e53554646494349454e545f434f4f4c444f574e","id":2768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"51325:23:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_66cceaab4b8a6f427cff5482a526862a61c3ef92948b70aceb4a8f720a8f0ead","typeString":"literal_string \"INSUFFICIENT_COOLDOWN\""},"value":"INSUFFICIENT_COOLDOWN"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_66cceaab4b8a6f427cff5482a526862a61c3ef92948b70aceb4a8f720a8f0ead","typeString":"literal_string \"INSUFFICIENT_COOLDOWN\""}],"id":2760,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"51240:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"51240:114:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2770,"nodeType":"ExpressionStatement","src":"51240:114:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":2777,"name":"COOLDOWN_SECONDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"51422:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2775,"name":"cooldownStartTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"51395:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":203,"src":"51395:26:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"51395:44:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":2772,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"51375:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"51375:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":220,"src":"51375:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"51375:65:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2780,"name":"UNSTAKE_WINDOW","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"51444:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"51375:83:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"554e5354414b455f57494e444f575f46494e4953484544","id":2782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"51466:25:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c6959acf2335419e4a75195e2fb1c276a96baa5b7fab6be19b14b9420a4bd962","typeString":"literal_string \"UNSTAKE_WINDOW_FINISHED\""},"value":"UNSTAKE_WINDOW_FINISHED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c6959acf2335419e4a75195e2fb1c276a96baa5b7fab6be19b14b9420a4bd962","typeString":"literal_string \"UNSTAKE_WINDOW_FINISHED\""}],"id":2771,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"51360:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"51360:137:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2784,"nodeType":"ExpressionStatement","src":"51360:137:0"},{"assignments":[2786],"declarations":[{"constant":false,"id":2786,"mutability":"mutable","name":"balanceOfMessageSender","nodeType":"VariableDeclaration","scope":2845,"src":"51503:30:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2785,"name":"uint256","nodeType":"ElementaryTypeName","src":"51503:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2791,"initialValue":{"arguments":[{"expression":{"id":2788,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"51546:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"51546:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":2787,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"51536:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"51536:21:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"51503:54:0"},{"assignments":[2793],"declarations":[{"constant":false,"id":2793,"mutability":"mutable","name":"amountToRedeem","nodeType":"VariableDeclaration","scope":2845,"src":"51564:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2792,"name":"uint256","nodeType":"ElementaryTypeName","src":"51564:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2801,"initialValue":{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2794,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"51590:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2795,"name":"balanceOfMessageSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2786,"src":"51599:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"51590:31:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2797,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"51589:33:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2799,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"51650:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"51589:67:0","trueExpression":{"id":2798,"name":"balanceOfMessageSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2786,"src":"51625:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"51564:92:0"},{"expression":{"arguments":[{"expression":{"id":2803,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"51694:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"51694:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":2805,"name":"balanceOfMessageSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2786,"src":"51706:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":2806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"51730:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2802,"name":"_updateCurrentUnclaimedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"51663:30:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bool_$returns$_t_uint256_$","typeString":"function (address,uint256,bool) returns (uint256)"}},"id":2807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"51663:72:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2808,"nodeType":"ExpressionStatement","src":"51663:72:0"},{"expression":{"arguments":[{"expression":{"id":2810,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"51748:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"51748:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":2812,"name":"amountToRedeem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2793,"src":"51760:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2809,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"51742:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"51742:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2814,"nodeType":"ExpressionStatement","src":"51742:33:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2817,"name":"amountToRedeem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2793,"src":"51813:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2815,"name":"balanceOfMessageSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2786,"src":"51786:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":220,"src":"51786:26:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"51786:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"51832:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"51786:47:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2829,"nodeType":"IfStatement","src":"51782:100:0","trueBody":{"id":2828,"nodeType":"Block","src":"51835:47:0","statements":[{"expression":{"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2821,"name":"stakersCooldowns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"51843:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2824,"indexExpression":{"expression":{"id":2822,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"51860:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"51860:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"51843:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"51874:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"51843:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2827,"nodeType":"ExpressionStatement","src":"51843:32:0"}]}},{"expression":{"arguments":[{"id":2834,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2740,"src":"51922:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2835,"name":"amountToRedeem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2793,"src":"51926:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":2831,"name":"STAKED_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2435,"src":"51895:12:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}],"id":2830,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"51888:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$176_$","typeString":"type(contract IERC20)"}},"id":2832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"51888:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},"id":2833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1012,"src":"51888:33:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$176_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$176_$","typeString":"function (contract IERC20,address,uint256)"}},"id":2836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"51888:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2837,"nodeType":"ExpressionStatement","src":"51888:53:0"},{"eventCall":{"arguments":[{"expression":{"id":2839,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"51960:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"51960:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":2841,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2740,"src":"51972:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2842,"name":"amountToRedeem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2793,"src":"51976:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2838,"name":"Redeem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2511,"src":"51953:6:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"51953:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2844,"nodeType":"EmitStatement","src":"51948:43:0"}]},"documentation":{"id":2738,"nodeType":"StructuredDocumentation","src":"50882:140:0","text":" @dev Redeems staked tokens, and stop earning rewards\n @param to Address to redeem to\n @param amount Amount to redeem*"},"functionSelector":"1e9a6950","id":2846,"implemented":true,"kind":"function","modifiers":[],"name":"redeem","nodeType":"FunctionDefinition","overrides":{"id":2744,"nodeType":"OverrideSpecifier","overrides":[],"src":"51078:8:0"},"parameters":{"id":2743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2740,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":2846,"src":"51041:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2739,"name":"address","nodeType":"ElementaryTypeName","src":"51041:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2742,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":2846,"src":"51053:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2741,"name":"uint256","nodeType":"ElementaryTypeName","src":"51053:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"51040:28:0"},"returnParameters":{"id":2745,"nodeType":"ParameterList","parameters":[],"src":"51087:0:0"},"scope":3650,"src":"51025:971:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[950],"body":{"id":2874,"nodeType":"Block","src":"52155:192:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":2853,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"52179:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"52179:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":2852,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"52169:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"52169:21:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"52194:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"52169:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f42414c414e43455f4f4e5f434f4f4c444f574e","id":2858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"52197:29:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_e5f9ee9777b2bbd505a43328a4cc6b61e9df46610a556d5402b9bc072df973d7","typeString":"literal_string \"INVALID_BALANCE_ON_COOLDOWN\""},"value":"INVALID_BALANCE_ON_COOLDOWN"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e5f9ee9777b2bbd505a43328a4cc6b61e9df46610a556d5402b9bc072df973d7","typeString":"literal_string \"INVALID_BALANCE_ON_COOLDOWN\""}],"id":2851,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"52161:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"52161:66:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2860,"nodeType":"ExpressionStatement","src":"52161:66:0"},{"expression":{"id":2867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2861,"name":"stakersCooldowns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"52264:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2864,"indexExpression":{"expression":{"id":2862,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"52281:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"52281:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"52264:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2865,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"52295:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"52295:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"52264:46:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2868,"nodeType":"ExpressionStatement","src":"52264:46:0"},{"eventCall":{"arguments":[{"expression":{"id":2870,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"52331:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"52331:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":2869,"name":"Cooldown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2529,"src":"52322:8:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"52322:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2873,"nodeType":"EmitStatement","src":"52317:25:0"}]},"documentation":{"id":2847,"nodeType":"StructuredDocumentation","src":"52000:114:0","text":" @dev Activates the cooldown period to unstake\n - It can't be called if the user is not staking*"},"functionSelector":"787a08a6","id":2875,"implemented":true,"kind":"function","modifiers":[],"name":"cooldown","nodeType":"FunctionDefinition","overrides":{"id":2849,"nodeType":"OverrideSpecifier","overrides":[],"src":"52146:8:0"},"parameters":{"id":2848,"nodeType":"ParameterList","parameters":[],"src":"52134:2:0"},"returnParameters":{"id":2850,"nodeType":"ParameterList","parameters":[],"src":"52155:0:0"},"scope":3650,"src":"52117:230:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[957],"body":{"id":2936,"nodeType":"Block","src":"52570:422:0","statements":[{"assignments":[2885],"declarations":[{"constant":false,"id":2885,"mutability":"mutable","name":"newTotalRewards","nodeType":"VariableDeclaration","scope":2936,"src":"52576:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2884,"name":"uint256","nodeType":"ElementaryTypeName","src":"52576:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2895,"initialValue":{"arguments":[{"expression":{"id":2887,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"52639:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"52639:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"arguments":[{"expression":{"id":2890,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"52661:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"52661:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":2889,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"52651:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"52651:21:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":2893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"52674:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2886,"name":"_updateCurrentUnclaimedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"52608:30:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bool_$returns$_t_uint256_$","typeString":"function (address,uint256,bool) returns (uint256)"}},"id":2894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"52608:72:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"52576:104:0"},{"assignments":[2897],"declarations":[{"constant":false,"id":2897,"mutability":"mutable","name":"amountToClaim","nodeType":"VariableDeclaration","scope":2936,"src":"52686:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2896,"name":"uint256","nodeType":"ElementaryTypeName","src":"52686:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2909,"initialValue":{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2898,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"52711:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2901,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"52726:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2900,"name":"uint256","nodeType":"ElementaryTypeName","src":"52726:7:0","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":2899,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"52721:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"52721:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":2903,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"52721:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"52711:27:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2905,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"52710:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2907,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"52760:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"52710:56:0","trueExpression":{"id":2906,"name":"newTotalRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2885,"src":"52742:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"52686:80:0"},{"expression":{"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2910,"name":"stakerRewardsToClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2449,"src":"52773:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2913,"indexExpression":{"expression":{"id":2911,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"52794:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"52794:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"52773:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2916,"name":"amountToClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2897,"src":"52828:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"494e56414c49445f414d4f554e54","id":2917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"52843:16:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_eb6dbbf3194e9f4dd39c8dabe51ddb59ca6ad00c50b1bc74675ce4b263687722","typeString":"literal_string \"INVALID_AMOUNT\""},"value":"INVALID_AMOUNT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_eb6dbbf3194e9f4dd39c8dabe51ddb59ca6ad00c50b1bc74675ce4b263687722","typeString":"literal_string \"INVALID_AMOUNT\""}],"expression":{"id":2914,"name":"newTotalRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2885,"src":"52808:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":248,"src":"52808:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":2918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"52808:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"52773:87:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2920,"nodeType":"ExpressionStatement","src":"52773:87:0"},{"expression":{"arguments":[{"id":2924,"name":"REWARDS_VAULT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"52897:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2925,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"52912:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2926,"name":"amountToClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2897,"src":"52916:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2921,"name":"REWARD_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"52867:12:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$176","typeString":"contract IERC20"}},"id":2923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":1037,"src":"52867:29:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$176_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$176_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":2927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"52867:63:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2928,"nodeType":"ExpressionStatement","src":"52867:63:0"},{"eventCall":{"arguments":[{"expression":{"id":2930,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"52957:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"52957:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":2932,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"52969:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2933,"name":"amountToClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2897,"src":"52973:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2929,"name":"RewardsClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"52942:14:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"52942:45:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2935,"nodeType":"EmitStatement","src":"52937:50:0"}]},"documentation":{"id":2876,"nodeType":"StructuredDocumentation","src":"52351:148:0","text":" @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\n @param to Address to stake for\n @param amount Amount to stake*"},"functionSelector":"9a99b4f0","id":2937,"implemented":true,"kind":"function","modifiers":[],"name":"claimRewards","nodeType":"FunctionDefinition","overrides":{"id":2882,"nodeType":"OverrideSpecifier","overrides":[],"src":"52561:8:0"},"parameters":{"id":2881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2878,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":2937,"src":"52524:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2877,"name":"address","nodeType":"ElementaryTypeName","src":"52524:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2880,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":2937,"src":"52536:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2879,"name":"uint256","nodeType":"ElementaryTypeName","src":"52536:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"52523:28:0"},"returnParameters":{"id":2883,"nodeType":"ParameterList","parameters":[],"src":"52570:0:0"},"scope":3650,"src":"52502:490:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[754],"body":{"id":3017,"nodeType":"Block","src":"53288:727:0","statements":[{"assignments":[2949],"declarations":[{"constant":false,"id":2949,"mutability":"mutable","name":"balanceOfFrom","nodeType":"VariableDeclaration","scope":3017,"src":"53294:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2948,"name":"uint256","nodeType":"ElementaryTypeName","src":"53294:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2953,"initialValue":{"arguments":[{"id":2951,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"53328:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2950,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"53318:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"53318:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"53294:39:0"},{"expression":{"arguments":[{"id":2955,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"53384:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2956,"name":"balanceOfFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2949,"src":"53390:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":2957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"53405:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2954,"name":"_updateCurrentUnclaimedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"53353:30:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bool_$returns$_t_uint256_$","typeString":"function (address,uint256,bool) returns (uint256)"}},"id":2958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"53353:57:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2959,"nodeType":"ExpressionStatement","src":"53353:57:0"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2960,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"53438:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2961,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2942,"src":"53446:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"53438:10:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3008,"nodeType":"IfStatement","src":"53434:537:0","trueBody":{"id":3007,"nodeType":"Block","src":"53450:521:0","statements":[{"assignments":[2964],"declarations":[{"constant":false,"id":2964,"mutability":"mutable","name":"balanceOfTo","nodeType":"VariableDeclaration","scope":3007,"src":"53458:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2963,"name":"uint256","nodeType":"ElementaryTypeName","src":"53458:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2968,"initialValue":{"arguments":[{"id":2966,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2942,"src":"53490:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2965,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"53480:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"53480:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"53458:35:0"},{"expression":{"arguments":[{"id":2970,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2942,"src":"53532:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2971,"name":"balanceOfTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2964,"src":"53536:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":2972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"53549:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2969,"name":"_updateCurrentUnclaimedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"53501:30:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bool_$returns$_t_uint256_$","typeString":"function (address,uint256,bool) returns (uint256)"}},"id":2973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"53501:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2974,"nodeType":"ExpressionStatement","src":"53501:53:0"},{"assignments":[2976],"declarations":[{"constant":false,"id":2976,"mutability":"mutable","name":"previousSenderCooldown","nodeType":"VariableDeclaration","scope":3007,"src":"53563:30:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2975,"name":"uint256","nodeType":"ElementaryTypeName","src":"53563:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2980,"initialValue":{"baseExpression":{"id":2977,"name":"stakersCooldowns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"53596:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2979,"indexExpression":{"id":2978,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"53613:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"53596:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"53563:55:0"},{"expression":{"id":2990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2981,"name":"stakersCooldowns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"53626:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2983,"indexExpression":{"id":2982,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2942,"src":"53643:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"53626:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2985,"name":"previousSenderCooldown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2976,"src":"53683:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2986,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"53715:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2987,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2942,"src":"53731:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2988,"name":"balanceOfTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2964,"src":"53743:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2984,"name":"getNextCooldownTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3164,"src":"53649:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,address,uint256) view returns (uint256)"}},"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"53649:113:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"53626:136:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2991,"nodeType":"ExpressionStatement","src":"53626:136:0"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2992,"name":"balanceOfFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2949,"src":"53864:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2993,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"53881:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"53864:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2995,"name":"previousSenderCooldown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2976,"src":"53891:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2996,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"53917:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"53891:27:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"53864:54:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3006,"nodeType":"IfStatement","src":"53860:105:0","trueBody":{"id":3005,"nodeType":"Block","src":"53920:45:0","statements":[{"expression":{"id":3003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2999,"name":"stakersCooldowns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"53930:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3001,"indexExpression":{"id":3000,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"53947:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"53930:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"53955:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"53930:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3004,"nodeType":"ExpressionStatement","src":"53930:26:0"}]}}]}},{"expression":{"arguments":[{"id":3012,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"53993:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3013,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2942,"src":"53999:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3014,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"54003:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3009,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"53977:5:0","typeDescriptions":{"typeIdentifier":"t_super$_StakedTokenV2Rev3_$3650","typeString":"contract super StakedTokenV2Rev3"}},"id":3011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"_transfer","nodeType":"MemberAccess","referencedDeclaration":754,"src":"53977:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"53977:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3016,"nodeType":"ExpressionStatement","src":"53977:33:0"}]},"documentation":{"id":2938,"nodeType":"StructuredDocumentation","src":"52996:194:0","text":" @dev Internal ERC20 _transfer of the tokenized staked tokens\n @param from Address to transfer from\n @param to Address to transfer to\n @param amount Amount to transfer*"},"id":3018,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nodeType":"FunctionDefinition","overrides":{"id":2946,"nodeType":"OverrideSpecifier","overrides":[],"src":"53279:8:0"},"parameters":{"id":2945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2940,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":3018,"src":"53217:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2939,"name":"address","nodeType":"ElementaryTypeName","src":"53217:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2942,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":3018,"src":"53235:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2941,"name":"address","nodeType":"ElementaryTypeName","src":"53235:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2944,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":3018,"src":"53251:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2943,"name":"uint256","nodeType":"ElementaryTypeName","src":"53251:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"53211:58:0"},"returnParameters":{"id":2947,"nodeType":"ParameterList","parameters":[],"src":"53288:0:0"},"scope":3650,"src":"53193:822:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3073,"nodeType":"Block","src":"54499:401:0","statements":[{"assignments":[3031],"declarations":[{"constant":false,"id":3031,"mutability":"mutable","name":"accruedRewards","nodeType":"VariableDeclaration","scope":3073,"src":"54505:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3030,"name":"uint256","nodeType":"ElementaryTypeName","src":"54505:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3042,"initialValue":{"arguments":[{"id":3033,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3021,"src":"54561:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3036,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"54575:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_StakedTokenV2Rev3_$3650","typeString":"contract StakedTokenV2Rev3"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_StakedTokenV2Rev3_$3650","typeString":"contract StakedTokenV2Rev3"}],"id":3035,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"54567:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3034,"name":"address","nodeType":"ElementaryTypeName","src":"54567:7:0","typeDescriptions":{}}},"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"54567:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3038,"name":"userBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3023,"src":"54582:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3039,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"54595:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":3040,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"54595:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3032,"name":"_updateUserAssetInternal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"54536:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,uint256,uint256) returns (uint256)"}},"id":3041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"54536:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"54505:104:0"},{"assignments":[3044],"declarations":[{"constant":false,"id":3044,"mutability":"mutable","name":"unclaimedRewards","nodeType":"VariableDeclaration","scope":3073,"src":"54615:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3043,"name":"uint256","nodeType":"ElementaryTypeName","src":"54615:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3051,"initialValue":{"arguments":[{"id":3049,"name":"accruedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"54673:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":3045,"name":"stakerRewardsToClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2449,"src":"54642:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3047,"indexExpression":{"id":3046,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3021,"src":"54663:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"54642:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":203,"src":"54642:30:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"54642:46:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"54615:73:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3052,"name":"accruedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"54699:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"54717:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"54699:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3070,"nodeType":"IfStatement","src":"54695:171:0","trueBody":{"id":3069,"nodeType":"Block","src":"54720:146:0","statements":[{"condition":{"id":3055,"name":"updateStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"54732:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3063,"nodeType":"IfStatement","src":"54728:83:0","trueBody":{"id":3062,"nodeType":"Block","src":"54747:64:0","statements":[{"expression":{"id":3060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3056,"name":"stakerRewardsToClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2449,"src":"54757:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3058,"indexExpression":{"id":3057,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3021,"src":"54778:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"54757:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3059,"name":"unclaimedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"54786:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"54757:45:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3061,"nodeType":"ExpressionStatement","src":"54757:45:0"}]}},{"eventCall":{"arguments":[{"id":3065,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3021,"src":"54838:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3066,"name":"accruedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"54844:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3064,"name":"RewardsAccrued","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"54823:14:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"54823:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3068,"nodeType":"EmitStatement","src":"54818:41:0"}]}},{"expression":{"id":3071,"name":"unclaimedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"54879:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3029,"id":3072,"nodeType":"Return","src":"54872:23:0"}]},"documentation":{"id":3019,"nodeType":"StructuredDocumentation","src":"54019:339:0","text":" @dev Updates the user state related with his accrued rewards\n @param user Address of the user\n @param userBalance The current balance of the user\n @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\n @return The unclaimed rewards that were added to the total accrued*"},"id":3074,"implemented":true,"kind":"function","modifiers":[],"name":"_updateCurrentUnclaimedRewards","nodeType":"FunctionDefinition","parameters":{"id":3026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3021,"mutability":"mutable","name":"user","nodeType":"VariableDeclaration","scope":3074,"src":"54406:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3020,"name":"address","nodeType":"ElementaryTypeName","src":"54406:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3023,"mutability":"mutable","name":"userBalance","nodeType":"VariableDeclaration","scope":3074,"src":"54424:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3022,"name":"uint256","nodeType":"ElementaryTypeName","src":"54424:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3025,"mutability":"mutable","name":"updateStorage","nodeType":"VariableDeclaration","scope":3074,"src":"54449:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3024,"name":"bool","nodeType":"ElementaryTypeName","src":"54449:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"54400:71:0"},"returnParameters":{"id":3029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3028,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3074,"src":"54490:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3027,"name":"uint256","nodeType":"ElementaryTypeName","src":"54490:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"54489:9:0"},"scope":3650,"src":"54361:539:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3163,"nodeType":"Block","src":"55868:847:0","statements":[{"assignments":[3089],"declarations":[{"constant":false,"id":3089,"mutability":"mutable","name":"toCooldownTimestamp","nodeType":"VariableDeclaration","scope":3163,"src":"55874:27:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3088,"name":"uint256","nodeType":"ElementaryTypeName","src":"55874:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3093,"initialValue":{"baseExpression":{"id":3090,"name":"stakersCooldowns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"55904:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3092,"indexExpression":{"id":3091,"name":"toAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3081,"src":"55921:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"55904:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"55874:57:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3094,"name":"toCooldownTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"55941:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"55964:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"55941:24:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3100,"nodeType":"IfStatement","src":"55937:53:0","trueBody":{"id":3099,"nodeType":"Block","src":"55967:23:0","statements":[{"expression":{"hexValue":"30","id":3097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"55982:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3087,"id":3098,"nodeType":"Return","src":"55975:8:0"}]}},{"assignments":[3102],"declarations":[{"constant":false,"id":3102,"mutability":"mutable","name":"minimalValidCooldownTimestamp","nodeType":"VariableDeclaration","scope":3163,"src":"55996:37:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3101,"name":"uint256","nodeType":"ElementaryTypeName","src":"55996:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3111,"initialValue":{"arguments":[{"id":3109,"name":"UNSTAKE_WINDOW","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"56084:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3106,"name":"COOLDOWN_SECONDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"56062:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":3103,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"56042:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"56042:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":220,"src":"56042:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"56042:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":220,"src":"56042:41:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"56042:57:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"55996:103:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3112,"name":"minimalValidCooldownTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"56110:29:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3113,"name":"toCooldownTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"56142:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"56110:51:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3159,"nodeType":"Block","src":"56207:472:0","statements":[{"assignments":[3121],"declarations":[{"constant":false,"id":3121,"mutability":"mutable","name":"fromCooldownTimestamp","nodeType":"VariableDeclaration","scope":3159,"src":"56215:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3120,"name":"uint256","nodeType":"ElementaryTypeName","src":"56215:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3130,"initialValue":{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3122,"name":"minimalValidCooldownTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"56256:29:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3123,"name":"fromCooldownTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"56288:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"56256:53:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3125,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"56255:55:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3128,"name":"fromCooldownTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"56351:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"56255:117:0","trueExpression":{"expression":{"id":3126,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"56323:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"56323:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"56215:157:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3131,"name":"fromCooldownTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"56385:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3132,"name":"toCooldownTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"56409:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"56385:43:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3157,"nodeType":"Block","src":"56481:192:0","statements":[{"expression":{"id":3155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3137,"name":"toCooldownTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"56491:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":3152,"name":"toBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3083,"src":"56653:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3150,"name":"amountToReceive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3079,"src":"56633:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":203,"src":"56633:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"56633:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"components":[{"arguments":[{"arguments":[{"id":3145,"name":"toCooldownTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"56586:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3143,"name":"toBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3083,"src":"56572:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":283,"src":"56572:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"56572:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3140,"name":"fromCooldownTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"56545:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3138,"name":"amountToReceive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3079,"src":"56525:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":283,"src":"56525:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"56525:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":203,"src":"56525:46:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"56525:82:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3148,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"56513:104:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":300,"src":"56513:119:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"56513:151:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"56491:173:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3156,"nodeType":"ExpressionStatement","src":"56491:173:0"}]},"id":3158,"nodeType":"IfStatement","src":"56381:292:0","trueBody":{"id":3136,"nodeType":"Block","src":"56430:45:0","statements":[{"expression":{"id":3134,"name":"toCooldownTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"56447:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3087,"id":3135,"nodeType":"Return","src":"56440:26:0"}]}}]},"id":3160,"nodeType":"IfStatement","src":"56106:573:0","trueBody":{"id":3119,"nodeType":"Block","src":"56163:38:0","statements":[{"expression":{"id":3117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3115,"name":"toCooldownTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"56171:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"56193:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"56171:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3118,"nodeType":"ExpressionStatement","src":"56171:23:0"}]}},{"expression":{"id":3161,"name":"toCooldownTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"56691:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3087,"id":3162,"nodeType":"Return","src":"56684:26:0"}]},"documentation":{"id":3075,"nodeType":"StructuredDocumentation","src":"54904:783:0","text":" @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\n  - If the timestamp of the sender is \"better\" or the timestamp of the recipient is 0, we take the one of the recipient\n  - Weighted average of from/to cooldown timestamps if:\n    # The sender doesn't have the cooldown activated (timestamp 0).\n    # The sender timestamp is expired\n    # The sender has a \"worse\" timestamp\n  - If the receiver's cooldown timestamp expired (too old), the next is 0\n @param fromCooldownTimestamp Cooldown timestamp of the sender\n @param amountToReceive Amount\n @param toAddress Address of the recipient\n @param toBalance Current balance of the receiver\n @return The new cooldown timestamp*"},"functionSelector":"f1cc432a","id":3164,"implemented":true,"kind":"function","modifiers":[],"name":"getNextCooldownTimestamp","nodeType":"FunctionDefinition","parameters":{"id":3084,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3077,"mutability":"mutable","name":"fromCooldownTimestamp","nodeType":"VariableDeclaration","scope":3164,"src":"55729:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3076,"name":"uint256","nodeType":"ElementaryTypeName","src":"55729:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3079,"mutability":"mutable","name":"amountToReceive","nodeType":"VariableDeclaration","scope":3164,"src":"55764:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3078,"name":"uint256","nodeType":"ElementaryTypeName","src":"55764:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3081,"mutability":"mutable","name":"toAddress","nodeType":"VariableDeclaration","scope":3164,"src":"55793:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3080,"name":"address","nodeType":"ElementaryTypeName","src":"55793:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3083,"mutability":"mutable","name":"toBalance","nodeType":"VariableDeclaration","scope":3164,"src":"55816:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3082,"name":"uint256","nodeType":"ElementaryTypeName","src":"55816:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"55723:114:0"},"returnParameters":{"id":3087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3086,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3164,"src":"55859:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3085,"name":"uint256","nodeType":"ElementaryTypeName","src":"55859:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"55858:9:0"},"scope":3650,"src":"55690:1025:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3210,"nodeType":"Block","src":"56939:388:0","statements":[{"assignments":[3176],"declarations":[{"constant":false,"id":3176,"mutability":"mutable","name":"userStakeInputs","nodeType":"VariableDeclaration","scope":3210,"src":"56945:57:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserStakeInput_$982_memory_ptr_$dyn_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput[]"},"typeName":{"baseType":{"id":3174,"name":"DistributionTypes.UserStakeInput","nodeType":"UserDefinedTypeName","referencedDeclaration":982,"src":"56945:32:0","typeDescriptions":{"typeIdentifier":"t_struct$_UserStakeInput_$982_storage_ptr","typeString":"struct DistributionTypes.UserStakeInput"}},"id":3175,"nodeType":"ArrayTypeName","src":"56945:34:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserStakeInput_$982_storage_$dyn_storage_ptr","typeString":"struct DistributionTypes.UserStakeInput[]"}},"visibility":"internal"}],"id":3182,"initialValue":{"arguments":[{"hexValue":"31","id":3180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"57050:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":3179,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"57011:38:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_UserStakeInput_$982_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct DistributionTypes.UserStakeInput memory[] memory)"},"typeName":{"baseType":{"id":3177,"name":"DistributionTypes.UserStakeInput","nodeType":"UserDefinedTypeName","referencedDeclaration":982,"src":"57015:32:0","typeDescriptions":{"typeIdentifier":"t_struct$_UserStakeInput_$982_storage_ptr","typeString":"struct DistributionTypes.UserStakeInput"}},"id":3178,"nodeType":"ArrayTypeName","src":"57015:34:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserStakeInput_$982_storage_$dyn_storage_ptr","typeString":"struct DistributionTypes.UserStakeInput[]"}}},"id":3181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"57011:41:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserStakeInput_$982_memory_ptr_$dyn_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"56945:107:0"},{"expression":{"id":3198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3183,"name":"userStakeInputs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3176,"src":"57058:15:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserStakeInput_$982_memory_ptr_$dyn_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput memory[] memory"}},"id":3185,"indexExpression":{"hexValue":"30","id":3184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"57074:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"57058:18:0","typeDescriptions":{"typeIdentifier":"t_struct$_UserStakeInput_$982_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":3190,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"57145:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_StakedTokenV2Rev3_$3650","typeString":"contract StakedTokenV2Rev3"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_StakedTokenV2Rev3_$3650","typeString":"contract StakedTokenV2Rev3"}],"id":3189,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"57137:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3188,"name":"address","nodeType":"ElementaryTypeName","src":"57137:7:0","typeDescriptions":{}}},"id":3191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"57137:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3193,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3167,"src":"57182:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3192,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"57172:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":3194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"57172:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3195,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"57210:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":3196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"57210:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3186,"name":"DistributionTypes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"57079:17:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_DistributionTypes_$983_$","typeString":"type(library DistributionTypes)"}},"id":3187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"UserStakeInput","nodeType":"MemberAccess","referencedDeclaration":982,"src":"57079:32:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_UserStakeInput_$982_storage_ptr_$","typeString":"type(struct DistributionTypes.UserStakeInput storage pointer)"}},"id":3197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["underlyingAsset","stakedByUser","totalStaked"],"nodeType":"FunctionCall","src":"57079:151:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_UserStakeInput_$982_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput memory"}},"src":"57058:172:0","typeDescriptions":{"typeIdentifier":"t_struct$_UserStakeInput_$982_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput memory"}},"id":3199,"nodeType":"ExpressionStatement","src":"57058:172:0"},{"expression":{"arguments":[{"arguments":[{"id":3205,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3167,"src":"57297:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3206,"name":"userStakeInputs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3176,"src":"57305:15:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserStakeInput_$982_memory_ptr_$dyn_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput memory[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_struct$_UserStakeInput_$982_memory_ptr_$dyn_memory_ptr","typeString":"struct DistributionTypes.UserStakeInput memory[] memory"}],"id":3204,"name":"_getUnclaimedRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"57276:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_array$_t_struct$_UserStakeInput_$982_memory_ptr_$dyn_memory_ptr_$returns$_t_uint256_$","typeString":"function (address,struct DistributionTypes.UserStakeInput memory[] memory) view returns (uint256)"}},"id":3207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"57276:45:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":3200,"name":"stakerRewardsToClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2449,"src":"57243:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3202,"indexExpression":{"id":3201,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3167,"src":"57264:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"57243:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":203,"src":"57243:32:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"57243:79:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3171,"id":3209,"nodeType":"Return","src":"57236:86:0"}]},"documentation":{"id":3165,"nodeType":"StructuredDocumentation","src":"56719:137:0","text":" @dev Return the total rewards pending to claim by an staker\n @param staker The staker address\n @return The rewards"},"functionSelector":"8dbefee2","id":3211,"implemented":true,"kind":"function","modifiers":[],"name":"getTotalRewardsBalance","nodeType":"FunctionDefinition","parameters":{"id":3168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3167,"mutability":"mutable","name":"staker","nodeType":"VariableDeclaration","scope":3211,"src":"56891:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3166,"name":"address","nodeType":"ElementaryTypeName","src":"56891:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"56890:16:0"},"returnParameters":{"id":3171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3170,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3211,"src":"56930:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3169,"name":"uint256","nodeType":"ElementaryTypeName","src":"56930:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"56929:9:0"},"scope":3650,"src":"56859:468:0","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1164],"body":{"id":3220,"nodeType":"Block","src":"57495:26:0","statements":[{"expression":{"id":3218,"name":"REVISION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2433,"src":"57508:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3217,"id":3219,"nodeType":"Return","src":"57501:15:0"}]},"documentation":{"id":3212,"nodeType":"StructuredDocumentation","src":"57331:97:0","text":" @dev returns the revision of the implementation contract\n @return The revision"},"id":3221,"implemented":true,"kind":"function","modifiers":[],"name":"getRevision","nodeType":"FunctionDefinition","overrides":{"id":3214,"nodeType":"OverrideSpecifier","overrides":[],"src":"57468:8:0"},"parameters":{"id":3213,"nodeType":"ParameterList","parameters":[],"src":"57451:2:0"},"returnParameters":{"id":3217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3216,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3221,"src":"57486:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3215,"name":"uint256","nodeType":"ElementaryTypeName","src":"57486:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"57485:9:0"},"scope":3650,"src":"57431:90:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3311,"nodeType":"Block","src":"58106:589:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3240,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3224,"src":"58120:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"58137:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3242,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"58129:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3241,"name":"address","nodeType":"ElementaryTypeName","src":"58129:7:0","typeDescriptions":{}}},"id":3244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"58129:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"58120:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f4f574e4552","id":3246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"58141:15:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_a30e2b4f22d955e30086ae3aef0adfd87eec9d0d3f055d6aa9af61f522dda886","typeString":"literal_string \"INVALID_OWNER\""},"value":"INVALID_OWNER"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a30e2b4f22d955e30086ae3aef0adfd87eec9d0d3f055d6aa9af61f522dda886","typeString":"literal_string \"INVALID_OWNER\""}],"id":3239,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"58112:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"58112:45:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3248,"nodeType":"ExpressionStatement","src":"58112:45:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3250,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"58202:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"58202:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3252,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3230,"src":"58221:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"58202:27:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f45585049524154494f4e","id":3254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"58231:20:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fe3e5cf49f72bf8a6a8455c3e990f8479f5dfa09ac808886f330a39b0029c2d","typeString":"literal_string \"INVALID_EXPIRATION\""},"value":"INVALID_EXPIRATION"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9fe3e5cf49f72bf8a6a8455c3e990f8479f5dfa09ac808886f330a39b0029c2d","typeString":"literal_string \"INVALID_EXPIRATION\""}],"id":3249,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"58194:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"58194:58:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3256,"nodeType":"ExpressionStatement","src":"58194:58:0"},{"assignments":[3258],"declarations":[{"constant":false,"id":3258,"mutability":"mutable","name":"currentValidNonce","nodeType":"VariableDeclaration","scope":3311,"src":"58258:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3257,"name":"uint256","nodeType":"ElementaryTypeName","src":"58258:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3262,"initialValue":{"baseExpression":{"id":3259,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2495,"src":"58286:7:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3261,"indexExpression":{"id":3260,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3224,"src":"58294:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"58286:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"58258:42:0"},{"assignments":[3264],"declarations":[{"constant":false,"id":3264,"mutability":"mutable","name":"digest","nodeType":"VariableDeclaration","scope":3311,"src":"58306:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3263,"name":"bytes32","nodeType":"ElementaryTypeName","src":"58306:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3283,"initialValue":{"arguments":[{"arguments":[{"hexValue":"1901","id":3268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"58376:10:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},"value":"\u0019\u0001"},{"id":3269,"name":"DOMAIN_SEPARATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"58398:16:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"arguments":[{"id":3273,"name":"PERMIT_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"58447:15:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3274,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3224,"src":"58464:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3275,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3226,"src":"58471:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3276,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3228,"src":"58480:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3277,"name":"currentValidNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3258,"src":"58487:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3278,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3230,"src":"58506:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3271,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"58436:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3272,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"58436:10:0","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"58436:79:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3270,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"58426:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"58426:90:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3266,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"58348:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"58348:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"58348:178:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3265,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"58329:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"58329:205:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"58306:228:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3285,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3224,"src":"58549:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":3287,"name":"digest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"58568:6:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3288,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3232,"src":"58576:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3289,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3234,"src":"58579:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3290,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3236,"src":"58582:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3286,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"58558:9:0","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":3291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"58558:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"58549:35:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f5349474e4154555245","id":3293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"58586:19:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_5e2e9eaa2d734966dea0900deacd15b20129fbce05255d633a3ce5ebca181b88","typeString":"literal_string \"INVALID_SIGNATURE\""},"value":"INVALID_SIGNATURE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5e2e9eaa2d734966dea0900deacd15b20129fbce05255d633a3ce5ebca181b88","typeString":"literal_string \"INVALID_SIGNATURE\""}],"id":3284,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"58541:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"58541:65:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3295,"nodeType":"ExpressionStatement","src":"58541:65:0"},{"expression":{"id":3303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3296,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2495,"src":"58612:7:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3298,"indexExpression":{"id":3297,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3224,"src":"58620:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"58612:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"31","id":3301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"58651:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":3299,"name":"currentValidNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3258,"src":"58629:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":203,"src":"58629:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"58629:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"58612:41:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3304,"nodeType":"ExpressionStatement","src":"58612:41:0"},{"expression":{"arguments":[{"id":3306,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3224,"src":"58668:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3307,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3226,"src":"58675:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3308,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3228,"src":"58684:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3305,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"58659:8:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"58659:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3310,"nodeType":"ExpressionStatement","src":"58659:31:0"}]},"documentation":{"id":3222,"nodeType":"StructuredDocumentation","src":"57525:424:0","text":" @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\n @param owner the owner of the funds\n @param spender the spender\n @param value the amount\n @param deadline the deadline timestamp, type(uint256).max for no deadline\n @param v signature param\n @param s signature param\n @param r signature param"},"functionSelector":"d505accf","id":3312,"implemented":true,"kind":"function","modifiers":[],"name":"permit","nodeType":"FunctionDefinition","parameters":{"id":3237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3224,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":3312,"src":"57974:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3223,"name":"address","nodeType":"ElementaryTypeName","src":"57974:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3226,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":3312,"src":"57993:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3225,"name":"address","nodeType":"ElementaryTypeName","src":"57993:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3228,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":3312,"src":"58014:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3227,"name":"uint256","nodeType":"ElementaryTypeName","src":"58014:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3230,"mutability":"mutable","name":"deadline","nodeType":"VariableDeclaration","scope":3312,"src":"58033:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3229,"name":"uint256","nodeType":"ElementaryTypeName","src":"58033:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3232,"mutability":"mutable","name":"v","nodeType":"VariableDeclaration","scope":3312,"src":"58055:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3231,"name":"uint8","nodeType":"ElementaryTypeName","src":"58055:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3234,"mutability":"mutable","name":"r","nodeType":"VariableDeclaration","scope":3312,"src":"58068:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3233,"name":"bytes32","nodeType":"ElementaryTypeName","src":"58068:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3236,"mutability":"mutable","name":"s","nodeType":"VariableDeclaration","scope":3312,"src":"58083:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3235,"name":"bytes32","nodeType":"ElementaryTypeName","src":"58083:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"57968:128:0"},"returnParameters":{"id":3238,"nodeType":"ParameterList","parameters":[],"src":"58106:0:0"},"scope":3650,"src":"57953:742:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[932],"body":{"id":3430,"nodeType":"Block","src":"59156:1106:0","statements":[{"assignments":[3324],"declarations":[{"constant":false,"id":3324,"mutability":"mutable","name":"votingFromDelegatee","nodeType":"VariableDeclaration","scope":3430,"src":"59162:27:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3323,"name":"address","nodeType":"ElementaryTypeName","src":"59162:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3328,"initialValue":{"baseExpression":{"id":3325,"name":"_votingDelegates","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"59192:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":3327,"indexExpression":{"id":3326,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3315,"src":"59209:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"59192:22:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"59162:52:0"},{"assignments":[3330],"declarations":[{"constant":false,"id":3330,"mutability":"mutable","name":"votingToDelegatee","nodeType":"VariableDeclaration","scope":3430,"src":"59220:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3329,"name":"address","nodeType":"ElementaryTypeName","src":"59220:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3334,"initialValue":{"baseExpression":{"id":3331,"name":"_votingDelegates","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"59248:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":3333,"indexExpression":{"id":3332,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3317,"src":"59265:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"59248:20:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"59220:48:0"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3335,"name":"votingFromDelegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3324,"src":"59279:19:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"59310:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3337,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"59302:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3336,"name":"address","nodeType":"ElementaryTypeName","src":"59302:7:0","typeDescriptions":{}}},"id":3339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"59302:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"59279:33:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3346,"nodeType":"IfStatement","src":"59275:80:0","trueBody":{"id":3345,"nodeType":"Block","src":"59314:41:0","statements":[{"expression":{"id":3343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3341,"name":"votingFromDelegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3324,"src":"59322:19:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3342,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3315,"src":"59344:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"59322:26:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3344,"nodeType":"ExpressionStatement","src":"59322:26:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3347,"name":"votingToDelegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3330,"src":"59364:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"59393:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3349,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"59385:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3348,"name":"address","nodeType":"ElementaryTypeName","src":"59385:7:0","typeDescriptions":{}}},"id":3351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"59385:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"59364:31:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3358,"nodeType":"IfStatement","src":"59360:74:0","trueBody":{"id":3357,"nodeType":"Block","src":"59397:37:0","statements":[{"expression":{"id":3355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3353,"name":"votingToDelegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3330,"src":"59405:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3354,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3317,"src":"59425:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"59405:22:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3356,"nodeType":"ExpressionStatement","src":"59405:22:0"}]}},{"expression":{"arguments":[{"id":3360,"name":"votingFromDelegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3324,"src":"59468:19:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3361,"name":"votingToDelegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3330,"src":"59495:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3362,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"59520:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3363,"name":"DelegationType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"59534:14:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_DelegationType_$5_$","typeString":"type(enum IGovernancePowerDelegationToken.DelegationType)"}},"id":3364,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"VOTING_POWER","nodeType":"MemberAccess","src":"59534:27:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}],"id":3359,"name":"_moveDelegatesByType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"59440:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_enum$_DelegationType_$5_$returns$__$","typeString":"function (address,address,uint256,enum IGovernancePowerDelegationToken.DelegationType)"}},"id":3365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"59440:127:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3366,"nodeType":"ExpressionStatement","src":"59440:127:0"},{"assignments":[3368],"declarations":[{"constant":false,"id":3368,"mutability":"mutable","name":"propPowerFromDelegatee","nodeType":"VariableDeclaration","scope":3430,"src":"59574:30:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3367,"name":"address","nodeType":"ElementaryTypeName","src":"59574:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3372,"initialValue":{"baseExpression":{"id":3369,"name":"_propositionPowerDelegates","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"59607:26:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":3371,"indexExpression":{"id":3370,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3315,"src":"59634:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"59607:32:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"59574:65:0"},{"assignments":[3374],"declarations":[{"constant":false,"id":3374,"mutability":"mutable","name":"propPowerToDelegatee","nodeType":"VariableDeclaration","scope":3430,"src":"59645:28:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3373,"name":"address","nodeType":"ElementaryTypeName","src":"59645:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3378,"initialValue":{"baseExpression":{"id":3375,"name":"_propositionPowerDelegates","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"59676:26:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":3377,"indexExpression":{"id":3376,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3317,"src":"59703:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"59676:30:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"59645:61:0"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3379,"name":"propPowerFromDelegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3368,"src":"59717:22:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"59751:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3381,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"59743:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3380,"name":"address","nodeType":"ElementaryTypeName","src":"59743:7:0","typeDescriptions":{}}},"id":3383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"59743:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"59717:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3390,"nodeType":"IfStatement","src":"59713:86:0","trueBody":{"id":3389,"nodeType":"Block","src":"59755:44:0","statements":[{"expression":{"id":3387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3385,"name":"propPowerFromDelegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3368,"src":"59763:22:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3386,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3315,"src":"59788:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"59763:29:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3388,"nodeType":"ExpressionStatement","src":"59763:29:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3391,"name":"propPowerToDelegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3374,"src":"59808:20:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"59840:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3393,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"59832:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3392,"name":"address","nodeType":"ElementaryTypeName","src":"59832:7:0","typeDescriptions":{}}},"id":3395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"59832:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"59808:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3402,"nodeType":"IfStatement","src":"59804:80:0","trueBody":{"id":3401,"nodeType":"Block","src":"59844:40:0","statements":[{"expression":{"id":3399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3397,"name":"propPowerToDelegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3374,"src":"59852:20:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3398,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3317,"src":"59875:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"59852:25:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3400,"nodeType":"ExpressionStatement","src":"59852:25:0"}]}},{"expression":{"arguments":[{"id":3404,"name":"propPowerFromDelegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3368,"src":"59918:22:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3405,"name":"propPowerToDelegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3374,"src":"59948:20:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3406,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"59976:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3407,"name":"DelegationType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"59990:14:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_DelegationType_$5_$","typeString":"type(enum IGovernancePowerDelegationToken.DelegationType)"}},"id":3408,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"PROPOSITION_POWER","nodeType":"MemberAccess","src":"59990:32:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}],"id":3403,"name":"_moveDelegatesByType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"59890:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_enum$_DelegationType_$5_$returns$__$","typeString":"function (address,address,uint256,enum IGovernancePowerDelegationToken.DelegationType)"}},"id":3409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"59890:138:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3410,"nodeType":"ExpressionStatement","src":"59890:138:0"},{"assignments":[3412],"declarations":[{"constant":false,"id":3412,"mutability":"mutable","name":"aaveGovernance","nodeType":"VariableDeclaration","scope":3430,"src":"60108:28:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITransferHook_$968","typeString":"contract ITransferHook"},"typeName":{"id":3411,"name":"ITransferHook","nodeType":"UserDefinedTypeName","referencedDeclaration":968,"src":"60108:13:0","typeDescriptions":{"typeIdentifier":"t_contract$_ITransferHook_$968","typeString":"contract ITransferHook"}},"visibility":"internal"}],"id":3414,"initialValue":{"id":3413,"name":"_aaveGovernance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"60139:15:0","typeDescriptions":{"typeIdentifier":"t_contract$_ITransferHook_$968","typeString":"contract ITransferHook"}},"nodeType":"VariableDeclarationStatement","src":"60108:46:0"},{"condition":{"commonType":{"typeIdentifier":"t_contract$_ITransferHook_$968","typeString":"contract ITransferHook"},"id":3419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3415,"name":"aaveGovernance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3412,"src":"60164:14:0","typeDescriptions":{"typeIdentifier":"t_contract$_ITransferHook_$968","typeString":"contract ITransferHook"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"60196:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3416,"name":"ITransferHook","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":968,"src":"60182:13:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ITransferHook_$968_$","typeString":"type(contract ITransferHook)"}},"id":3418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"60182:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ITransferHook_$968","typeString":"contract ITransferHook"}},"src":"60164:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3429,"nodeType":"IfStatement","src":"60160:98:0","trueBody":{"id":3428,"nodeType":"Block","src":"60200:58:0","statements":[{"expression":{"arguments":[{"id":3423,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3315,"src":"60234:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3424,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3317,"src":"60240:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3425,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"60244:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3420,"name":"aaveGovernance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3412,"src":"60208:14:0","typeDescriptions":{"typeIdentifier":"t_contract$_ITransferHook_$968","typeString":"contract ITransferHook"}},"id":3422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"onTransfer","nodeType":"MemberAccess","referencedDeclaration":967,"src":"60208:25:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) external"}},"id":3426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"60208:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3427,"nodeType":"ExpressionStatement","src":"60208:43:0"}]}}]},"documentation":{"id":3313,"nodeType":"StructuredDocumentation","src":"58699:348:0","text":" @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\n - On _transfer, it writes snapshots for both \"from\" and \"to\"\n - On _mint, only for _to\n - On _burn, only for _from\n @param from the from address\n @param to the to address\n @param amount the amount to transfer"},"id":3431,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nodeType":"FunctionDefinition","overrides":{"id":3321,"nodeType":"OverrideSpecifier","overrides":[],"src":"59147:8:0"},"parameters":{"id":3320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3315,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":3431,"src":"59085:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3314,"name":"address","nodeType":"ElementaryTypeName","src":"59085:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3317,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":3431,"src":"59103:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3316,"name":"address","nodeType":"ElementaryTypeName","src":"59103:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3319,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":3431,"src":"59119:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3318,"name":"uint256","nodeType":"ElementaryTypeName","src":"59119:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"59079:58:0"},"returnParameters":{"id":3322,"nodeType":"ParameterList","parameters":[],"src":"59156:0:0"},"scope":3650,"src":"59050:1212:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2267],"body":{"id":3468,"nodeType":"Block","src":"60585:293:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"},"id":3454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3451,"name":"delegationType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3433,"src":"60595:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3452,"name":"DelegationType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"60613:14:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_DelegationType_$5_$","typeString":"type(enum IGovernancePowerDelegationToken.DelegationType)"}},"id":3453,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"VOTING_POWER","nodeType":"MemberAccess","src":"60613:27:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}},"src":"60595:45:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3466,"nodeType":"Block","src":"60730:144:0","statements":[{"expression":{"components":[{"id":3461,"name":"_propositionPowerSnapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"60755:26:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref))"}},{"id":3462,"name":"_propositionPowerSnapshotsCounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"60791:32:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},{"id":3463,"name":"_propositionPowerDelegates","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"60833:26:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}}],"id":3464,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"60745:122:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$_$_t_mapping$_t_address_$_t_uint256_$_$_t_mapping$_t_address_$_t_address_$_$","typeString":"tuple(mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)),mapping(address => uint256),mapping(address => address))"}},"functionReturnParameters":3450,"id":3465,"nodeType":"Return","src":"60738:129:0"}]},"id":3467,"nodeType":"IfStatement","src":"60591:283:0","trueBody":{"id":3460,"nodeType":"Block","src":"60642:82:0","statements":[{"expression":{"components":[{"id":3455,"name":"_votingSnapshots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2396,"src":"60658:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref))"}},{"id":3456,"name":"_votingSnapshotsCounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2400,"src":"60676:22:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},{"id":3457,"name":"_votingDelegates","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"60700:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}}],"id":3458,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"60657:60:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$_$_t_mapping$_t_address_$_t_uint256_$_$_t_mapping$_t_address_$_t_address_$_$","typeString":"tuple(mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot storage ref)),mapping(address => uint256),mapping(address => address))"}},"functionReturnParameters":3450,"id":3459,"nodeType":"Return","src":"60650:67:0"}]}}]},"id":3469,"implemented":true,"kind":"function","modifiers":[],"name":"_getDelegationDataByType","nodeType":"FunctionDefinition","overrides":{"id":3435,"nodeType":"OverrideSpecifier","overrides":[],"src":"60357:8:0"},"parameters":{"id":3434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3433,"mutability":"mutable","name":"delegationType","nodeType":"VariableDeclaration","scope":3469,"src":"60300:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"},"typeName":{"id":3432,"name":"DelegationType","nodeType":"UserDefinedTypeName","referencedDeclaration":5,"src":"60300:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}},"visibility":"internal"}],"src":"60299:31:0"},"returnParameters":{"id":3450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3441,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3469,"src":"60386:56:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot))"},"typeName":{"id":3440,"keyType":{"id":3436,"name":"address","nodeType":"ElementaryTypeName","src":"60394:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"60386:48:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot))"},"valueType":{"id":3439,"keyType":{"id":3437,"name":"uint256","nodeType":"ElementaryTypeName","src":"60413:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"60405:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Snapshot_$1726_storage_$","typeString":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot)"},"valueType":{"id":3438,"name":"Snapshot","nodeType":"UserDefinedTypeName","referencedDeclaration":1726,"src":"60424:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_Snapshot_$1726_storage_ptr","typeString":"struct GovernancePowerDelegationERC20.Snapshot"}}}},"visibility":"internal"},{"constant":false,"id":3445,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3469,"src":"60462:35:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":3444,"keyType":{"id":3442,"name":"address","nodeType":"ElementaryTypeName","src":"60470:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"60462:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":3443,"name":"uint256","nodeType":"ElementaryTypeName","src":"60481:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":3449,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3469,"src":"60523:35:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"typeName":{"id":3448,"keyType":{"id":3446,"name":"address","nodeType":"ElementaryTypeName","src":"60531:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"60523:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"valueType":{"id":3447,"name":"address","nodeType":"ElementaryTypeName","src":"60542:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"}],"src":"60378:204:0"},"scope":3650,"src":"60266:612:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3557,"nodeType":"Block","src":"61542:538:0","statements":[{"assignments":[3488],"declarations":[{"constant":false,"id":3488,"mutability":"mutable","name":"structHash","nodeType":"VariableDeclaration","scope":3557,"src":"61548:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3487,"name":"bytes32","nodeType":"ElementaryTypeName","src":"61548:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3502,"initialValue":{"arguments":[{"arguments":[{"id":3492,"name":"DELEGATE_BY_TYPE_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"61605:25:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3493,"name":"delegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3472,"src":"61632:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3496,"name":"delegationType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3474,"src":"61651:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}],"id":3495,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"61643:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3494,"name":"uint256","nodeType":"ElementaryTypeName","src":"61643:7:0","typeDescriptions":{}}},"id":3497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"61643:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3498,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"61668:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3499,"name":"expiry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3478,"src":"61675:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3490,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"61594:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3491,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"61594:10:0","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"61594:88:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3489,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"61575:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"61575:115:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"61548:142:0"},{"assignments":[3504],"declarations":[{"constant":false,"id":3504,"mutability":"mutable","name":"digest","nodeType":"VariableDeclaration","scope":3557,"src":"61696:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3503,"name":"bytes32","nodeType":"ElementaryTypeName","src":"61696:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3513,"initialValue":{"arguments":[{"arguments":[{"hexValue":"1901","id":3508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"61740:10:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},"value":"\u0019\u0001"},{"id":3509,"name":"DOMAIN_SEPARATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"61752:16:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3510,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3488,"src":"61770:10:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3506,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"61723:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3507,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"61723:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"61723:58:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3505,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"61713:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"61713:69:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"61696:86:0"},{"assignments":[3515],"declarations":[{"constant":false,"id":3515,"mutability":"mutable","name":"signatory","nodeType":"VariableDeclaration","scope":3557,"src":"61788:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3514,"name":"address","nodeType":"ElementaryTypeName","src":"61788:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3522,"initialValue":{"arguments":[{"id":3517,"name":"digest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3504,"src":"61818:6:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3518,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3480,"src":"61826:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3519,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3482,"src":"61829:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3520,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3484,"src":"61832:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3516,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"61808:9:0","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":3521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"61808:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"61788:46:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3524,"name":"signatory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3515,"src":"61848:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"61869:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3526,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"61861:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3525,"name":"address","nodeType":"ElementaryTypeName","src":"61861:7:0","typeDescriptions":{}}},"id":3528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"61861:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"61848:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f5349474e4154555245","id":3530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"61873:19:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_5e2e9eaa2d734966dea0900deacd15b20129fbce05255d633a3ce5ebca181b88","typeString":"literal_string \"INVALID_SIGNATURE\""},"value":"INVALID_SIGNATURE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5e2e9eaa2d734966dea0900deacd15b20129fbce05255d633a3ce5ebca181b88","typeString":"literal_string \"INVALID_SIGNATURE\""}],"id":3523,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"61840:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"61840:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3532,"nodeType":"ExpressionStatement","src":"61840:53:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3534,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"61907:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"61916:20:0","subExpression":{"baseExpression":{"id":3535,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2495,"src":"61916:7:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3537,"indexExpression":{"id":3536,"name":"signatory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3515,"src":"61924:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"61916:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"61907:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f4e4f4e4345","id":3540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"61938:15:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_a19e25beaf00f467d35fbe7e167b5794fca796dbfd417dd2accc8f5303300b99","typeString":"literal_string \"INVALID_NONCE\""},"value":"INVALID_NONCE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a19e25beaf00f467d35fbe7e167b5794fca796dbfd417dd2accc8f5303300b99","typeString":"literal_string \"INVALID_NONCE\""}],"id":3533,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"61899:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"61899:55:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3542,"nodeType":"ExpressionStatement","src":"61899:55:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3544,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"61968:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"61968:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3546,"name":"expiry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3478,"src":"61987:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"61968:25:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f45585049524154494f4e","id":3548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"61995:20:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fe3e5cf49f72bf8a6a8455c3e990f8479f5dfa09ac808886f330a39b0029c2d","typeString":"literal_string \"INVALID_EXPIRATION\""},"value":"INVALID_EXPIRATION"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9fe3e5cf49f72bf8a6a8455c3e990f8479f5dfa09ac808886f330a39b0029c2d","typeString":"literal_string \"INVALID_EXPIRATION\""}],"id":3543,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"61960:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"61960:56:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3550,"nodeType":"ExpressionStatement","src":"61960:56:0"},{"expression":{"arguments":[{"id":3552,"name":"signatory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3515,"src":"62038:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3553,"name":"delegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3472,"src":"62049:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3554,"name":"delegationType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3474,"src":"62060:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}],"id":3551,"name":"_delegateByType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"62022:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_enum$_DelegationType_$5_$returns$__$","typeString":"function (address,address,enum IGovernancePowerDelegationToken.DelegationType)"}},"id":3555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"62022:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3556,"nodeType":"ExpressionStatement","src":"62022:53:0"}]},"documentation":{"id":3470,"nodeType":"StructuredDocumentation","src":"60882:477:0","text":" @dev Delegates power from signatory to `delegatee`\n @param delegatee The address to delegate votes to\n @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\n @param nonce The contract state required to match the signature\n @param expiry The time at which to expire the signature\n @param v The recovery byte of the signature\n @param r Half of the ECDSA signature pair\n @param s Half of the ECDSA signature pair"},"functionSelector":"f713d8a8","id":3558,"implemented":true,"kind":"function","modifiers":[],"name":"delegateByTypeBySig","nodeType":"FunctionDefinition","parameters":{"id":3485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3472,"mutability":"mutable","name":"delegatee","nodeType":"VariableDeclaration","scope":3558,"src":"61396:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3471,"name":"address","nodeType":"ElementaryTypeName","src":"61396:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3474,"mutability":"mutable","name":"delegationType","nodeType":"VariableDeclaration","scope":3558,"src":"61419:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"},"typeName":{"id":3473,"name":"DelegationType","nodeType":"UserDefinedTypeName","referencedDeclaration":5,"src":"61419:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}},"visibility":"internal"},{"constant":false,"id":3476,"mutability":"mutable","name":"nonce","nodeType":"VariableDeclaration","scope":3558,"src":"61454:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3475,"name":"uint256","nodeType":"ElementaryTypeName","src":"61454:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3478,"mutability":"mutable","name":"expiry","nodeType":"VariableDeclaration","scope":3558,"src":"61473:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3477,"name":"uint256","nodeType":"ElementaryTypeName","src":"61473:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3480,"mutability":"mutable","name":"v","nodeType":"VariableDeclaration","scope":3558,"src":"61493:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3479,"name":"uint8","nodeType":"ElementaryTypeName","src":"61493:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3482,"mutability":"mutable","name":"r","nodeType":"VariableDeclaration","scope":3558,"src":"61506:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3481,"name":"bytes32","nodeType":"ElementaryTypeName","src":"61506:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3484,"mutability":"mutable","name":"s","nodeType":"VariableDeclaration","scope":3558,"src":"61521:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3483,"name":"bytes32","nodeType":"ElementaryTypeName","src":"61521:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"61390:144:0"},"returnParameters":{"id":3486,"nodeType":"ParameterList","parameters":[],"src":"61542:0:0"},"scope":3650,"src":"61362:718:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3648,"nodeType":"Block","src":"62619:573:0","statements":[{"assignments":[3575],"declarations":[{"constant":false,"id":3575,"mutability":"mutable","name":"structHash","nodeType":"VariableDeclaration","scope":3648,"src":"62625:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3574,"name":"bytes32","nodeType":"ElementaryTypeName","src":"62625:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3585,"initialValue":{"arguments":[{"arguments":[{"id":3579,"name":"DELEGATE_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1721,"src":"62667:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3580,"name":"delegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3561,"src":"62686:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3581,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"62697:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3582,"name":"expiry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"62704:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3577,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"62656:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3578,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"62656:10:0","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"62656:55:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3576,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"62646:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"62646:66:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"62625:87:0"},{"assignments":[3587],"declarations":[{"constant":false,"id":3587,"mutability":"mutable","name":"digest","nodeType":"VariableDeclaration","scope":3648,"src":"62718:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3586,"name":"bytes32","nodeType":"ElementaryTypeName","src":"62718:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3596,"initialValue":{"arguments":[{"arguments":[{"hexValue":"1901","id":3591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"62762:10:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},"value":"\u0019\u0001"},{"id":3592,"name":"DOMAIN_SEPARATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"62774:16:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3593,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3575,"src":"62792:10:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3589,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"62745:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3590,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"62745:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"62745:58:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3588,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"62735:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"62735:69:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"62718:86:0"},{"assignments":[3598],"declarations":[{"constant":false,"id":3598,"mutability":"mutable","name":"signatory","nodeType":"VariableDeclaration","scope":3648,"src":"62810:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3597,"name":"address","nodeType":"ElementaryTypeName","src":"62810:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3605,"initialValue":{"arguments":[{"id":3600,"name":"digest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3587,"src":"62840:6:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3601,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3567,"src":"62848:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3602,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3569,"src":"62851:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3603,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3571,"src":"62854:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3599,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"62830:9:0","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":3604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"62830:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"62810:46:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3607,"name":"signatory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3598,"src":"62870:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"62891:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3609,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"62883:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3608,"name":"address","nodeType":"ElementaryTypeName","src":"62883:7:0","typeDescriptions":{}}},"id":3611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"62883:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"62870:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f5349474e4154555245","id":3613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"62895:19:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_5e2e9eaa2d734966dea0900deacd15b20129fbce05255d633a3ce5ebca181b88","typeString":"literal_string \"INVALID_SIGNATURE\""},"value":"INVALID_SIGNATURE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5e2e9eaa2d734966dea0900deacd15b20129fbce05255d633a3ce5ebca181b88","typeString":"literal_string \"INVALID_SIGNATURE\""}],"id":3606,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"62862:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"62862:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3615,"nodeType":"ExpressionStatement","src":"62862:53:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3617,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"62929:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"62938:20:0","subExpression":{"baseExpression":{"id":3618,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2495,"src":"62938:7:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3620,"indexExpression":{"id":3619,"name":"signatory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3598,"src":"62946:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"62938:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"62929:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f4e4f4e4345","id":3623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"62960:15:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_a19e25beaf00f467d35fbe7e167b5794fca796dbfd417dd2accc8f5303300b99","typeString":"literal_string \"INVALID_NONCE\""},"value":"INVALID_NONCE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a19e25beaf00f467d35fbe7e167b5794fca796dbfd417dd2accc8f5303300b99","typeString":"literal_string \"INVALID_NONCE\""}],"id":3616,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"62921:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"62921:55:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3625,"nodeType":"ExpressionStatement","src":"62921:55:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3627,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"62990:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"62990:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3629,"name":"expiry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"63009:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"62990:25:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f45585049524154494f4e","id":3631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"63017:20:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fe3e5cf49f72bf8a6a8455c3e990f8479f5dfa09ac808886f330a39b0029c2d","typeString":"literal_string \"INVALID_EXPIRATION\""},"value":"INVALID_EXPIRATION"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9fe3e5cf49f72bf8a6a8455c3e990f8479f5dfa09ac808886f330a39b0029c2d","typeString":"literal_string \"INVALID_EXPIRATION\""}],"id":3626,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"62982:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"62982:56:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3633,"nodeType":"ExpressionStatement","src":"62982:56:0"},{"expression":{"arguments":[{"id":3635,"name":"signatory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3598,"src":"63060:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3636,"name":"delegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3561,"src":"63071:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3637,"name":"DelegationType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"63082:14:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_DelegationType_$5_$","typeString":"type(enum IGovernancePowerDelegationToken.DelegationType)"}},"id":3638,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"VOTING_POWER","nodeType":"MemberAccess","src":"63082:27:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}],"id":3634,"name":"_delegateByType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"63044:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_enum$_DelegationType_$5_$returns$__$","typeString":"function (address,address,enum IGovernancePowerDelegationToken.DelegationType)"}},"id":3639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"63044:66:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3640,"nodeType":"ExpressionStatement","src":"63044:66:0"},{"expression":{"arguments":[{"id":3642,"name":"signatory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3598,"src":"63132:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3643,"name":"delegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3561,"src":"63143:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3644,"name":"DelegationType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"63154:14:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_DelegationType_$5_$","typeString":"type(enum IGovernancePowerDelegationToken.DelegationType)"}},"id":3645,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"PROPOSITION_POWER","nodeType":"MemberAccess","src":"63154:32:0","typeDescriptions":{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_enum$_DelegationType_$5","typeString":"enum IGovernancePowerDelegationToken.DelegationType"}],"id":3641,"name":"_delegateByType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"63116:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_enum$_DelegationType_$5_$returns$__$","typeString":"function (address,address,enum IGovernancePowerDelegationToken.DelegationType)"}},"id":3646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"63116:71:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3647,"nodeType":"ExpressionStatement","src":"63116:71:0"}]},"documentation":{"id":3559,"nodeType":"StructuredDocumentation","src":"62084:393:0","text":" @dev Delegates power from signatory to `delegatee`\n @param delegatee The address to delegate votes to\n @param nonce The contract state required to match the signature\n @param expiry The time at which to expire the signature\n @param v The recovery byte of the signature\n @param r Half of the ECDSA signature pair\n @param s Half of the ECDSA signature pair"},"functionSelector":"c3cda520","id":3649,"implemented":true,"kind":"function","modifiers":[],"name":"delegateBySig","nodeType":"FunctionDefinition","parameters":{"id":3572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3561,"mutability":"mutable","name":"delegatee","nodeType":"VariableDeclaration","scope":3649,"src":"62508:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3560,"name":"address","nodeType":"ElementaryTypeName","src":"62508:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3563,"mutability":"mutable","name":"nonce","nodeType":"VariableDeclaration","scope":3649,"src":"62531:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3562,"name":"uint256","nodeType":"ElementaryTypeName","src":"62531:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3565,"mutability":"mutable","name":"expiry","nodeType":"VariableDeclaration","scope":3649,"src":"62550:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3564,"name":"uint256","nodeType":"ElementaryTypeName","src":"62550:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3567,"mutability":"mutable","name":"v","nodeType":"VariableDeclaration","scope":3649,"src":"62570:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3566,"name":"uint8","nodeType":"ElementaryTypeName","src":"62570:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3569,"mutability":"mutable","name":"r","nodeType":"VariableDeclaration","scope":3649,"src":"62583:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3568,"name":"bytes32","nodeType":"ElementaryTypeName","src":"62583:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3571,"mutability":"mutable","name":"s","nodeType":"VariableDeclaration","scope":3649,"src":"62598:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3570,"name":"bytes32","nodeType":"ElementaryTypeName","src":"62598:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"62502:109:0"},"returnParameters":{"id":3573,"nodeType":"ParameterList","parameters":[],"src":"62619:0:0"},"scope":3650,"src":"62480:712:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":3651,"src":"46839:16355:0"}],"src":"105:63090:0"},"id":0},"contracts/hardhat-dependency-compiler/@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol":{"ast":{"absolutePath":"contracts/hardhat-dependency-compiler/@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol","exportedSymbols":{"AaveDistributionManager":[1702],"Address":[432],"Context":[100],"DistributionTypes":[983],"ERC20":[933],"GovernancePowerDelegationERC20":[2383],"GovernancePowerWithSnapshot":[2414],"IAaveDistributionManager":[1176],"IERC20":[176],"IGovernancePowerDelegationToken":[78],"IStakedAave":[958],"ITransferHook":[968],"SafeERC20":[1132],"SafeMath":[370],"StakedTokenV2Rev3":[3650],"VersionedInitializable":[1169]},"id":3654,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3652,"literals":["solidity",">","0.0",".0"],"nodeType":"PragmaDirective","src":"39:23:1"},{"absolutePath":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol","file":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol","id":3653,"nodeType":"ImportDirective","scope":3654,"sourceUnit":3651,"src":"63:99:1","symbolAliases":[],"unitAlias":""}],"src":"39:124:1"},"id":1}},"contracts":{"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol":{"AaveDistributionManager":{"abi":[{"inputs":[{"internalType":"address","name":"emissionManager","type":"address"},{"internalType":"uint256","name":"distributionDuration","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"asset","type":"address"},{"indexed":false,"internalType":"uint256","name":"emission","type":"uint256"}],"name":"AssetConfigUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"asset","type":"address"},{"indexed":false,"internalType":"uint256","name":"index","type":"uint256"}],"name":"AssetIndexUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"address","name":"asset","type":"address"},{"indexed":false,"internalType":"uint256","name":"index","type":"uint256"}],"name":"UserIndexUpdated","type":"event"},{"inputs":[],"name":"DISTRIBUTION_END","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"EMISSION_MANAGER","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PRECISION","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"assets","outputs":[{"internalType":"uint128","name":"emissionPerSecond","type":"uint128"},{"internalType":"uint128","name":"lastUpdateTimestamp","type":"uint128"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint128","name":"emissionPerSecond","type":"uint128"},{"internalType":"uint256","name":"totalStaked","type":"uint256"},{"internalType":"address","name":"underlyingAsset","type":"address"}],"internalType":"struct DistributionTypes.AssetConfigInput[]","name":"assetsConfigInput","type":"tuple[]"}],"name":"configureAssets","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"address","name":"asset","type":"address"}],"name":"getUserAssetData","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"author":"Aave*","kind":"dev","methods":{"configureAssets((uint128,uint256,address)[])":{"details":"Configures the distribution of rewards for a list of assets","params":{"assetsConfigInput":"The list of configurations to apply*"}},"getUserAssetData(address,address)":{"details":"Returns the data of an user on a distribution","params":{"asset":"The address of the reference asset of the distribution","user":"Address of the user"},"returns":{"_0":"The new index*"}}},"title":"AaveDistributionManager","version":1},"evm":{"bytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:743:2","statements":[{"nodeType":"YulBlock","src":"6:3:2","statements":[]},{"body":{"nodeType":"YulBlock","src":"112:273:2","statements":[{"body":{"nodeType":"YulBlock","src":"158:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"167:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"175:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"160:6:2"},"nodeType":"YulFunctionCall","src":"160:22:2"},"nodeType":"YulExpressionStatement","src":"160:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"133:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"142:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"129:3:2"},"nodeType":"YulFunctionCall","src":"129:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"154:2:2","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"125:3:2"},"nodeType":"YulFunctionCall","src":"125:32:2"},"nodeType":"YulIf","src":"122:2:2"},{"nodeType":"YulVariableDeclaration","src":"193:29:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"212:9:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"206:5:2"},"nodeType":"YulFunctionCall","src":"206:16:2"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"197:5:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"285:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"294:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"302:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"287:6:2"},"nodeType":"YulFunctionCall","src":"287:22:2"},"nodeType":"YulExpressionStatement","src":"287:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"244:5:2"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"255:5:2"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"270:3:2","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"275:1:2","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"266:3:2"},"nodeType":"YulFunctionCall","src":"266:11:2"},{"kind":"number","nodeType":"YulLiteral","src":"279:1:2","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"262:3:2"},"nodeType":"YulFunctionCall","src":"262:19:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"251:3:2"},"nodeType":"YulFunctionCall","src":"251:31:2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"241:2:2"},"nodeType":"YulFunctionCall","src":"241:42:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"234:6:2"},"nodeType":"YulFunctionCall","src":"234:50:2"},"nodeType":"YulIf","src":"231:2:2"},{"nodeType":"YulAssignment","src":"320:15:2","value":{"name":"value","nodeType":"YulIdentifier","src":"330:5:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"320:6:2"}]},{"nodeType":"YulAssignment","src":"344:35:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"364:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"375:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"360:3:2"},"nodeType":"YulFunctionCall","src":"360:18:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"354:5:2"},"nodeType":"YulFunctionCall","src":"354:25:2"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"344:6:2"}]}]},"name":"abi_decode_tuple_t_addresst_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"70:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"81:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"93:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"101:6:2","type":""}],"src":"14:371:2"},{"body":{"nodeType":"YulBlock","src":"564:177:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"581:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"592:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"574:6:2"},"nodeType":"YulFunctionCall","src":"574:21:2"},"nodeType":"YulExpressionStatement","src":"574:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"615:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"626:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"611:3:2"},"nodeType":"YulFunctionCall","src":"611:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"631:2:2","type":"","value":"27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"604:6:2"},"nodeType":"YulFunctionCall","src":"604:30:2"},"nodeType":"YulExpressionStatement","src":"604:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"654:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"665:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"650:3:2"},"nodeType":"YulFunctionCall","src":"650:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"670:29:2","type":"","value":"SafeMath: addition overflow"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"643:6:2"},"nodeType":"YulFunctionCall","src":"643:57:2"},"nodeType":"YulExpressionStatement","src":"643:57:2"},{"nodeType":"YulAssignment","src":"709:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"721:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"732:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"717:3:2"},"nodeType":"YulFunctionCall","src":"717:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"709:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"541:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"555:4:2","type":""}],"src":"390:351:2"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_addresst_uint256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(value0, value0) }\n        value0 := value\n        value1 := mload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"SafeMath: addition overflow\")\n        tail := add(headStart, 96)\n    }\n}","id":2,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60c060405234801561001057600080fd5b50604051610c1c380380610c1c83398101604081905261002f91610094565b610046814261005f60201b6104001790919060201c565b6080525060601b6001600160601b03191660a052610103565b60008282018381101561008d5760405162461bcd60e51b8152600401610084906100cc565b60405180910390fd5b9392505050565b600080604083850312156100a6578182fd5b82516001600160a01b03811681146100bc578283fd5b6020939093015192949293505050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60805160a05160601c610adf61013d60003980610186528061039a525080610147528061057652806105bb52806105e85250610adf6000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063b2a5dbfa11610050578063b2a5dbfa146100bd578063cbcbb507146100d2578063f11b8188146100e757610072565b80633373ee4c14610077578063919cd40f146100a0578063aaf5eb68146100a8575b600080fd5b61008a610085366004610819565b610109565b6040516100979190610a92565b60405180910390f35b61008a610145565b6100b0610169565b6040516100979190610a9b565b6100d06100cb36600461084b565b61016e565b005b6100da610398565b60405161009791906108eb565b6100fa6100f53660046107ff565b6103bc565b60405161009793929190610a65565b73ffffffffffffffffffffffffffffffffffffffff80821660009081526020818152604080832093861683526002909301905220545b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b601281565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101dd90610a11565b60405180910390fd5b60005b8181101561039357600080600085858581811061020257fe5b905060600201604001602081019061021a91906107ff565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061029984848481811061026557fe5b905060600201604001602081019061027d91906107ff565b8286868681811061028a57fe5b90506060020160200135610446565b508383838181106102a657fe5b6102bc92602060609092020190810191506108bb565b81547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9190911617815583838381811061030457fe5b905060600201604001602081019061031c91906107ff565b73ffffffffffffffffffffffffffffffffffffffff167f87fa03892a0556cb6b8f97e6d533a150d4d55fcbf275fff5fa003fa636bcc7fa85858581811061035f57fe5b61037592602060609092020190810191506108bb565b6040516103829190610a48565b60405180910390a2506001016101e9565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600060208190529081526040902080546001909101546fffffffffffffffffffffffffffffffff808316927001000000000000000000000000000000009004169083565b60008282018381101561043f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101dd9061097d565b9392505050565b600182015482546000919070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16428114156104875750905061043f565b84546000906104ab9084906fffffffffffffffffffffffffffffffff168488610545565b905082811461050c578086600101819055508673ffffffffffffffffffffffffffffffffffffffff167f5777ca300dfe5bead41006fbce4389794dbc0ed8d6cccebfaf94630aa04184bc826040516105039190610a92565b60405180910390a25b85546fffffffffffffffffffffffffffffffff428116700100000000000000000000000000000000029116178655925050509392505050565b6000831580610552575081155b8061056e575042836fffffffffffffffffffffffffffffffff16145b806105ab57507f0000000000000000000000000000000000000000000000000000000000000000836fffffffffffffffffffffffffffffffff1610155b156105b757508361065f565b60007f000000000000000000000000000000000000000000000000000000000000000042116105e65742610608565b7f00000000000000000000000000000000000000000000000000000000000000005b90506000610628826fffffffffffffffffffffffffffffffff8716610667565b905061065a876106548661064e670de0b6b3a76400006106488c886106a9565b906106a9565b906106fd565b90610400565b925050505b949350505050565b600061043f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061073f565b6000826106b85750600061013f565b828202828482816106c557fe5b041461043f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101dd906109b4565b600061043f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610785565b6000818484111561077d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101dd919061090c565b505050900390565b600081836107c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101dd919061090c565b5060008385816107cc57fe5b0495945050505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146107fa57600080fd5b919050565b600060208284031215610810578081fd5b61043f826107d6565b6000806040838503121561082b578081fd5b610834836107d6565b9150610842602084016107d6565b90509250929050565b6000806020838503121561085d578182fd5b823567ffffffffffffffff80821115610874578384fd5b818501915085601f830112610887578384fd5b813581811115610895578485fd5b8660206060830285010111156108a9578485fd5b60209290920196919550909350505050565b6000602082840312156108cc578081fd5b81356fffffffffffffffffffffffffffffffff8116811461043f578182fd5b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000602080835283518082850152825b818110156109385785810183015185820160400152820161091c565b818111156109495783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526015908201527f4f4e4c595f454d495353494f4e5f4d414e414745520000000000000000000000604082015260600190565b6fffffffffffffffffffffffffffffffff91909116815260200190565b6fffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b90815260200190565b60ff9190911681526020019056fea26469706673582212200c0023b0e8c70f24c19a00b2c2ce0514962ab8ed199cdc4e80b4febdca7a9fec64736f6c63430007050033","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xC1C CODESIZE SUB DUP1 PUSH2 0xC1C DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x94 JUMP JUMPDEST PUSH2 0x46 DUP2 TIMESTAMP PUSH2 0x5F PUSH1 0x20 SHL PUSH2 0x400 OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x80 MSTORE POP PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0xA0 MSTORE PUSH2 0x103 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x8D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x84 SWAP1 PUSH2 0xCC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA6 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xBC JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD MLOAD SWAP3 SWAP5 SWAP3 SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH2 0xADF PUSH2 0x13D PUSH1 0x0 CODECOPY DUP1 PUSH2 0x186 MSTORE DUP1 PUSH2 0x39A MSTORE POP DUP1 PUSH2 0x147 MSTORE DUP1 PUSH2 0x576 MSTORE DUP1 PUSH2 0x5BB MSTORE DUP1 PUSH2 0x5E8 MSTORE POP PUSH2 0xADF PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x72 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB2A5DBFA GT PUSH2 0x50 JUMPI DUP1 PUSH4 0xB2A5DBFA EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0xCBCBB507 EQ PUSH2 0xD2 JUMPI DUP1 PUSH4 0xF11B8188 EQ PUSH2 0xE7 JUMPI PUSH2 0x72 JUMP JUMPDEST DUP1 PUSH4 0x3373EE4C EQ PUSH2 0x77 JUMPI DUP1 PUSH4 0x919CD40F EQ PUSH2 0xA0 JUMPI DUP1 PUSH4 0xAAF5EB68 EQ PUSH2 0xA8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8A PUSH2 0x85 CALLDATASIZE PUSH1 0x4 PUSH2 0x819 JUMP JUMPDEST PUSH2 0x109 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x97 SWAP2 SWAP1 PUSH2 0xA92 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x8A PUSH2 0x145 JUMP JUMPDEST PUSH2 0xB0 PUSH2 0x169 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x97 SWAP2 SWAP1 PUSH2 0xA9B JUMP JUMPDEST PUSH2 0xD0 PUSH2 0xCB CALLDATASIZE PUSH1 0x4 PUSH2 0x84B JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST STOP JUMPDEST PUSH2 0xDA PUSH2 0x398 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x97 SWAP2 SWAP1 PUSH2 0x8EB JUMP JUMPDEST PUSH2 0xFA PUSH2 0xF5 CALLDATASIZE PUSH1 0x4 PUSH2 0x7FF JUMP JUMPDEST PUSH2 0x3BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x97 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA65 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP4 ADD SWAP1 MSTORE KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x12 DUP2 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x1E6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DD SWAP1 PUSH2 0xA11 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0x202 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x60 MUL ADD PUSH1 0x40 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x21A SWAP2 SWAP1 PUSH2 0x7FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x299 DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0x265 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x60 MUL ADD PUSH1 0x40 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x27D SWAP2 SWAP1 PUSH2 0x7FF JUMP JUMPDEST DUP3 DUP7 DUP7 DUP7 DUP2 DUP2 LT PUSH2 0x28A JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x60 MUL ADD PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x446 JUMP JUMPDEST POP DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0x2A6 JUMPI INVALID JUMPDEST PUSH2 0x2BC SWAP3 PUSH1 0x20 PUSH1 0x60 SWAP1 SWAP3 MUL ADD SWAP1 DUP2 ADD SWAP2 POP PUSH2 0x8BB JUMP JUMPDEST DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND OR DUP2 SSTORE DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0x304 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x60 MUL ADD PUSH1 0x40 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x31C SWAP2 SWAP1 PUSH2 0x7FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x87FA03892A0556CB6B8F97E6D533A150D4D55FCBF275FFF5FA003FA636BCC7FA DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0x35F JUMPI INVALID JUMPDEST PUSH2 0x375 SWAP3 PUSH1 0x20 PUSH1 0x60 SWAP1 SWAP3 MUL ADD SWAP1 DUP2 ADD SWAP2 POP PUSH2 0x8BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x382 SWAP2 SWAP1 PUSH2 0xA48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 0x1 ADD PUSH2 0x1E9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND SWAP3 PUSH17 0x100000000000000000000000000000000 SWAP1 DIV AND SWAP1 DUP4 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x43F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DD SWAP1 PUSH2 0x97D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD DUP3 SLOAD PUSH1 0x0 SWAP2 SWAP1 PUSH17 0x100000000000000000000000000000000 SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND TIMESTAMP DUP2 EQ ISZERO PUSH2 0x487 JUMPI POP SWAP1 POP PUSH2 0x43F JUMP JUMPDEST DUP5 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x4AB SWAP1 DUP5 SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP9 PUSH2 0x545 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 EQ PUSH2 0x50C JUMPI DUP1 DUP7 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x5777CA300DFE5BEAD41006FBCE4389794DBC0ED8D6CCCEBFAF94630AA04184BC DUP3 PUSH1 0x40 MLOAD PUSH2 0x503 SWAP2 SWAP1 PUSH2 0xA92 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST DUP6 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF TIMESTAMP DUP2 AND PUSH17 0x100000000000000000000000000000000 MUL SWAP2 AND OR DUP7 SSTORE SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x552 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x56E JUMPI POP TIMESTAMP DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x5AB JUMPI POP PUSH32 0x0 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO JUMPDEST ISZERO PUSH2 0x5B7 JUMPI POP DUP4 PUSH2 0x65F JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 TIMESTAMP GT PUSH2 0x5E6 JUMPI TIMESTAMP PUSH2 0x608 JUMP JUMPDEST PUSH32 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x628 DUP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH2 0x667 JUMP JUMPDEST SWAP1 POP PUSH2 0x65A DUP8 PUSH2 0x654 DUP7 PUSH2 0x64E PUSH8 0xDE0B6B3A7640000 PUSH2 0x648 DUP13 DUP9 PUSH2 0x6A9 JUMP JUMPDEST SWAP1 PUSH2 0x6A9 JUMP JUMPDEST SWAP1 PUSH2 0x6FD JUMP JUMPDEST SWAP1 PUSH2 0x400 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43F DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH2 0x73F JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x6B8 JUMPI POP PUSH1 0x0 PUSH2 0x13F JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x6C5 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x43F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DD SWAP1 PUSH2 0x9B4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43F DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH2 0x785 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x77D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0x90C JUMP JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x7C0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0x90C JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP6 DUP2 PUSH2 0x7CC JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x7FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x810 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x43F DUP3 PUSH2 0x7D6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x82B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x834 DUP4 PUSH2 0x7D6 JUMP JUMPDEST SWAP2 POP PUSH2 0x842 PUSH1 0x20 DUP5 ADD PUSH2 0x7D6 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x85D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x874 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x887 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x895 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 PUSH1 0x60 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x8A9 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8CC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x43F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x938 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x91C JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x949 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206D756C7469706C69636174696F6E206F766572666C6F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7700000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F4E4C595F454D495353494F4E5F4D414E414745520000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC STOP 0x23 0xB0 0xE8 0xC7 0xF 0x24 0xC1 SWAP11 STOP 0xB2 0xC2 0xCE SDIV EQ SWAP7 0x2A 0xB8 0xED NOT SWAP13 0xDC 0x4E DUP1 0xB4 INVALID 0xBD 0xCA PUSH27 0x9FEC64736F6C634300070500330000000000000000000000000000 ","sourceMap":"27976:7622:0:-:0;;;28622:185;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;28721:41;28741:20;28721:15;:19;;;;;;:41;;;;:::i;:::-;28702:60;;-1:-1:-1;28768:34:0;;-1:-1:-1;;;;;;28768:34:0;;;27976:7622;;6845:162;6903:7;6930:5;;;6949:6;;;;6941:46;;;;-1:-1:-1;;;6941:46:0;;;;;;;:::i;:::-;;;;;;;;;7001:1;6845:162;-1:-1:-1;;;6845:162:0:o;14:371:2:-;;;154:2;142:9;133:7;129:23;125:32;122:2;;;175:6;167;160:22;122:2;206:16;;-1:-1:-1;;;;;251:31:2;;241:42;;231:2;;302:6;294;287:22;231:2;375;360:18;;;;354:25;330:5;;354:25;;-1:-1:-1;;;112:273:2:o;390:351::-;592:2;574:21;;;631:2;611:18;;;604:30;670:29;665:2;650:18;;643:57;732:2;717:18;;564:177::o;:::-;27976:7622:0;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4725:2","statements":[{"nodeType":"YulBlock","src":"6:3:2","statements":[]},{"body":{"nodeType":"YulBlock","src":"65:147:2","statements":[{"nodeType":"YulAssignment","src":"75:29:2","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"97:6:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"84:12:2"},"nodeType":"YulFunctionCall","src":"84:20:2"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"75:5:2"}]},{"body":{"nodeType":"YulBlock","src":"190:16:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"199:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"202:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"192:6:2"},"nodeType":"YulFunctionCall","src":"192:12:2"},"nodeType":"YulExpressionStatement","src":"192:12:2"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"126:5:2"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"137:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"144:42:2","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"133:3:2"},"nodeType":"YulFunctionCall","src":"133:54:2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"123:2:2"},"nodeType":"YulFunctionCall","src":"123:65:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"116:6:2"},"nodeType":"YulFunctionCall","src":"116:73:2"},"nodeType":"YulIf","src":"113:2:2"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"44:6:2","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"55:5:2","type":""}],"src":"14:198:2"},{"body":{"nodeType":"YulBlock","src":"287:128:2","statements":[{"body":{"nodeType":"YulBlock","src":"333:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"342:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"350:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"335:6:2"},"nodeType":"YulFunctionCall","src":"335:22:2"},"nodeType":"YulExpressionStatement","src":"335:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"308:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"317:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"304:3:2"},"nodeType":"YulFunctionCall","src":"304:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"329:2:2","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"300:3:2"},"nodeType":"YulFunctionCall","src":"300:32:2"},"nodeType":"YulIf","src":"297:2:2"},{"nodeType":"YulAssignment","src":"368:41:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"399:9:2"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"378:20:2"},"nodeType":"YulFunctionCall","src":"378:31:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"368:6:2"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"253:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"264:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"276:6:2","type":""}],"src":"217:198:2"},{"body":{"nodeType":"YulBlock","src":"507:187:2","statements":[{"body":{"nodeType":"YulBlock","src":"553:26:2","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"562:6:2"},{"name":"value1","nodeType":"YulIdentifier","src":"570:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"555:6:2"},"nodeType":"YulFunctionCall","src":"555:22:2"},"nodeType":"YulExpressionStatement","src":"555:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"528:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"537:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"524:3:2"},"nodeType":"YulFunctionCall","src":"524:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"549:2:2","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"520:3:2"},"nodeType":"YulFunctionCall","src":"520:32:2"},"nodeType":"YulIf","src":"517:2:2"},{"nodeType":"YulAssignment","src":"588:41:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"619:9:2"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"598:20:2"},"nodeType":"YulFunctionCall","src":"598:31:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"588:6:2"}]},{"nodeType":"YulAssignment","src":"638:50:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"673:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"684:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"669:3:2"},"nodeType":"YulFunctionCall","src":"669:18:2"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"648:20:2"},"nodeType":"YulFunctionCall","src":"648:40:2"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"638:6:2"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"465:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"476:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"488:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"496:6:2","type":""}],"src":"420:274:2"},{"body":{"nodeType":"YulBlock","src":"839:563:2","statements":[{"body":{"nodeType":"YulBlock","src":"885:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"894:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"902:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"887:6:2"},"nodeType":"YulFunctionCall","src":"887:22:2"},"nodeType":"YulExpressionStatement","src":"887:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"860:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"869:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"856:3:2"},"nodeType":"YulFunctionCall","src":"856:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"881:2:2","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"852:3:2"},"nodeType":"YulFunctionCall","src":"852:32:2"},"nodeType":"YulIf","src":"849:2:2"},{"nodeType":"YulVariableDeclaration","src":"920:37:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"947:9:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"934:12:2"},"nodeType":"YulFunctionCall","src":"934:23:2"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"924:6:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"966:28:2","value":{"kind":"number","nodeType":"YulLiteral","src":"976:18:2","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"970:2:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"1021:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1030:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"1038:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1023:6:2"},"nodeType":"YulFunctionCall","src":"1023:22:2"},"nodeType":"YulExpressionStatement","src":"1023:22:2"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1009:6:2"},{"name":"_1","nodeType":"YulIdentifier","src":"1017:2:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1006:2:2"},"nodeType":"YulFunctionCall","src":"1006:14:2"},"nodeType":"YulIf","src":"1003:2:2"},{"nodeType":"YulVariableDeclaration","src":"1056:32:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1070:9:2"},{"name":"offset","nodeType":"YulIdentifier","src":"1081:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1066:3:2"},"nodeType":"YulFunctionCall","src":"1066:22:2"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1060:2:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"1136:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1145:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"1153:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1138:6:2"},"nodeType":"YulFunctionCall","src":"1138:22:2"},"nodeType":"YulExpressionStatement","src":"1138:22:2"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1115:2:2"},{"kind":"number","nodeType":"YulLiteral","src":"1119:4:2","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1111:3:2"},"nodeType":"YulFunctionCall","src":"1111:13:2"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1126:7:2"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1107:3:2"},"nodeType":"YulFunctionCall","src":"1107:27:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1100:6:2"},"nodeType":"YulFunctionCall","src":"1100:35:2"},"nodeType":"YulIf","src":"1097:2:2"},{"nodeType":"YulVariableDeclaration","src":"1171:30:2","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1198:2:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1185:12:2"},"nodeType":"YulFunctionCall","src":"1185:16:2"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1175:6:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"1228:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1237:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"1245:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1230:6:2"},"nodeType":"YulFunctionCall","src":"1230:22:2"},"nodeType":"YulExpressionStatement","src":"1230:22:2"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1216:6:2"},{"name":"_1","nodeType":"YulIdentifier","src":"1224:2:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1213:2:2"},"nodeType":"YulFunctionCall","src":"1213:14:2"},"nodeType":"YulIf","src":"1210:2:2"},{"body":{"nodeType":"YulBlock","src":"1315:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1324:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"1332:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1317:6:2"},"nodeType":"YulFunctionCall","src":"1317:22:2"},"nodeType":"YulExpressionStatement","src":"1317:22:2"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1277:2:2"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1285:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"1293:4:2","type":"","value":"0x60"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1281:3:2"},"nodeType":"YulFunctionCall","src":"1281:17:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1273:3:2"},"nodeType":"YulFunctionCall","src":"1273:26:2"},{"kind":"number","nodeType":"YulLiteral","src":"1301:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1269:3:2"},"nodeType":"YulFunctionCall","src":"1269:35:2"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1306:7:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1266:2:2"},"nodeType":"YulFunctionCall","src":"1266:48:2"},"nodeType":"YulIf","src":"1263:2:2"},{"nodeType":"YulAssignment","src":"1350:21:2","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1364:2:2"},{"kind":"number","nodeType":"YulLiteral","src":"1368:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1360:3:2"},"nodeType":"YulFunctionCall","src":"1360:11:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1350:6:2"}]},{"nodeType":"YulAssignment","src":"1380:16:2","value":{"name":"length","nodeType":"YulIdentifier","src":"1390:6:2"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1380:6:2"}]}]},"name":"abi_decode_tuple_t_array$_t_struct$_AssetConfigInput_$975_calldata_ptr_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"797:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"808:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"820:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"828:6:2","type":""}],"src":"699:703:2"},{"body":{"nodeType":"YulBlock","src":"1477:251:2","statements":[{"body":{"nodeType":"YulBlock","src":"1523:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1532:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"1540:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1525:6:2"},"nodeType":"YulFunctionCall","src":"1525:22:2"},"nodeType":"YulExpressionStatement","src":"1525:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1498:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"1507:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1494:3:2"},"nodeType":"YulFunctionCall","src":"1494:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"1519:2:2","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1490:3:2"},"nodeType":"YulFunctionCall","src":"1490:32:2"},"nodeType":"YulIf","src":"1487:2:2"},{"nodeType":"YulVariableDeclaration","src":"1558:36:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1584:9:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1571:12:2"},"nodeType":"YulFunctionCall","src":"1571:23:2"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1562:5:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"1672:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1681:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"1689:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1674:6:2"},"nodeType":"YulFunctionCall","src":"1674:22:2"},"nodeType":"YulExpressionStatement","src":"1674:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1616:5:2"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1627:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"1634:34:2","type":"","value":"0xffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1623:3:2"},"nodeType":"YulFunctionCall","src":"1623:46:2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1613:2:2"},"nodeType":"YulFunctionCall","src":"1613:57:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1606:6:2"},"nodeType":"YulFunctionCall","src":"1606:65:2"},"nodeType":"YulIf","src":"1603:2:2"},{"nodeType":"YulAssignment","src":"1707:15:2","value":{"name":"value","nodeType":"YulIdentifier","src":"1717:5:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1707:6:2"}]}]},"name":"abi_decode_tuple_t_uint128","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1443:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1454:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1466:6:2","type":""}],"src":"1407:321:2"},{"body":{"nodeType":"YulBlock","src":"1834:125:2","statements":[{"nodeType":"YulAssignment","src":"1844:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1856:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"1867:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1852:3:2"},"nodeType":"YulFunctionCall","src":"1852:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1844:4:2"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1886:9:2"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1901:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"1909:42:2","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1897:3:2"},"nodeType":"YulFunctionCall","src":"1897:55:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1879:6:2"},"nodeType":"YulFunctionCall","src":"1879:74:2"},"nodeType":"YulExpressionStatement","src":"1879:74:2"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1803:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1814:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1825:4:2","type":""}],"src":"1733:226:2"},{"body":{"nodeType":"YulBlock","src":"2085:541:2","statements":[{"nodeType":"YulVariableDeclaration","src":"2095:12:2","value":{"kind":"number","nodeType":"YulLiteral","src":"2105:2:2","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2099:2:2","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2123:9:2"},{"name":"_1","nodeType":"YulIdentifier","src":"2134:2:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2116:6:2"},"nodeType":"YulFunctionCall","src":"2116:21:2"},"nodeType":"YulExpressionStatement","src":"2116:21:2"},{"nodeType":"YulVariableDeclaration","src":"2146:27:2","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2166:6:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2160:5:2"},"nodeType":"YulFunctionCall","src":"2160:13:2"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2150:6:2","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2193:9:2"},{"name":"_1","nodeType":"YulIdentifier","src":"2204:2:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2189:3:2"},"nodeType":"YulFunctionCall","src":"2189:18:2"},{"name":"length","nodeType":"YulIdentifier","src":"2209:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2182:6:2"},"nodeType":"YulFunctionCall","src":"2182:34:2"},"nodeType":"YulExpressionStatement","src":"2182:34:2"},{"nodeType":"YulVariableDeclaration","src":"2225:13:2","value":{"name":"tail","nodeType":"YulIdentifier","src":"2234:4:2"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2229:1:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"2297:90:2","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2326:9:2"},{"name":"i","nodeType":"YulIdentifier","src":"2337:1:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2322:3:2"},"nodeType":"YulFunctionCall","src":"2322:17:2"},{"kind":"number","nodeType":"YulLiteral","src":"2341:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2318:3:2"},"nodeType":"YulFunctionCall","src":"2318:26:2"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2360:6:2"},{"name":"i","nodeType":"YulIdentifier","src":"2368:1:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2356:3:2"},"nodeType":"YulFunctionCall","src":"2356:14:2"},{"name":"_1","nodeType":"YulIdentifier","src":"2372:2:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2352:3:2"},"nodeType":"YulFunctionCall","src":"2352:23:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2346:5:2"},"nodeType":"YulFunctionCall","src":"2346:30:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2311:6:2"},"nodeType":"YulFunctionCall","src":"2311:66:2"},"nodeType":"YulExpressionStatement","src":"2311:66:2"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2258:1:2"},{"name":"length","nodeType":"YulIdentifier","src":"2261:6:2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2255:2:2"},"nodeType":"YulFunctionCall","src":"2255:13:2"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2269:19:2","statements":[{"nodeType":"YulAssignment","src":"2271:15:2","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2280:1:2"},{"name":"_1","nodeType":"YulIdentifier","src":"2283:2:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2276:3:2"},"nodeType":"YulFunctionCall","src":"2276:10:2"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2271:1:2"}]}]},"pre":{"nodeType":"YulBlock","src":"2251:3:2","statements":[]},"src":"2247:140:2"},{"body":{"nodeType":"YulBlock","src":"2421:69:2","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2450:9:2"},{"name":"length","nodeType":"YulIdentifier","src":"2461:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2446:3:2"},"nodeType":"YulFunctionCall","src":"2446:22:2"},{"kind":"number","nodeType":"YulLiteral","src":"2470:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2442:3:2"},"nodeType":"YulFunctionCall","src":"2442:31:2"},{"name":"tail","nodeType":"YulIdentifier","src":"2475:4:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2435:6:2"},"nodeType":"YulFunctionCall","src":"2435:45:2"},"nodeType":"YulExpressionStatement","src":"2435:45:2"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2402:1:2"},{"name":"length","nodeType":"YulIdentifier","src":"2405:6:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2399:2:2"},"nodeType":"YulFunctionCall","src":"2399:13:2"},"nodeType":"YulIf","src":"2396:2:2"},{"nodeType":"YulAssignment","src":"2499:121:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2515:9:2"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2534:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"2542:2:2","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2530:3:2"},"nodeType":"YulFunctionCall","src":"2530:15:2"},{"kind":"number","nodeType":"YulLiteral","src":"2547:66:2","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2526:3:2"},"nodeType":"YulFunctionCall","src":"2526:88:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2511:3:2"},"nodeType":"YulFunctionCall","src":"2511:104:2"},{"kind":"number","nodeType":"YulLiteral","src":"2617:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2507:3:2"},"nodeType":"YulFunctionCall","src":"2507:113:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2499:4:2"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2054:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2065:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2076:4:2","type":""}],"src":"1964:662:2"},{"body":{"nodeType":"YulBlock","src":"2805:177:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2822:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2833:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2815:6:2"},"nodeType":"YulFunctionCall","src":"2815:21:2"},"nodeType":"YulExpressionStatement","src":"2815:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2856:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2867:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2852:3:2"},"nodeType":"YulFunctionCall","src":"2852:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"2872:2:2","type":"","value":"27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2845:6:2"},"nodeType":"YulFunctionCall","src":"2845:30:2"},"nodeType":"YulExpressionStatement","src":"2845:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2895:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2906:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2891:3:2"},"nodeType":"YulFunctionCall","src":"2891:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"2911:29:2","type":"","value":"SafeMath: addition overflow"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2884:6:2"},"nodeType":"YulFunctionCall","src":"2884:57:2"},"nodeType":"YulExpressionStatement","src":"2884:57:2"},{"nodeType":"YulAssignment","src":"2950:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2962:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2973:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2958:3:2"},"nodeType":"YulFunctionCall","src":"2958:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2950:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2782:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2796:4:2","type":""}],"src":"2631:351:2"},{"body":{"nodeType":"YulBlock","src":"3161:223:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3178:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3189:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3171:6:2"},"nodeType":"YulFunctionCall","src":"3171:21:2"},"nodeType":"YulExpressionStatement","src":"3171:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3212:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3223:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3208:3:2"},"nodeType":"YulFunctionCall","src":"3208:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"3228:2:2","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3201:6:2"},"nodeType":"YulFunctionCall","src":"3201:30:2"},"nodeType":"YulExpressionStatement","src":"3201:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3251:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3262:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3247:3:2"},"nodeType":"YulFunctionCall","src":"3247:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"3267:34:2","type":"","value":"SafeMath: multiplication overflo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3240:6:2"},"nodeType":"YulFunctionCall","src":"3240:62:2"},"nodeType":"YulExpressionStatement","src":"3240:62:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3322:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3333:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3318:3:2"},"nodeType":"YulFunctionCall","src":"3318:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"3338:3:2","type":"","value":"w"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3311:6:2"},"nodeType":"YulFunctionCall","src":"3311:31:2"},"nodeType":"YulExpressionStatement","src":"3311:31:2"},{"nodeType":"YulAssignment","src":"3351:27:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3363:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3374:3:2","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3359:3:2"},"nodeType":"YulFunctionCall","src":"3359:19:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3351:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3138:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3152:4:2","type":""}],"src":"2987:397:2"},{"body":{"nodeType":"YulBlock","src":"3563:171:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3580:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3591:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3573:6:2"},"nodeType":"YulFunctionCall","src":"3573:21:2"},"nodeType":"YulExpressionStatement","src":"3573:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3614:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3625:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3610:3:2"},"nodeType":"YulFunctionCall","src":"3610:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"3630:2:2","type":"","value":"21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3603:6:2"},"nodeType":"YulFunctionCall","src":"3603:30:2"},"nodeType":"YulExpressionStatement","src":"3603:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3653:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3664:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3649:3:2"},"nodeType":"YulFunctionCall","src":"3649:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"3669:23:2","type":"","value":"ONLY_EMISSION_MANAGER"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3642:6:2"},"nodeType":"YulFunctionCall","src":"3642:51:2"},"nodeType":"YulExpressionStatement","src":"3642:51:2"},{"nodeType":"YulAssignment","src":"3702:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3714:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3725:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3710:3:2"},"nodeType":"YulFunctionCall","src":"3710:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3702:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_a28d34ff463a8cc689c6ec4b8c995983f85d0a40987242bc4cc3cec37303c18e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3540:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3554:4:2","type":""}],"src":"3389:345:2"},{"body":{"nodeType":"YulBlock","src":"3840:117:2","statements":[{"nodeType":"YulAssignment","src":"3850:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3862:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3873:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3858:3:2"},"nodeType":"YulFunctionCall","src":"3858:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3850:4:2"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3892:9:2"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3907:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"3915:34:2","type":"","value":"0xffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3903:3:2"},"nodeType":"YulFunctionCall","src":"3903:47:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3885:6:2"},"nodeType":"YulFunctionCall","src":"3885:66:2"},"nodeType":"YulExpressionStatement","src":"3885:66:2"}]},"name":"abi_encode_tuple_t_uint128__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3809:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3820:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3831:4:2","type":""}],"src":"3739:218:2"},{"body":{"nodeType":"YulBlock","src":"4119:233:2","statements":[{"nodeType":"YulAssignment","src":"4129:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4141:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"4152:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4137:3:2"},"nodeType":"YulFunctionCall","src":"4137:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4129:4:2"}]},{"nodeType":"YulVariableDeclaration","src":"4164:44:2","value":{"kind":"number","nodeType":"YulLiteral","src":"4174:34:2","type":"","value":"0xffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4168:2:2","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4224:9:2"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4239:6:2"},{"name":"_1","nodeType":"YulIdentifier","src":"4247:2:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4235:3:2"},"nodeType":"YulFunctionCall","src":"4235:15:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4217:6:2"},"nodeType":"YulFunctionCall","src":"4217:34:2"},"nodeType":"YulExpressionStatement","src":"4217:34:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4271:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"4282:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4267:3:2"},"nodeType":"YulFunctionCall","src":"4267:18:2"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4291:6:2"},{"name":"_1","nodeType":"YulIdentifier","src":"4299:2:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4287:3:2"},"nodeType":"YulFunctionCall","src":"4287:15:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4260:6:2"},"nodeType":"YulFunctionCall","src":"4260:43:2"},"nodeType":"YulExpressionStatement","src":"4260:43:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4323:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"4334:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4319:3:2"},"nodeType":"YulFunctionCall","src":"4319:18:2"},{"name":"value2","nodeType":"YulIdentifier","src":"4339:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4312:6:2"},"nodeType":"YulFunctionCall","src":"4312:34:2"},"nodeType":"YulExpressionStatement","src":"4312:34:2"}]},"name":"abi_encode_tuple_t_uint128_t_uint128_t_uint256__to_t_uint128_t_uint128_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4072:9:2","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4083:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4091:6:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4099:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4110:4:2","type":""}],"src":"3962:390:2"},{"body":{"nodeType":"YulBlock","src":"4458:76:2","statements":[{"nodeType":"YulAssignment","src":"4468:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4480:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"4491:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4476:3:2"},"nodeType":"YulFunctionCall","src":"4476:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4468:4:2"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4510:9:2"},{"name":"value0","nodeType":"YulIdentifier","src":"4521:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4503:6:2"},"nodeType":"YulFunctionCall","src":"4503:25:2"},"nodeType":"YulExpressionStatement","src":"4503:25:2"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4427:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4438:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4449:4:2","type":""}],"src":"4357:177:2"},{"body":{"nodeType":"YulBlock","src":"4636:87:2","statements":[{"nodeType":"YulAssignment","src":"4646:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4658:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"4669:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4654:3:2"},"nodeType":"YulFunctionCall","src":"4654:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4646:4:2"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4688:9:2"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4703:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"4711:4:2","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4699:3:2"},"nodeType":"YulFunctionCall","src":"4699:17:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4681:6:2"},"nodeType":"YulFunctionCall","src":"4681:36:2"},"nodeType":"YulExpressionStatement","src":"4681:36:2"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4605:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4616:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4627:4:2","type":""}],"src":"4539:184:2"}]},"contents":"{\n    { }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_array$_t_struct$_AssetConfigInput_$975_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value0, value0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value0, value0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(value0, value0) }\n        if gt(add(add(_2, mul(length, 0x60)), 32), dataEnd) { revert(value0, value0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_decode_tuple_t_uint128(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffff))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := tail\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), tail)\n        }\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"SafeMath: addition overflow\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"SafeMath: multiplication overflo\")\n        mstore(add(headStart, 96), \"w\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_a28d34ff463a8cc689c6ec4b8c995983f85d0a40987242bc4cc3cec37303c18e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"ONLY_EMISSION_MANAGER\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint128__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_uint128_t_uint128_t_uint256__to_t_uint128_t_uint128_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n}","id":2,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1195":[{"length":32,"start":327},{"length":32,"start":1398},{"length":32,"start":1467},{"length":32,"start":1512}],"1197":[{"length":32,"start":390},{"length":32,"start":922}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100725760003560e01c8063b2a5dbfa11610050578063b2a5dbfa146100bd578063cbcbb507146100d2578063f11b8188146100e757610072565b80633373ee4c14610077578063919cd40f146100a0578063aaf5eb68146100a8575b600080fd5b61008a610085366004610819565b610109565b6040516100979190610a92565b60405180910390f35b61008a610145565b6100b0610169565b6040516100979190610a9b565b6100d06100cb36600461084b565b61016e565b005b6100da610398565b60405161009791906108eb565b6100fa6100f53660046107ff565b6103bc565b60405161009793929190610a65565b73ffffffffffffffffffffffffffffffffffffffff80821660009081526020818152604080832093861683526002909301905220545b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b601281565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101dd90610a11565b60405180910390fd5b60005b8181101561039357600080600085858581811061020257fe5b905060600201604001602081019061021a91906107ff565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061029984848481811061026557fe5b905060600201604001602081019061027d91906107ff565b8286868681811061028a57fe5b90506060020160200135610446565b508383838181106102a657fe5b6102bc92602060609092020190810191506108bb565b81547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9190911617815583838381811061030457fe5b905060600201604001602081019061031c91906107ff565b73ffffffffffffffffffffffffffffffffffffffff167f87fa03892a0556cb6b8f97e6d533a150d4d55fcbf275fff5fa003fa636bcc7fa85858581811061035f57fe5b61037592602060609092020190810191506108bb565b6040516103829190610a48565b60405180910390a2506001016101e9565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600060208190529081526040902080546001909101546fffffffffffffffffffffffffffffffff808316927001000000000000000000000000000000009004169083565b60008282018381101561043f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101dd9061097d565b9392505050565b600182015482546000919070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16428114156104875750905061043f565b84546000906104ab9084906fffffffffffffffffffffffffffffffff168488610545565b905082811461050c578086600101819055508673ffffffffffffffffffffffffffffffffffffffff167f5777ca300dfe5bead41006fbce4389794dbc0ed8d6cccebfaf94630aa04184bc826040516105039190610a92565b60405180910390a25b85546fffffffffffffffffffffffffffffffff428116700100000000000000000000000000000000029116178655925050509392505050565b6000831580610552575081155b8061056e575042836fffffffffffffffffffffffffffffffff16145b806105ab57507f0000000000000000000000000000000000000000000000000000000000000000836fffffffffffffffffffffffffffffffff1610155b156105b757508361065f565b60007f000000000000000000000000000000000000000000000000000000000000000042116105e65742610608565b7f00000000000000000000000000000000000000000000000000000000000000005b90506000610628826fffffffffffffffffffffffffffffffff8716610667565b905061065a876106548661064e670de0b6b3a76400006106488c886106a9565b906106a9565b906106fd565b90610400565b925050505b949350505050565b600061043f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061073f565b6000826106b85750600061013f565b828202828482816106c557fe5b041461043f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101dd906109b4565b600061043f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610785565b6000818484111561077d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101dd919061090c565b505050900390565b600081836107c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101dd919061090c565b5060008385816107cc57fe5b0495945050505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146107fa57600080fd5b919050565b600060208284031215610810578081fd5b61043f826107d6565b6000806040838503121561082b578081fd5b610834836107d6565b9150610842602084016107d6565b90509250929050565b6000806020838503121561085d578182fd5b823567ffffffffffffffff80821115610874578384fd5b818501915085601f830112610887578384fd5b813581811115610895578485fd5b8660206060830285010111156108a9578485fd5b60209290920196919550909350505050565b6000602082840312156108cc578081fd5b81356fffffffffffffffffffffffffffffffff8116811461043f578182fd5b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000602080835283518082850152825b818110156109385785810183015185820160400152820161091c565b818111156109495783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526015908201527f4f4e4c595f454d495353494f4e5f4d414e414745520000000000000000000000604082015260600190565b6fffffffffffffffffffffffffffffffff91909116815260200190565b6fffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b90815260200190565b60ff9190911681526020019056fea26469706673582212200c0023b0e8c70f24c19a00b2c2ce0514962ab8ed199cdc4e80b4febdca7a9fec64736f6c63430007050033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x72 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB2A5DBFA GT PUSH2 0x50 JUMPI DUP1 PUSH4 0xB2A5DBFA EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0xCBCBB507 EQ PUSH2 0xD2 JUMPI DUP1 PUSH4 0xF11B8188 EQ PUSH2 0xE7 JUMPI PUSH2 0x72 JUMP JUMPDEST DUP1 PUSH4 0x3373EE4C EQ PUSH2 0x77 JUMPI DUP1 PUSH4 0x919CD40F EQ PUSH2 0xA0 JUMPI DUP1 PUSH4 0xAAF5EB68 EQ PUSH2 0xA8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8A PUSH2 0x85 CALLDATASIZE PUSH1 0x4 PUSH2 0x819 JUMP JUMPDEST PUSH2 0x109 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x97 SWAP2 SWAP1 PUSH2 0xA92 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x8A PUSH2 0x145 JUMP JUMPDEST PUSH2 0xB0 PUSH2 0x169 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x97 SWAP2 SWAP1 PUSH2 0xA9B JUMP JUMPDEST PUSH2 0xD0 PUSH2 0xCB CALLDATASIZE PUSH1 0x4 PUSH2 0x84B JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST STOP JUMPDEST PUSH2 0xDA PUSH2 0x398 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x97 SWAP2 SWAP1 PUSH2 0x8EB JUMP JUMPDEST PUSH2 0xFA PUSH2 0xF5 CALLDATASIZE PUSH1 0x4 PUSH2 0x7FF JUMP JUMPDEST PUSH2 0x3BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x97 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA65 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP4 ADD SWAP1 MSTORE KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x12 DUP2 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x1E6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DD SWAP1 PUSH2 0xA11 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0x202 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x60 MUL ADD PUSH1 0x40 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x21A SWAP2 SWAP1 PUSH2 0x7FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x299 DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0x265 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x60 MUL ADD PUSH1 0x40 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x27D SWAP2 SWAP1 PUSH2 0x7FF JUMP JUMPDEST DUP3 DUP7 DUP7 DUP7 DUP2 DUP2 LT PUSH2 0x28A JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x60 MUL ADD PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x446 JUMP JUMPDEST POP DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0x2A6 JUMPI INVALID JUMPDEST PUSH2 0x2BC SWAP3 PUSH1 0x20 PUSH1 0x60 SWAP1 SWAP3 MUL ADD SWAP1 DUP2 ADD SWAP2 POP PUSH2 0x8BB JUMP JUMPDEST DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND OR DUP2 SSTORE DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0x304 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x60 MUL ADD PUSH1 0x40 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x31C SWAP2 SWAP1 PUSH2 0x7FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x87FA03892A0556CB6B8F97E6D533A150D4D55FCBF275FFF5FA003FA636BCC7FA DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0x35F JUMPI INVALID JUMPDEST PUSH2 0x375 SWAP3 PUSH1 0x20 PUSH1 0x60 SWAP1 SWAP3 MUL ADD SWAP1 DUP2 ADD SWAP2 POP PUSH2 0x8BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x382 SWAP2 SWAP1 PUSH2 0xA48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 0x1 ADD PUSH2 0x1E9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND SWAP3 PUSH17 0x100000000000000000000000000000000 SWAP1 DIV AND SWAP1 DUP4 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x43F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DD SWAP1 PUSH2 0x97D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD DUP3 SLOAD PUSH1 0x0 SWAP2 SWAP1 PUSH17 0x100000000000000000000000000000000 SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND TIMESTAMP DUP2 EQ ISZERO PUSH2 0x487 JUMPI POP SWAP1 POP PUSH2 0x43F JUMP JUMPDEST DUP5 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x4AB SWAP1 DUP5 SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP9 PUSH2 0x545 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 EQ PUSH2 0x50C JUMPI DUP1 DUP7 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x5777CA300DFE5BEAD41006FBCE4389794DBC0ED8D6CCCEBFAF94630AA04184BC DUP3 PUSH1 0x40 MLOAD PUSH2 0x503 SWAP2 SWAP1 PUSH2 0xA92 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST DUP6 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF TIMESTAMP DUP2 AND PUSH17 0x100000000000000000000000000000000 MUL SWAP2 AND OR DUP7 SSTORE SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x552 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x56E JUMPI POP TIMESTAMP DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x5AB JUMPI POP PUSH32 0x0 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO JUMPDEST ISZERO PUSH2 0x5B7 JUMPI POP DUP4 PUSH2 0x65F JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 TIMESTAMP GT PUSH2 0x5E6 JUMPI TIMESTAMP PUSH2 0x608 JUMP JUMPDEST PUSH32 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x628 DUP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH2 0x667 JUMP JUMPDEST SWAP1 POP PUSH2 0x65A DUP8 PUSH2 0x654 DUP7 PUSH2 0x64E PUSH8 0xDE0B6B3A7640000 PUSH2 0x648 DUP13 DUP9 PUSH2 0x6A9 JUMP JUMPDEST SWAP1 PUSH2 0x6A9 JUMP JUMPDEST SWAP1 PUSH2 0x6FD JUMP JUMPDEST SWAP1 PUSH2 0x400 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43F DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH2 0x73F JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x6B8 JUMPI POP PUSH1 0x0 PUSH2 0x13F JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x6C5 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x43F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DD SWAP1 PUSH2 0x9B4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43F DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH2 0x785 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x77D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0x90C JUMP JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x7C0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0x90C JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP6 DUP2 PUSH2 0x7CC JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x7FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x810 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x43F DUP3 PUSH2 0x7D6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x82B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x834 DUP4 PUSH2 0x7D6 JUMP JUMPDEST SWAP2 POP PUSH2 0x842 PUSH1 0x20 DUP5 ADD PUSH2 0x7D6 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x85D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x874 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x887 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x895 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 PUSH1 0x60 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x8A9 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8CC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x43F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x938 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x91C JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x949 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206D756C7469706C69636174696F6E206F766572666C6F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7700000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F4E4C595F454D495353494F4E5F4D414E414745520000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC STOP 0x23 0xB0 0xE8 0xC7 0xF 0x24 0xC1 SWAP11 STOP 0xB2 0xC2 0xCE SDIV EQ SWAP7 0x2A 0xB8 0xED NOT SWAP13 0xDC 0x4E DUP1 0xB4 INVALID 0xBD 0xCA PUSH27 0x9FEC64736F6C634300070500330000000000000000000000000000 ","sourceMap":"27976:7622:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;35468:128;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;28220:41;;;:::i;28312:36::-;;;:::i;:::-;;;;;;;:::i;28960:709::-;;;;;;:::i;:::-;;:::i;:::-;;28266:41;;;:::i;:::-;;;;;;;:::i;28353:43::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;35468:128::-;35566:13;;;;35544:7;35566:13;;;;;;;;;;;:25;;;;;:19;;;;:25;;;;35468:128;;;;;:::o;28220:41::-;;;:::o;28312:36::-;28346:2;28312:36;:::o;28960:709::-;29092:10;:30;29106:16;29092:30;;29084:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;29160:9;29155:510;29175:28;;;29155:510;;;29218:29;29250:6;:44;29257:17;;29275:1;29257:20;;;;;;;;;;;;:36;;;;;;;;;;:::i;:::-;29250:44;;;;;;;;;;;;;;;29218:76;;29303:142;29338:17;;29356:1;29338:20;;;;;;;;;;;;:36;;;;;;;;;;:::i;:::-;29384:11;29405:17;;29423:1;29405:20;;;;;;;;;;;;:32;;;29303:25;:142::i;:::-;;29486:17;;29504:1;29486:20;;;;;;;:38;;;:20;;;;;:38;;;;-1:-1:-1;29486:38:0;:::i;:::-;29454:70;;;;;;;;;;;;29566:17;;29584:1;29566:20;;;;;;;;;;;;:36;;;;;;;;;;:::i;:::-;29538:120;;;29612:17;;29630:1;29612:20;;;;;;;:38;;;:20;;;;;:38;;;;-1:-1:-1;29612:38:0;:::i;:::-;29538:120;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;29205:3:0;;29155:510;;;;28960:709;;:::o;28266:41::-;;;:::o;28353:43::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;6845:162::-;6903:7;6930:5;;;6949:6;;;;6941:46;;;;;;;;;;;;:::i;:::-;7001:1;6845:162;-1:-1:-1;;;6845:162:0:o;30080:689::-;30260:17;;;;30313:31;;30226:7;;30260:17;30313:31;;;;;30355:15;:38;;30351:74;;;-1:-1:-1;30410:8:0;-1:-1:-1;30403:15:0;;30351:74;30481:29;;30431:16;;30456:89;;30471:8;;30481:29;;30512:19;30533:11;30456:14;:89::i;:::-;30431:114;;30568:8;30556;:20;30552:126;;30606:8;30586:11;:17;;:28;;;;30645:15;30627:44;;;30662:8;30627:44;;;;;;:::i;:::-;;;;;;;;30552:126;30684:58;;;30726:15;30684:58;;;;;;;;;30756:8;-1:-1:-1;;;30080:689:0;;;;;:::o;34565:693::-;34732:7;34758:22;;;:49;;-1:-1:-1;34790:17:0;;34758:49;:97;;;;34840:15;34817:19;:38;;;34758:97;:146;;;;34888:16;34865:19;:39;;;;34758:146;34747:198;;;-1:-1:-1;34926:12:0;34919:19;;34747:198;34951:24;35002:16;34984:15;:34;:71;;35040:15;34984:71;;;35021:16;34984:71;34951:104;-1:-1:-1;35061:17:0;35081:41;34951:104;35081:41;;;:20;:41::i;:::-;35061:61;-1:-1:-1;35141:112:0;35233:12;35141:78;35206:12;35141:60;35178:22;35141:32;:17;35061:61;35141:21;:32::i;:::-;:36;;:60::i;:::-;:64;;:78::i;:::-;:82;;:112::i;:::-;35128:125;;;;34565:693;;;;;;;:::o;7251:128::-;7309:7;7331:43;7335:1;7338;7331:43;;;;;;;;;;;;;;;;;:3;:43::i;8052:419::-;8110:7;8335:6;8331:35;;-1:-1:-1;8358:1:0;8351:8;;8331:35;8384:5;;;8388:1;8384;:5;:1;8403:5;;;;;:10;8395:56;;;;;;;;;;;;:::i;8902:124::-;8960:7;8982:39;8986:1;8989;8982:39;;;;;;;;;;;;;;;;;:3;:39::i;7643:189::-;7745:7;7776:12;7768:6;;;;7760:29;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;7807:5:0;;;7643:189::o;9477:332::-;9579:7;9671:12;9664:5;9656:28;;;;;;;;;;;;;:::i;:::-;;9690:9;9706:1;9702;:5;;;;;;;9477:332;-1:-1:-1;;;;;9477:332:0:o;14:198:2:-;84:20;;144:42;133:54;;123:65;;113:2;;202:1;199;192:12;113:2;65:147;;;:::o;217:198::-;;329:2;317:9;308:7;304:23;300:32;297:2;;;350:6;342;335:22;297:2;378:31;399:9;378:31;:::i;420:274::-;;;549:2;537:9;528:7;524:23;520:32;517:2;;;570:6;562;555:22;517:2;598:31;619:9;598:31;:::i;:::-;588:41;;648:40;684:2;673:9;669:18;648:40;:::i;:::-;638:50;;507:187;;;;;:::o;699:703::-;;;881:2;869:9;860:7;856:23;852:32;849:2;;;902:6;894;887:22;849:2;947:9;934:23;976:18;1017:2;1009:6;1006:14;1003:2;;;1038:6;1030;1023:22;1003:2;1081:6;1070:9;1066:22;1056:32;;1126:7;1119:4;1115:2;1111:13;1107:27;1097:2;;1153:6;1145;1138:22;1097:2;1198;1185:16;1224:2;1216:6;1213:14;1210:2;;;1245:6;1237;1230:22;1210:2;1306:7;1301:2;1293:4;1285:6;1281:17;1277:2;1273:26;1269:35;1266:48;1263:2;;;1332:6;1324;1317:22;1263:2;1368;1360:11;;;;;1390:6;;-1:-1:-1;839:563:2;;-1:-1:-1;;;;839:563:2:o;1407:321::-;;1519:2;1507:9;1498:7;1494:23;1490:32;1487:2;;;1540:6;1532;1525:22;1487:2;1584:9;1571:23;1634:34;1627:5;1623:46;1616:5;1613:57;1603:2;;1689:6;1681;1674:22;1733:226;1909:42;1897:55;;;;1879:74;;1867:2;1852:18;;1834:125::o;1964:662::-;;2105:2;2134;2123:9;2116:21;2166:6;2160:13;2209:6;2204:2;2193:9;2189:18;2182:34;2234:4;2247:140;2261:6;2258:1;2255:13;2247:140;;;2356:14;;;2352:23;;2346:30;2322:17;;;2341:2;2318:26;2311:66;2276:10;;2247:140;;;2405:6;2402:1;2399:13;2396:2;;;2475:4;2470:2;2461:6;2450:9;2446:22;2442:31;2435:45;2396:2;-1:-1:-1;2542:2:2;2530:15;2547:66;2526:88;2511:104;;;;2617:2;2507:113;;2085:541;-1:-1:-1;;;2085:541:2:o;2631:351::-;2833:2;2815:21;;;2872:2;2852:18;;;2845:30;2911:29;2906:2;2891:18;;2884:57;2973:2;2958:18;;2805:177::o;2987:397::-;3189:2;3171:21;;;3228:2;3208:18;;;3201:30;3267:34;3262:2;3247:18;;3240:62;3338:3;3333:2;3318:18;;3311:31;3374:3;3359:19;;3161:223::o;3389:345::-;3591:2;3573:21;;;3630:2;3610:18;;;3603:30;3669:23;3664:2;3649:18;;3642:51;3725:2;3710:18;;3563:171::o;3739:218::-;3915:34;3903:47;;;;3885:66;;3873:2;3858:18;;3840:117::o;3962:390::-;4174:34;4235:15;;;4217:34;;4287:15;;;;4282:2;4267:18;;4260:43;4334:2;4319:18;;4312:34;;;;4152:2;4137:18;;4119:233::o;4357:177::-;4503:25;;;4491:2;4476:18;;4458:76::o;4539:184::-;4711:4;4699:17;;;;4681:36;;4669:2;4654:18;;4636:87::o"},"gasEstimates":{"creation":{"codeDepositCost":"556600","executionCost":"infinite","totalCost":"infinite"},"external":{"DISTRIBUTION_END()":"infinite","EMISSION_MANAGER()":"infinite","PRECISION()":"285","assets(address)":"2200","configureAssets((uint128,uint256,address)[])":"infinite","getUserAssetData(address,address)":"infinite"},"internal":{"_claimRewards(address,struct DistributionTypes.UserStakeInput memory[] memory)":"infinite","_getAssetIndex(uint256,uint256,uint128,uint256)":"infinite","_getRewards(uint256,uint256,uint256)":"infinite","_getUnclaimedRewards(address,struct DistributionTypes.UserStakeInput memory[] memory)":"infinite","_updateAssetStateInternal(address,struct AaveDistributionManager.AssetData storage pointer,uint256)":"infinite","_updateUserAssetInternal(address,address,uint256,uint256)":"infinite"}},"methodIdentifiers":{"DISTRIBUTION_END()":"919cd40f","EMISSION_MANAGER()":"cbcbb507","PRECISION()":"aaf5eb68","assets(address)":"f11b8188","configureAssets((uint128,uint256,address)[])":"b2a5dbfa","getUserAssetData(address,address)":"3373ee4c"}},"metadata":"{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emissionManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distributionDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emission\",\"type\":\"uint256\"}],\"name\":\"AssetConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"AssetIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"UserIndexUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DISTRIBUTION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMISSION_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"emissionPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"emissionPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"}],\"internalType\":\"struct DistributionTypes.AssetConfigInput[]\",\"name\":\"assetsConfigInput\",\"type\":\"tuple[]\"}],\"name\":\"configureAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getUserAssetData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aave*\",\"kind\":\"dev\",\"methods\":{\"configureAssets((uint128,uint256,address)[])\":{\"details\":\"Configures the distribution of rewards for a list of assets\",\"params\":{\"assetsConfigInput\":\"The list of configurations to apply*\"}},\"getUserAssetData(address,address)\":{\"details\":\"Returns the data of an user on a distribution\",\"params\":{\"asset\":\"The address of the reference asset of the distribution\",\"user\":\"Address of the user\"},\"returns\":{\"_0\":\"The new index*\"}}},\"title\":\"AaveDistributionManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Accounting contract to manage multiple staking distributions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":\"AaveDistributionManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-12-10\\n */\\n\\n// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGovernancePowerDelegationToken {\\n  enum DelegationType {VOTING_POWER, PROPOSITION_POWER}\\n\\n  /**\\n   * @dev emitted when a user delegates to another\\n   * @param delegator the delegator\\n   * @param delegatee the delegatee\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    DelegationType delegationType\\n  );\\n\\n  /**\\n   * @dev emitted when an action changes the delegated power of a user\\n   * @param user the user which delegated power has changed\\n   * @param amount the amount of delegated power for the user\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external virtual;\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (address);\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view virtual returns (uint256);\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view virtual returns (uint256);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string internal _name;\\n  string internal _symbol;\\n  uint8 private _decimals;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n   * a default value of 18.\\n   *\\n   * To select a different value for {decimals}, use {_setupDecimals}.\\n   *\\n   * All three of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name, string memory symbol) public {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = 18;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        'ERC20: decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n   *\\n   * This is internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Sets {decimals} to a value other than the default one of 18.\\n   *\\n   * WARNING: This function should only be called from the constructor. Most\\n   * applications that interact with token contracts will not expect\\n   * {decimals} to ever change, and may work incorrectly if it does.\\n   */\\n  function _setupDecimals(uint8 decimals_) internal {\\n    _decimals = decimals_;\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be to transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\\ninterface IStakedAave {\\n  function stake(address to, uint256 amount) external;\\n\\n  function redeem(address to, uint256 amount) external;\\n\\n  function cooldown() external;\\n\\n  function claimRewards(address to, uint256 amount) external;\\n}\\n\\ninterface ITransferHook {\\n  function onTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint128 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\\ninterface IAaveDistributionManager {\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external;\\n}\\n\\n/**\\n * @title AaveDistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract AaveDistributionManager is IAaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  struct AssetData {\\n    uint128 emissionPerSecond;\\n    uint128 lastUpdateTimestamp;\\n    uint256 index;\\n    mapping(address => uint256) users;\\n  }\\n\\n  uint256 public immutable DISTRIBUTION_END;\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n\\n  constructor(address emissionManager, uint256 distributionDuration) public {\\n    DISTRIBUTION_END = block.timestamp.add(distributionDuration);\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /**\\n   * @dev Configures the distribution of rewards for a list of assets\\n   * @param assetsConfigInput The list of configurations to apply\\n   **/\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external\\n    override\\n  {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address underlyingAsset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex =\\n      _getAssetIndex(oldIndex, assetConfig.emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n    if (newIndex != oldIndex) {\\n      assetConfig.index = newIndex;\\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\\n    }\\n\\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards = accruedRewards.add(\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        )\\n      );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex =\\n        _getAssetIndex(\\n          assetConfig.index,\\n          assetConfig.emissionPerSecond,\\n          assetConfig.lastUpdateTimestamp,\\n          stakes[i].totalStaked\\n        );\\n\\n      accruedRewards = accruedRewards.add(\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\\n      );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= DISTRIBUTION_END\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp =\\n      block.timestamp > DISTRIBUTION_END ? DISTRIBUTION_END : block.timestamp;\\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\\n    return\\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\\n        currentIndex\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n}\\n\\n/**\\n * @notice implementation of the AAVE token contract\\n * @author Aave\\n */\\nabstract contract GovernancePowerDelegationERC20 is ERC20, IGovernancePowerDelegationToken {\\n  using SafeMath for uint256;\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH =\\n    keccak256('DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)');\\n\\n  bytes32 public constant DELEGATE_TYPEHASH =\\n    keccak256('Delegate(address delegatee,uint256 nonce,uint256 expiry)');\\n\\n  /// @dev snapshot of a value on a specific block, used for votes\\n  struct Snapshot {\\n    uint128 blockNumber;\\n    uint128 value;\\n  }\\n\\n  /**\\n   * @dev delegates one specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external override {\\n    _delegateByType(msg.sender, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external override {\\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    return _getDelegatee(delegator, delegates);\\n  }\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\\n  }\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view override returns (uint256) {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\\n  }\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   * used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\\n   * In this initial implementation with no AAVE minting, simply returns the current supply\\n   * A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view override returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _delegateByType(\\n    address delegator,\\n    address delegatee,\\n    DelegationType delegationType\\n  ) internal {\\n    require(delegatee != address(0), 'INVALID_DELEGATEE');\\n\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    uint256 delegatorBalance = balanceOf(delegator);\\n\\n    address previousDelegatee = _getDelegatee(delegator, delegates);\\n\\n    delegates[delegator] = delegatee;\\n\\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\\n    emit DelegateChanged(delegator, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev moves delegated power from one user to another\\n   * @param from the user from which delegated power is moved\\n   * @param to the user that will receive the delegated power\\n   * @param amount the amount of delegated power to be moved\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _moveDelegatesByType(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    DelegationType delegationType\\n  ) internal {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    if (from != address(0)) {\\n      uint256 previous = 0;\\n      uint256 fromSnapshotsCount = snapshotsCounts[from];\\n\\n      if (fromSnapshotsCount != 0) {\\n        previous = snapshots[from][fromSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(from);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        from,\\n        uint128(previous),\\n        uint128(previous.sub(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(from, previous.sub(amount), delegationType);\\n    }\\n    if (to != address(0)) {\\n      uint256 previous = 0;\\n      uint256 toSnapshotsCount = snapshotsCounts[to];\\n      if (toSnapshotsCount != 0) {\\n        previous = snapshots[to][toSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(to);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        to,\\n        uint128(previous),\\n        uint128(previous.add(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(to, previous.add(amount), delegationType);\\n    }\\n  }\\n\\n  /**\\n   * @dev searches a snapshot by block number. Uses binary search.\\n   * @param snapshots the snapshots mapping\\n   * @param snapshotsCounts the number of snapshots\\n   * @param user the user for which the snapshot is being searched\\n   * @param blockNumber the block number being searched\\n   **/\\n  function _searchByBlockNumber(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address user,\\n    uint256 blockNumber\\n  ) internal view returns (uint256) {\\n    require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\\n\\n    uint256 snapshotsCount = snapshotsCounts[user];\\n\\n    if (snapshotsCount == 0) {\\n      return balanceOf(user);\\n    }\\n\\n    // First check most recent balance\\n    if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\\n      return snapshots[user][snapshotsCount - 1].value;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (snapshots[user][0].blockNumber > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint256 lower = 0;\\n    uint256 upper = snapshotsCount - 1;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Snapshot memory snapshot = snapshots[user][center];\\n      if (snapshot.blockNumber == blockNumber) {\\n        return snapshot.value;\\n      } else if (snapshot.blockNumber < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return snapshots[user][lower].value;\\n  }\\n\\n  /**\\n   * @dev returns the delegation data (snapshot, snapshotsCount, list of delegates) by delegation type\\n   * NOTE: Ideal implementation would have mapped this in a struct by delegation type. Unfortunately,\\n   * the AAVE token and StakeToken already include a mapping for the snapshots, so we require contracts\\n   * who inherit from this to provide access to the delegation data by overriding this method.\\n   * @param delegationType the type of delegation\\n   **/\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    virtual\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    );\\n\\n  /**\\n   * @dev Writes a snapshot for an owner of tokens\\n   * @param owner The owner of the tokens\\n   * @param oldValue The value before the operation that is gonna be executed after the snapshot\\n   * @param newValue The value after the operation\\n   */\\n  function _writeSnapshot(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address owner,\\n    uint128 oldValue,\\n    uint128 newValue\\n  ) internal {\\n    uint128 currentBlock = uint128(block.number);\\n\\n    uint256 ownerSnapshotsCount = snapshotsCounts[owner];\\n    mapping(uint256 => Snapshot) storage snapshotsOwner = snapshots[owner];\\n\\n    // Doing multiple operations in the same block\\n    if (\\n      ownerSnapshotsCount != 0 &&\\n      snapshotsOwner[ownerSnapshotsCount - 1].blockNumber == currentBlock\\n    ) {\\n      snapshotsOwner[ownerSnapshotsCount - 1].value = newValue;\\n    } else {\\n      snapshotsOwner[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\\n      snapshotsCounts[owner] = ownerSnapshotsCount + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the user delegatee. If a user never performed any delegation,\\n   * his delegated address will be 0x0. In that case we simply return the user itself\\n   * @param delegator the address of the user for which return the delegatee\\n   * @param delegates the array of delegates for a particular type of delegation\\n   **/\\n  function _getDelegatee(address delegator, mapping(address => address) storage delegates)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address previousDelegatee = delegates[delegator];\\n\\n    if (previousDelegatee == address(0)) {\\n      return delegator;\\n    }\\n\\n    return previousDelegatee;\\n  }\\n}\\n\\n/**\\n * @title ERC20WithSnapshot\\n * @notice ERC20 including snapshots of balances on transfer-related actions\\n * @author Aave\\n **/\\nabstract contract GovernancePowerWithSnapshot is GovernancePowerDelegationERC20 {\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @dev The following storage layout points to the prior StakedToken.sol implementation:\\n   * _snapshots => _votingSnapshots\\n   * _snapshotsCounts =>  _votingSnapshotsCounts\\n   * _aaveGovernance => _aaveGovernance\\n   */\\n  mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\\n  mapping(address => uint256) public _votingSnapshotsCounts;\\n\\n  /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\\n  /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\\n  /// to control all potential reentrancies by calling back the this contract\\n  ITransferHook public _aaveGovernance;\\n\\n  function _setAaveGovernance(ITransferHook aaveGovernance) internal virtual {\\n    _aaveGovernance = aaveGovernance;\\n  }\\n}\\n\\n/**\\n * @title StakedToken\\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\\n * @author Aave\\n **/\\ncontract StakedTokenV2Rev3 is\\n  IStakedAave,\\n  GovernancePowerWithSnapshot,\\n  VersionedInitializable,\\n  AaveDistributionManager\\n{\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev Start of Storage layout from StakedToken v1\\n  uint256 public constant REVISION = 3;\\n\\n  IERC20 public immutable STAKED_TOKEN;\\n  IERC20 public immutable REWARD_TOKEN;\\n  uint256 public immutable COOLDOWN_SECONDS;\\n\\n  /// @notice Seconds available to redeem once the cooldown period is fullfilled\\n  uint256 public immutable UNSTAKE_WINDOW;\\n\\n  /// @notice Address to pull from the rewards, needs to have approved this contract\\n  address public immutable REWARDS_VAULT;\\n\\n  mapping(address => uint256) public stakerRewardsToClaim;\\n  mapping(address => uint256) public stakersCooldowns;\\n\\n  /// @dev End of Storage layout from StakedToken v1\\n\\n  /// @dev To see the voting mappings, go to GovernancePowerWithSnapshot.sol\\n  mapping(address => address) internal _votingDelegates;\\n\\n  mapping(address => mapping(uint256 => Snapshot)) internal _propositionPowerSnapshots;\\n  mapping(address => uint256) internal _propositionPowerSnapshotsCounts;\\n  mapping(address => address) internal _propositionPowerDelegates;\\n\\n  bytes32 public DOMAIN_SEPARATOR;\\n  bytes public constant EIP712_REVISION = bytes('1');\\n  bytes32 internal constant EIP712_DOMAIN =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  /// @dev owner => next valid nonce to submit with permit()\\n  mapping(address => uint256) public _nonces;\\n\\n  event Staked(address indexed from, address indexed onBehalfOf, uint256 amount);\\n  event Redeem(address indexed from, address indexed to, uint256 amount);\\n\\n  event RewardsAccrued(address user, uint256 amount);\\n  event RewardsClaimed(address indexed from, address indexed to, uint256 amount);\\n\\n  event Cooldown(address indexed user);\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals,\\n    address governance\\n  ) public ERC20(name, symbol) AaveDistributionManager(emissionManager, distributionDuration) {\\n    STAKED_TOKEN = stakedToken;\\n    REWARD_TOKEN = rewardToken;\\n    COOLDOWN_SECONDS = cooldownSeconds;\\n    UNSTAKE_WINDOW = unstakeWindow;\\n    REWARDS_VAULT = rewardsVault;\\n    _aaveGovernance = ITransferHook(governance);\\n    ERC20._setupDecimals(decimals);\\n  }\\n\\n  /**\\n   * @dev Called by the proxy contract\\n   **/\\n  function initialize() external initializer {\\n    uint256 chainId;\\n\\n    //solium-disable-next-line\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN,\\n        keccak256(bytes(name())),\\n        keccak256(EIP712_REVISION),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n\\n    // Update lastUpdateTimestamp of stkAave to reward users since the end of the prior staking period\\n    AssetData storage assetData = assets[address(this)];\\n    assetData.lastUpdateTimestamp = 1620594720;\\n  }\\n\\n  function stake(address onBehalfOf, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    uint256 balanceOfUser = balanceOf(onBehalfOf);\\n\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(onBehalfOf, address(this), balanceOfUser, totalSupply());\\n    if (accruedRewards != 0) {\\n      emit RewardsAccrued(onBehalfOf, accruedRewards);\\n      stakerRewardsToClaim[onBehalfOf] = stakerRewardsToClaim[onBehalfOf].add(accruedRewards);\\n    }\\n\\n    stakersCooldowns[onBehalfOf] = getNextCooldownTimestamp(0, amount, onBehalfOf, balanceOfUser);\\n\\n    _mint(onBehalfOf, amount);\\n    IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit Staked(msg.sender, onBehalfOf, amount);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens, and stop earning rewards\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   **/\\n  function redeem(address to, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    //solium-disable-next-line\\n    uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\\n    require(\\n      block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\\n      'INSUFFICIENT_COOLDOWN'\\n    );\\n    require(\\n      block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n      'UNSTAKE_WINDOW_FINISHED'\\n    );\\n    uint256 balanceOfMessageSender = balanceOf(msg.sender);\\n\\n    uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\\n\\n    _updateCurrentUnclaimedRewards(msg.sender, balanceOfMessageSender, true);\\n\\n    _burn(msg.sender, amountToRedeem);\\n\\n    if (balanceOfMessageSender.sub(amountToRedeem) == 0) {\\n      stakersCooldowns[msg.sender] = 0;\\n    }\\n\\n    IERC20(STAKED_TOKEN).safeTransfer(to, amountToRedeem);\\n\\n    emit Redeem(msg.sender, to, amountToRedeem);\\n  }\\n\\n  /**\\n   * @dev Activates the cooldown period to unstake\\n   * - It can't be called if the user is not staking\\n   **/\\n  function cooldown() external override {\\n    require(balanceOf(msg.sender) != 0, 'INVALID_BALANCE_ON_COOLDOWN');\\n    //solium-disable-next-line\\n    stakersCooldowns[msg.sender] = block.timestamp;\\n\\n    emit Cooldown(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\\n   * @param to Address to stake for\\n   * @param amount Amount to stake\\n   **/\\n  function claimRewards(address to, uint256 amount) external override {\\n    uint256 newTotalRewards =\\n      _updateCurrentUnclaimedRewards(msg.sender, balanceOf(msg.sender), false);\\n    uint256 amountToClaim = (amount == type(uint256).max) ? newTotalRewards : amount;\\n\\n    stakerRewardsToClaim[msg.sender] = newTotalRewards.sub(amountToClaim, 'INVALID_AMOUNT');\\n\\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\\n\\n    emit RewardsClaimed(msg.sender, to, amountToClaim);\\n  }\\n\\n  /**\\n   * @dev Internal ERC20 _transfer of the tokenized staked tokens\\n   * @param from Address to transfer from\\n   * @param to Address to transfer to\\n   * @param amount Amount to transfer\\n   **/\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    uint256 balanceOfFrom = balanceOf(from);\\n    // Sender\\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\\n\\n    // Recipient\\n    if (from != to) {\\n      uint256 balanceOfTo = balanceOf(to);\\n      _updateCurrentUnclaimedRewards(to, balanceOfTo, true);\\n\\n      uint256 previousSenderCooldown = stakersCooldowns[from];\\n      stakersCooldowns[to] = getNextCooldownTimestamp(\\n        previousSenderCooldown,\\n        amount,\\n        to,\\n        balanceOfTo\\n      );\\n      // if cooldown was set and whole balance of sender was transferred - clear cooldown\\n      if (balanceOfFrom == amount && previousSenderCooldown != 0) {\\n        stakersCooldowns[from] = 0;\\n      }\\n    }\\n\\n    super._transfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Updates the user state related with his accrued rewards\\n   * @param user Address of the user\\n   * @param userBalance The current balance of the user\\n   * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\\n   * @return The unclaimed rewards that were added to the total accrued\\n   **/\\n  function _updateCurrentUnclaimedRewards(\\n    address user,\\n    uint256 userBalance,\\n    bool updateStorage\\n  ) internal returns (uint256) {\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(user, address(this), userBalance, totalSupply());\\n    uint256 unclaimedRewards = stakerRewardsToClaim[user].add(accruedRewards);\\n\\n    if (accruedRewards != 0) {\\n      if (updateStorage) {\\n        stakerRewardsToClaim[user] = unclaimedRewards;\\n      }\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n\\n    return unclaimedRewards;\\n  }\\n\\n  /**\\n   * @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\\n   *  - If the timestamp of the sender is \\\"better\\\" or the timestamp of the recipient is 0, we take the one of the recipient\\n   *  - Weighted average of from/to cooldown timestamps if:\\n   *    # The sender doesn't have the cooldown activated (timestamp 0).\\n   *    # The sender timestamp is expired\\n   *    # The sender has a \\\"worse\\\" timestamp\\n   *  - If the receiver's cooldown timestamp expired (too old), the next is 0\\n   * @param fromCooldownTimestamp Cooldown timestamp of the sender\\n   * @param amountToReceive Amount\\n   * @param toAddress Address of the recipient\\n   * @param toBalance Current balance of the receiver\\n   * @return The new cooldown timestamp\\n   **/\\n  function getNextCooldownTimestamp(\\n    uint256 fromCooldownTimestamp,\\n    uint256 amountToReceive,\\n    address toAddress,\\n    uint256 toBalance\\n  ) public view returns (uint256) {\\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\\n    if (toCooldownTimestamp == 0) {\\n      return 0;\\n    }\\n\\n    uint256 minimalValidCooldownTimestamp =\\n      block.timestamp.sub(COOLDOWN_SECONDS).sub(UNSTAKE_WINDOW);\\n\\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\\n      toCooldownTimestamp = 0;\\n    } else {\\n      uint256 fromCooldownTimestamp =\\n        (minimalValidCooldownTimestamp > fromCooldownTimestamp)\\n          ? block.timestamp\\n          : fromCooldownTimestamp;\\n\\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\\n        return toCooldownTimestamp;\\n      } else {\\n        toCooldownTimestamp = (\\n          amountToReceive.mul(fromCooldownTimestamp).add(toBalance.mul(toCooldownTimestamp))\\n        )\\n          .div(amountToReceive.add(toBalance));\\n      }\\n    }\\n    return toCooldownTimestamp;\\n  }\\n\\n  /**\\n   * @dev Return the total rewards pending to claim by an staker\\n   * @param staker The staker address\\n   * @return The rewards\\n   */\\n  function getTotalRewardsBalance(address staker) external view returns (uint256) {\\n    DistributionTypes.UserStakeInput[] memory userStakeInputs =\\n      new DistributionTypes.UserStakeInput[](1);\\n    userStakeInputs[0] = DistributionTypes.UserStakeInput({\\n      underlyingAsset: address(this),\\n      stakedByUser: balanceOf(staker),\\n      totalStaked: totalSupply()\\n    });\\n    return stakerRewardsToClaim[staker].add(_getUnclaimedRewards(staker, userStakeInputs));\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   * @return The revision\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner the owner of the funds\\n   * @param spender the spender\\n   * @param value the amount\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(owner != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    uint256 currentValidNonce = _nonces[owner];\\n    bytes32 digest =\\n      keccak256(\\n        abi.encodePacked(\\n          '\\\\x19\\\\x01',\\n          DOMAIN_SEPARATOR,\\n          keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n        )\\n      );\\n\\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _nonces[owner] = currentValidNonce.add(1);\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\\n   * - On _transfer, it writes snapshots for both \\\"from\\\" and \\\"to\\\"\\n   * - On _mint, only for _to\\n   * - On _burn, only for _from\\n   * @param from the from address\\n   * @param to the to address\\n   * @param amount the amount to transfer\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    address votingFromDelegatee = _votingDelegates[from];\\n    address votingToDelegatee = _votingDelegates[to];\\n\\n    if (votingFromDelegatee == address(0)) {\\n      votingFromDelegatee = from;\\n    }\\n    if (votingToDelegatee == address(0)) {\\n      votingToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      votingFromDelegatee,\\n      votingToDelegatee,\\n      amount,\\n      DelegationType.VOTING_POWER\\n    );\\n\\n    address propPowerFromDelegatee = _propositionPowerDelegates[from];\\n    address propPowerToDelegatee = _propositionPowerDelegates[to];\\n\\n    if (propPowerFromDelegatee == address(0)) {\\n      propPowerFromDelegatee = from;\\n    }\\n    if (propPowerToDelegatee == address(0)) {\\n      propPowerToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      propPowerFromDelegatee,\\n      propPowerToDelegatee,\\n      amount,\\n      DelegationType.PROPOSITION_POWER\\n    );\\n\\n    // caching the aave governance address to avoid multiple state loads\\n    ITransferHook aaveGovernance = _aaveGovernance;\\n    if (aaveGovernance != ITransferHook(0)) {\\n      aaveGovernance.onTransfer(from, to, amount);\\n    }\\n  }\\n\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    override\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    )\\n  {\\n    if (delegationType == DelegationType.VOTING_POWER) {\\n      return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\\n    } else {\\n      return (\\n        _propositionPowerSnapshots,\\n        _propositionPowerSnapshotsCounts,\\n        _propositionPowerDelegates\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateByTypeBySig(\\n    address delegatee,\\n    DelegationType delegationType,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash =\\n      keccak256(\\n        abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\\n      );\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(signatory, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n}\\n\",\"keccak256\":\"0x193e8dd33d55c137ea32793b1f2c2f06b4b8936ee5c625e38766062c4f89fb43\",\"license\":\"agpl-3.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1204,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:AaveDistributionManager","label":"assets","offset":0,"slot":"0","type":"t_mapping(t_address,t_struct(AssetData)1193_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_struct(AssetData)1193_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct AaveDistributionManager.AssetData)","numberOfBytes":"32","value":"t_struct(AssetData)1193_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(AssetData)1193_storage":{"encoding":"inplace","label":"struct AaveDistributionManager.AssetData","members":[{"astId":1184,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:AaveDistributionManager","label":"emissionPerSecond","offset":0,"slot":"0","type":"t_uint128"},{"astId":1186,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:AaveDistributionManager","label":"lastUpdateTimestamp","offset":16,"slot":"0","type":"t_uint128"},{"astId":1188,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:AaveDistributionManager","label":"index","offset":0,"slot":"1","type":"t_uint256"},{"astId":1192,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:AaveDistributionManager","label":"users","offset":0,"slot":"2","type":"t_mapping(t_address,t_uint256)"}],"numberOfBytes":"96"},"t_uint128":{"encoding":"inplace","label":"uint128","numberOfBytes":"16"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"notice":"Accounting contract to manage multiple staking distributions","version":1}},"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type From https://github.com/OpenZeppelin/openzeppelin-contracts","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220242cb1f9e64f10ea89d3acc9a017c34605f6d15769e5a8f8faa98cc58c87660264736f6c63430007050033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x24 0x2C 0xB1 0xF9 0xE6 0x4F LT 0xEA DUP10 0xD3 0xAC 0xC9 LOG0 OR 0xC3 CHAINID SDIV 0xF6 0xD1 JUMPI PUSH10 0xE5A8F8FAA98CC58C8766 MUL PUSH5 0x736F6C6343 STOP SMOD SDIV STOP CALLER ","sourceMap":"11095:2398:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220242cb1f9e64f10ea89d3acc9a017c34605f6d15769e5a8f8faa98cc58c87660264736f6c63430007050033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x24 0x2C 0xB1 0xF9 0xE6 0x4F LT 0xEA DUP10 0xD3 0xAC 0xC9 LOG0 OR 0xC3 CHAINID SDIV 0xF6 0xD1 JUMPI PUSH10 0xE5A8F8FAA98CC58C8766 MUL PUSH5 0x736F6C6343 STOP SMOD SDIV STOP CALLER ","sourceMap":"11095:2398:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type From https://github.com/OpenZeppelin/openzeppelin-contracts\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-12-10\\n */\\n\\n// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGovernancePowerDelegationToken {\\n  enum DelegationType {VOTING_POWER, PROPOSITION_POWER}\\n\\n  /**\\n   * @dev emitted when a user delegates to another\\n   * @param delegator the delegator\\n   * @param delegatee the delegatee\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    DelegationType delegationType\\n  );\\n\\n  /**\\n   * @dev emitted when an action changes the delegated power of a user\\n   * @param user the user which delegated power has changed\\n   * @param amount the amount of delegated power for the user\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external virtual;\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (address);\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view virtual returns (uint256);\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view virtual returns (uint256);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string internal _name;\\n  string internal _symbol;\\n  uint8 private _decimals;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n   * a default value of 18.\\n   *\\n   * To select a different value for {decimals}, use {_setupDecimals}.\\n   *\\n   * All three of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name, string memory symbol) public {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = 18;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        'ERC20: decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n   *\\n   * This is internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Sets {decimals} to a value other than the default one of 18.\\n   *\\n   * WARNING: This function should only be called from the constructor. Most\\n   * applications that interact with token contracts will not expect\\n   * {decimals} to ever change, and may work incorrectly if it does.\\n   */\\n  function _setupDecimals(uint8 decimals_) internal {\\n    _decimals = decimals_;\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be to transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\\ninterface IStakedAave {\\n  function stake(address to, uint256 amount) external;\\n\\n  function redeem(address to, uint256 amount) external;\\n\\n  function cooldown() external;\\n\\n  function claimRewards(address to, uint256 amount) external;\\n}\\n\\ninterface ITransferHook {\\n  function onTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint128 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\\ninterface IAaveDistributionManager {\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external;\\n}\\n\\n/**\\n * @title AaveDistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract AaveDistributionManager is IAaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  struct AssetData {\\n    uint128 emissionPerSecond;\\n    uint128 lastUpdateTimestamp;\\n    uint256 index;\\n    mapping(address => uint256) users;\\n  }\\n\\n  uint256 public immutable DISTRIBUTION_END;\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n\\n  constructor(address emissionManager, uint256 distributionDuration) public {\\n    DISTRIBUTION_END = block.timestamp.add(distributionDuration);\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /**\\n   * @dev Configures the distribution of rewards for a list of assets\\n   * @param assetsConfigInput The list of configurations to apply\\n   **/\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external\\n    override\\n  {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address underlyingAsset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex =\\n      _getAssetIndex(oldIndex, assetConfig.emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n    if (newIndex != oldIndex) {\\n      assetConfig.index = newIndex;\\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\\n    }\\n\\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards = accruedRewards.add(\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        )\\n      );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex =\\n        _getAssetIndex(\\n          assetConfig.index,\\n          assetConfig.emissionPerSecond,\\n          assetConfig.lastUpdateTimestamp,\\n          stakes[i].totalStaked\\n        );\\n\\n      accruedRewards = accruedRewards.add(\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\\n      );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= DISTRIBUTION_END\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp =\\n      block.timestamp > DISTRIBUTION_END ? DISTRIBUTION_END : block.timestamp;\\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\\n    return\\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\\n        currentIndex\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n}\\n\\n/**\\n * @notice implementation of the AAVE token contract\\n * @author Aave\\n */\\nabstract contract GovernancePowerDelegationERC20 is ERC20, IGovernancePowerDelegationToken {\\n  using SafeMath for uint256;\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH =\\n    keccak256('DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)');\\n\\n  bytes32 public constant DELEGATE_TYPEHASH =\\n    keccak256('Delegate(address delegatee,uint256 nonce,uint256 expiry)');\\n\\n  /// @dev snapshot of a value on a specific block, used for votes\\n  struct Snapshot {\\n    uint128 blockNumber;\\n    uint128 value;\\n  }\\n\\n  /**\\n   * @dev delegates one specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external override {\\n    _delegateByType(msg.sender, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external override {\\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    return _getDelegatee(delegator, delegates);\\n  }\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\\n  }\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view override returns (uint256) {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\\n  }\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   * used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\\n   * In this initial implementation with no AAVE minting, simply returns the current supply\\n   * A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view override returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _delegateByType(\\n    address delegator,\\n    address delegatee,\\n    DelegationType delegationType\\n  ) internal {\\n    require(delegatee != address(0), 'INVALID_DELEGATEE');\\n\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    uint256 delegatorBalance = balanceOf(delegator);\\n\\n    address previousDelegatee = _getDelegatee(delegator, delegates);\\n\\n    delegates[delegator] = delegatee;\\n\\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\\n    emit DelegateChanged(delegator, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev moves delegated power from one user to another\\n   * @param from the user from which delegated power is moved\\n   * @param to the user that will receive the delegated power\\n   * @param amount the amount of delegated power to be moved\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _moveDelegatesByType(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    DelegationType delegationType\\n  ) internal {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    if (from != address(0)) {\\n      uint256 previous = 0;\\n      uint256 fromSnapshotsCount = snapshotsCounts[from];\\n\\n      if (fromSnapshotsCount != 0) {\\n        previous = snapshots[from][fromSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(from);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        from,\\n        uint128(previous),\\n        uint128(previous.sub(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(from, previous.sub(amount), delegationType);\\n    }\\n    if (to != address(0)) {\\n      uint256 previous = 0;\\n      uint256 toSnapshotsCount = snapshotsCounts[to];\\n      if (toSnapshotsCount != 0) {\\n        previous = snapshots[to][toSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(to);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        to,\\n        uint128(previous),\\n        uint128(previous.add(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(to, previous.add(amount), delegationType);\\n    }\\n  }\\n\\n  /**\\n   * @dev searches a snapshot by block number. Uses binary search.\\n   * @param snapshots the snapshots mapping\\n   * @param snapshotsCounts the number of snapshots\\n   * @param user the user for which the snapshot is being searched\\n   * @param blockNumber the block number being searched\\n   **/\\n  function _searchByBlockNumber(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address user,\\n    uint256 blockNumber\\n  ) internal view returns (uint256) {\\n    require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\\n\\n    uint256 snapshotsCount = snapshotsCounts[user];\\n\\n    if (snapshotsCount == 0) {\\n      return balanceOf(user);\\n    }\\n\\n    // First check most recent balance\\n    if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\\n      return snapshots[user][snapshotsCount - 1].value;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (snapshots[user][0].blockNumber > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint256 lower = 0;\\n    uint256 upper = snapshotsCount - 1;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Snapshot memory snapshot = snapshots[user][center];\\n      if (snapshot.blockNumber == blockNumber) {\\n        return snapshot.value;\\n      } else if (snapshot.blockNumber < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return snapshots[user][lower].value;\\n  }\\n\\n  /**\\n   * @dev returns the delegation data (snapshot, snapshotsCount, list of delegates) by delegation type\\n   * NOTE: Ideal implementation would have mapped this in a struct by delegation type. Unfortunately,\\n   * the AAVE token and StakeToken already include a mapping for the snapshots, so we require contracts\\n   * who inherit from this to provide access to the delegation data by overriding this method.\\n   * @param delegationType the type of delegation\\n   **/\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    virtual\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    );\\n\\n  /**\\n   * @dev Writes a snapshot for an owner of tokens\\n   * @param owner The owner of the tokens\\n   * @param oldValue The value before the operation that is gonna be executed after the snapshot\\n   * @param newValue The value after the operation\\n   */\\n  function _writeSnapshot(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address owner,\\n    uint128 oldValue,\\n    uint128 newValue\\n  ) internal {\\n    uint128 currentBlock = uint128(block.number);\\n\\n    uint256 ownerSnapshotsCount = snapshotsCounts[owner];\\n    mapping(uint256 => Snapshot) storage snapshotsOwner = snapshots[owner];\\n\\n    // Doing multiple operations in the same block\\n    if (\\n      ownerSnapshotsCount != 0 &&\\n      snapshotsOwner[ownerSnapshotsCount - 1].blockNumber == currentBlock\\n    ) {\\n      snapshotsOwner[ownerSnapshotsCount - 1].value = newValue;\\n    } else {\\n      snapshotsOwner[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\\n      snapshotsCounts[owner] = ownerSnapshotsCount + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the user delegatee. If a user never performed any delegation,\\n   * his delegated address will be 0x0. In that case we simply return the user itself\\n   * @param delegator the address of the user for which return the delegatee\\n   * @param delegates the array of delegates for a particular type of delegation\\n   **/\\n  function _getDelegatee(address delegator, mapping(address => address) storage delegates)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address previousDelegatee = delegates[delegator];\\n\\n    if (previousDelegatee == address(0)) {\\n      return delegator;\\n    }\\n\\n    return previousDelegatee;\\n  }\\n}\\n\\n/**\\n * @title ERC20WithSnapshot\\n * @notice ERC20 including snapshots of balances on transfer-related actions\\n * @author Aave\\n **/\\nabstract contract GovernancePowerWithSnapshot is GovernancePowerDelegationERC20 {\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @dev The following storage layout points to the prior StakedToken.sol implementation:\\n   * _snapshots => _votingSnapshots\\n   * _snapshotsCounts =>  _votingSnapshotsCounts\\n   * _aaveGovernance => _aaveGovernance\\n   */\\n  mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\\n  mapping(address => uint256) public _votingSnapshotsCounts;\\n\\n  /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\\n  /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\\n  /// to control all potential reentrancies by calling back the this contract\\n  ITransferHook public _aaveGovernance;\\n\\n  function _setAaveGovernance(ITransferHook aaveGovernance) internal virtual {\\n    _aaveGovernance = aaveGovernance;\\n  }\\n}\\n\\n/**\\n * @title StakedToken\\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\\n * @author Aave\\n **/\\ncontract StakedTokenV2Rev3 is\\n  IStakedAave,\\n  GovernancePowerWithSnapshot,\\n  VersionedInitializable,\\n  AaveDistributionManager\\n{\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev Start of Storage layout from StakedToken v1\\n  uint256 public constant REVISION = 3;\\n\\n  IERC20 public immutable STAKED_TOKEN;\\n  IERC20 public immutable REWARD_TOKEN;\\n  uint256 public immutable COOLDOWN_SECONDS;\\n\\n  /// @notice Seconds available to redeem once the cooldown period is fullfilled\\n  uint256 public immutable UNSTAKE_WINDOW;\\n\\n  /// @notice Address to pull from the rewards, needs to have approved this contract\\n  address public immutable REWARDS_VAULT;\\n\\n  mapping(address => uint256) public stakerRewardsToClaim;\\n  mapping(address => uint256) public stakersCooldowns;\\n\\n  /// @dev End of Storage layout from StakedToken v1\\n\\n  /// @dev To see the voting mappings, go to GovernancePowerWithSnapshot.sol\\n  mapping(address => address) internal _votingDelegates;\\n\\n  mapping(address => mapping(uint256 => Snapshot)) internal _propositionPowerSnapshots;\\n  mapping(address => uint256) internal _propositionPowerSnapshotsCounts;\\n  mapping(address => address) internal _propositionPowerDelegates;\\n\\n  bytes32 public DOMAIN_SEPARATOR;\\n  bytes public constant EIP712_REVISION = bytes('1');\\n  bytes32 internal constant EIP712_DOMAIN =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  /// @dev owner => next valid nonce to submit with permit()\\n  mapping(address => uint256) public _nonces;\\n\\n  event Staked(address indexed from, address indexed onBehalfOf, uint256 amount);\\n  event Redeem(address indexed from, address indexed to, uint256 amount);\\n\\n  event RewardsAccrued(address user, uint256 amount);\\n  event RewardsClaimed(address indexed from, address indexed to, uint256 amount);\\n\\n  event Cooldown(address indexed user);\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals,\\n    address governance\\n  ) public ERC20(name, symbol) AaveDistributionManager(emissionManager, distributionDuration) {\\n    STAKED_TOKEN = stakedToken;\\n    REWARD_TOKEN = rewardToken;\\n    COOLDOWN_SECONDS = cooldownSeconds;\\n    UNSTAKE_WINDOW = unstakeWindow;\\n    REWARDS_VAULT = rewardsVault;\\n    _aaveGovernance = ITransferHook(governance);\\n    ERC20._setupDecimals(decimals);\\n  }\\n\\n  /**\\n   * @dev Called by the proxy contract\\n   **/\\n  function initialize() external initializer {\\n    uint256 chainId;\\n\\n    //solium-disable-next-line\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN,\\n        keccak256(bytes(name())),\\n        keccak256(EIP712_REVISION),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n\\n    // Update lastUpdateTimestamp of stkAave to reward users since the end of the prior staking period\\n    AssetData storage assetData = assets[address(this)];\\n    assetData.lastUpdateTimestamp = 1620594720;\\n  }\\n\\n  function stake(address onBehalfOf, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    uint256 balanceOfUser = balanceOf(onBehalfOf);\\n\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(onBehalfOf, address(this), balanceOfUser, totalSupply());\\n    if (accruedRewards != 0) {\\n      emit RewardsAccrued(onBehalfOf, accruedRewards);\\n      stakerRewardsToClaim[onBehalfOf] = stakerRewardsToClaim[onBehalfOf].add(accruedRewards);\\n    }\\n\\n    stakersCooldowns[onBehalfOf] = getNextCooldownTimestamp(0, amount, onBehalfOf, balanceOfUser);\\n\\n    _mint(onBehalfOf, amount);\\n    IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit Staked(msg.sender, onBehalfOf, amount);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens, and stop earning rewards\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   **/\\n  function redeem(address to, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    //solium-disable-next-line\\n    uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\\n    require(\\n      block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\\n      'INSUFFICIENT_COOLDOWN'\\n    );\\n    require(\\n      block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n      'UNSTAKE_WINDOW_FINISHED'\\n    );\\n    uint256 balanceOfMessageSender = balanceOf(msg.sender);\\n\\n    uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\\n\\n    _updateCurrentUnclaimedRewards(msg.sender, balanceOfMessageSender, true);\\n\\n    _burn(msg.sender, amountToRedeem);\\n\\n    if (balanceOfMessageSender.sub(amountToRedeem) == 0) {\\n      stakersCooldowns[msg.sender] = 0;\\n    }\\n\\n    IERC20(STAKED_TOKEN).safeTransfer(to, amountToRedeem);\\n\\n    emit Redeem(msg.sender, to, amountToRedeem);\\n  }\\n\\n  /**\\n   * @dev Activates the cooldown period to unstake\\n   * - It can't be called if the user is not staking\\n   **/\\n  function cooldown() external override {\\n    require(balanceOf(msg.sender) != 0, 'INVALID_BALANCE_ON_COOLDOWN');\\n    //solium-disable-next-line\\n    stakersCooldowns[msg.sender] = block.timestamp;\\n\\n    emit Cooldown(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\\n   * @param to Address to stake for\\n   * @param amount Amount to stake\\n   **/\\n  function claimRewards(address to, uint256 amount) external override {\\n    uint256 newTotalRewards =\\n      _updateCurrentUnclaimedRewards(msg.sender, balanceOf(msg.sender), false);\\n    uint256 amountToClaim = (amount == type(uint256).max) ? newTotalRewards : amount;\\n\\n    stakerRewardsToClaim[msg.sender] = newTotalRewards.sub(amountToClaim, 'INVALID_AMOUNT');\\n\\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\\n\\n    emit RewardsClaimed(msg.sender, to, amountToClaim);\\n  }\\n\\n  /**\\n   * @dev Internal ERC20 _transfer of the tokenized staked tokens\\n   * @param from Address to transfer from\\n   * @param to Address to transfer to\\n   * @param amount Amount to transfer\\n   **/\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    uint256 balanceOfFrom = balanceOf(from);\\n    // Sender\\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\\n\\n    // Recipient\\n    if (from != to) {\\n      uint256 balanceOfTo = balanceOf(to);\\n      _updateCurrentUnclaimedRewards(to, balanceOfTo, true);\\n\\n      uint256 previousSenderCooldown = stakersCooldowns[from];\\n      stakersCooldowns[to] = getNextCooldownTimestamp(\\n        previousSenderCooldown,\\n        amount,\\n        to,\\n        balanceOfTo\\n      );\\n      // if cooldown was set and whole balance of sender was transferred - clear cooldown\\n      if (balanceOfFrom == amount && previousSenderCooldown != 0) {\\n        stakersCooldowns[from] = 0;\\n      }\\n    }\\n\\n    super._transfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Updates the user state related with his accrued rewards\\n   * @param user Address of the user\\n   * @param userBalance The current balance of the user\\n   * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\\n   * @return The unclaimed rewards that were added to the total accrued\\n   **/\\n  function _updateCurrentUnclaimedRewards(\\n    address user,\\n    uint256 userBalance,\\n    bool updateStorage\\n  ) internal returns (uint256) {\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(user, address(this), userBalance, totalSupply());\\n    uint256 unclaimedRewards = stakerRewardsToClaim[user].add(accruedRewards);\\n\\n    if (accruedRewards != 0) {\\n      if (updateStorage) {\\n        stakerRewardsToClaim[user] = unclaimedRewards;\\n      }\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n\\n    return unclaimedRewards;\\n  }\\n\\n  /**\\n   * @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\\n   *  - If the timestamp of the sender is \\\"better\\\" or the timestamp of the recipient is 0, we take the one of the recipient\\n   *  - Weighted average of from/to cooldown timestamps if:\\n   *    # The sender doesn't have the cooldown activated (timestamp 0).\\n   *    # The sender timestamp is expired\\n   *    # The sender has a \\\"worse\\\" timestamp\\n   *  - If the receiver's cooldown timestamp expired (too old), the next is 0\\n   * @param fromCooldownTimestamp Cooldown timestamp of the sender\\n   * @param amountToReceive Amount\\n   * @param toAddress Address of the recipient\\n   * @param toBalance Current balance of the receiver\\n   * @return The new cooldown timestamp\\n   **/\\n  function getNextCooldownTimestamp(\\n    uint256 fromCooldownTimestamp,\\n    uint256 amountToReceive,\\n    address toAddress,\\n    uint256 toBalance\\n  ) public view returns (uint256) {\\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\\n    if (toCooldownTimestamp == 0) {\\n      return 0;\\n    }\\n\\n    uint256 minimalValidCooldownTimestamp =\\n      block.timestamp.sub(COOLDOWN_SECONDS).sub(UNSTAKE_WINDOW);\\n\\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\\n      toCooldownTimestamp = 0;\\n    } else {\\n      uint256 fromCooldownTimestamp =\\n        (minimalValidCooldownTimestamp > fromCooldownTimestamp)\\n          ? block.timestamp\\n          : fromCooldownTimestamp;\\n\\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\\n        return toCooldownTimestamp;\\n      } else {\\n        toCooldownTimestamp = (\\n          amountToReceive.mul(fromCooldownTimestamp).add(toBalance.mul(toCooldownTimestamp))\\n        )\\n          .div(amountToReceive.add(toBalance));\\n      }\\n    }\\n    return toCooldownTimestamp;\\n  }\\n\\n  /**\\n   * @dev Return the total rewards pending to claim by an staker\\n   * @param staker The staker address\\n   * @return The rewards\\n   */\\n  function getTotalRewardsBalance(address staker) external view returns (uint256) {\\n    DistributionTypes.UserStakeInput[] memory userStakeInputs =\\n      new DistributionTypes.UserStakeInput[](1);\\n    userStakeInputs[0] = DistributionTypes.UserStakeInput({\\n      underlyingAsset: address(this),\\n      stakedByUser: balanceOf(staker),\\n      totalStaked: totalSupply()\\n    });\\n    return stakerRewardsToClaim[staker].add(_getUnclaimedRewards(staker, userStakeInputs));\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   * @return The revision\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner the owner of the funds\\n   * @param spender the spender\\n   * @param value the amount\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(owner != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    uint256 currentValidNonce = _nonces[owner];\\n    bytes32 digest =\\n      keccak256(\\n        abi.encodePacked(\\n          '\\\\x19\\\\x01',\\n          DOMAIN_SEPARATOR,\\n          keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n        )\\n      );\\n\\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _nonces[owner] = currentValidNonce.add(1);\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\\n   * - On _transfer, it writes snapshots for both \\\"from\\\" and \\\"to\\\"\\n   * - On _mint, only for _to\\n   * - On _burn, only for _from\\n   * @param from the from address\\n   * @param to the to address\\n   * @param amount the amount to transfer\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    address votingFromDelegatee = _votingDelegates[from];\\n    address votingToDelegatee = _votingDelegates[to];\\n\\n    if (votingFromDelegatee == address(0)) {\\n      votingFromDelegatee = from;\\n    }\\n    if (votingToDelegatee == address(0)) {\\n      votingToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      votingFromDelegatee,\\n      votingToDelegatee,\\n      amount,\\n      DelegationType.VOTING_POWER\\n    );\\n\\n    address propPowerFromDelegatee = _propositionPowerDelegates[from];\\n    address propPowerToDelegatee = _propositionPowerDelegates[to];\\n\\n    if (propPowerFromDelegatee == address(0)) {\\n      propPowerFromDelegatee = from;\\n    }\\n    if (propPowerToDelegatee == address(0)) {\\n      propPowerToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      propPowerFromDelegatee,\\n      propPowerToDelegatee,\\n      amount,\\n      DelegationType.PROPOSITION_POWER\\n    );\\n\\n    // caching the aave governance address to avoid multiple state loads\\n    ITransferHook aaveGovernance = _aaveGovernance;\\n    if (aaveGovernance != ITransferHook(0)) {\\n      aaveGovernance.onTransfer(from, to, amount);\\n    }\\n  }\\n\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    override\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    )\\n  {\\n    if (delegationType == DelegationType.VOTING_POWER) {\\n      return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\\n    } else {\\n      return (\\n        _propositionPowerSnapshots,\\n        _propositionPowerSnapshotsCounts,\\n        _propositionPowerDelegates\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateByTypeBySig(\\n    address delegatee,\\n    DelegationType delegationType,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash =\\n      keccak256(\\n        abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\\n      );\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(signatory, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n}\\n\",\"keccak256\":\"0x193e8dd33d55c137ea32793b1f2c2f06b4b8936ee5c625e38766062c4f89fb43\",\"license\":\"agpl-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"Context":{"abi":[],"devdoc":{"details":"From https://github.com/OpenZeppelin/openzeppelin-contracts Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with GSN meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"From https://github.com/OpenZeppelin/openzeppelin-contracts Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with GSN meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-12-10\\n */\\n\\n// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGovernancePowerDelegationToken {\\n  enum DelegationType {VOTING_POWER, PROPOSITION_POWER}\\n\\n  /**\\n   * @dev emitted when a user delegates to another\\n   * @param delegator the delegator\\n   * @param delegatee the delegatee\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    DelegationType delegationType\\n  );\\n\\n  /**\\n   * @dev emitted when an action changes the delegated power of a user\\n   * @param user the user which delegated power has changed\\n   * @param amount the amount of delegated power for the user\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external virtual;\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (address);\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view virtual returns (uint256);\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view virtual returns (uint256);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string internal _name;\\n  string internal _symbol;\\n  uint8 private _decimals;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n   * a default value of 18.\\n   *\\n   * To select a different value for {decimals}, use {_setupDecimals}.\\n   *\\n   * All three of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name, string memory symbol) public {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = 18;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        'ERC20: decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n   *\\n   * This is internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Sets {decimals} to a value other than the default one of 18.\\n   *\\n   * WARNING: This function should only be called from the constructor. Most\\n   * applications that interact with token contracts will not expect\\n   * {decimals} to ever change, and may work incorrectly if it does.\\n   */\\n  function _setupDecimals(uint8 decimals_) internal {\\n    _decimals = decimals_;\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be to transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\\ninterface IStakedAave {\\n  function stake(address to, uint256 amount) external;\\n\\n  function redeem(address to, uint256 amount) external;\\n\\n  function cooldown() external;\\n\\n  function claimRewards(address to, uint256 amount) external;\\n}\\n\\ninterface ITransferHook {\\n  function onTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint128 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\\ninterface IAaveDistributionManager {\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external;\\n}\\n\\n/**\\n * @title AaveDistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract AaveDistributionManager is IAaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  struct AssetData {\\n    uint128 emissionPerSecond;\\n    uint128 lastUpdateTimestamp;\\n    uint256 index;\\n    mapping(address => uint256) users;\\n  }\\n\\n  uint256 public immutable DISTRIBUTION_END;\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n\\n  constructor(address emissionManager, uint256 distributionDuration) public {\\n    DISTRIBUTION_END = block.timestamp.add(distributionDuration);\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /**\\n   * @dev Configures the distribution of rewards for a list of assets\\n   * @param assetsConfigInput The list of configurations to apply\\n   **/\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external\\n    override\\n  {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address underlyingAsset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex =\\n      _getAssetIndex(oldIndex, assetConfig.emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n    if (newIndex != oldIndex) {\\n      assetConfig.index = newIndex;\\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\\n    }\\n\\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards = accruedRewards.add(\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        )\\n      );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex =\\n        _getAssetIndex(\\n          assetConfig.index,\\n          assetConfig.emissionPerSecond,\\n          assetConfig.lastUpdateTimestamp,\\n          stakes[i].totalStaked\\n        );\\n\\n      accruedRewards = accruedRewards.add(\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\\n      );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= DISTRIBUTION_END\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp =\\n      block.timestamp > DISTRIBUTION_END ? DISTRIBUTION_END : block.timestamp;\\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\\n    return\\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\\n        currentIndex\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n}\\n\\n/**\\n * @notice implementation of the AAVE token contract\\n * @author Aave\\n */\\nabstract contract GovernancePowerDelegationERC20 is ERC20, IGovernancePowerDelegationToken {\\n  using SafeMath for uint256;\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH =\\n    keccak256('DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)');\\n\\n  bytes32 public constant DELEGATE_TYPEHASH =\\n    keccak256('Delegate(address delegatee,uint256 nonce,uint256 expiry)');\\n\\n  /// @dev snapshot of a value on a specific block, used for votes\\n  struct Snapshot {\\n    uint128 blockNumber;\\n    uint128 value;\\n  }\\n\\n  /**\\n   * @dev delegates one specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external override {\\n    _delegateByType(msg.sender, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external override {\\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    return _getDelegatee(delegator, delegates);\\n  }\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\\n  }\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view override returns (uint256) {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\\n  }\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   * used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\\n   * In this initial implementation with no AAVE minting, simply returns the current supply\\n   * A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view override returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _delegateByType(\\n    address delegator,\\n    address delegatee,\\n    DelegationType delegationType\\n  ) internal {\\n    require(delegatee != address(0), 'INVALID_DELEGATEE');\\n\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    uint256 delegatorBalance = balanceOf(delegator);\\n\\n    address previousDelegatee = _getDelegatee(delegator, delegates);\\n\\n    delegates[delegator] = delegatee;\\n\\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\\n    emit DelegateChanged(delegator, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev moves delegated power from one user to another\\n   * @param from the user from which delegated power is moved\\n   * @param to the user that will receive the delegated power\\n   * @param amount the amount of delegated power to be moved\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _moveDelegatesByType(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    DelegationType delegationType\\n  ) internal {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    if (from != address(0)) {\\n      uint256 previous = 0;\\n      uint256 fromSnapshotsCount = snapshotsCounts[from];\\n\\n      if (fromSnapshotsCount != 0) {\\n        previous = snapshots[from][fromSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(from);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        from,\\n        uint128(previous),\\n        uint128(previous.sub(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(from, previous.sub(amount), delegationType);\\n    }\\n    if (to != address(0)) {\\n      uint256 previous = 0;\\n      uint256 toSnapshotsCount = snapshotsCounts[to];\\n      if (toSnapshotsCount != 0) {\\n        previous = snapshots[to][toSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(to);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        to,\\n        uint128(previous),\\n        uint128(previous.add(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(to, previous.add(amount), delegationType);\\n    }\\n  }\\n\\n  /**\\n   * @dev searches a snapshot by block number. Uses binary search.\\n   * @param snapshots the snapshots mapping\\n   * @param snapshotsCounts the number of snapshots\\n   * @param user the user for which the snapshot is being searched\\n   * @param blockNumber the block number being searched\\n   **/\\n  function _searchByBlockNumber(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address user,\\n    uint256 blockNumber\\n  ) internal view returns (uint256) {\\n    require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\\n\\n    uint256 snapshotsCount = snapshotsCounts[user];\\n\\n    if (snapshotsCount == 0) {\\n      return balanceOf(user);\\n    }\\n\\n    // First check most recent balance\\n    if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\\n      return snapshots[user][snapshotsCount - 1].value;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (snapshots[user][0].blockNumber > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint256 lower = 0;\\n    uint256 upper = snapshotsCount - 1;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Snapshot memory snapshot = snapshots[user][center];\\n      if (snapshot.blockNumber == blockNumber) {\\n        return snapshot.value;\\n      } else if (snapshot.blockNumber < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return snapshots[user][lower].value;\\n  }\\n\\n  /**\\n   * @dev returns the delegation data (snapshot, snapshotsCount, list of delegates) by delegation type\\n   * NOTE: Ideal implementation would have mapped this in a struct by delegation type. Unfortunately,\\n   * the AAVE token and StakeToken already include a mapping for the snapshots, so we require contracts\\n   * who inherit from this to provide access to the delegation data by overriding this method.\\n   * @param delegationType the type of delegation\\n   **/\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    virtual\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    );\\n\\n  /**\\n   * @dev Writes a snapshot for an owner of tokens\\n   * @param owner The owner of the tokens\\n   * @param oldValue The value before the operation that is gonna be executed after the snapshot\\n   * @param newValue The value after the operation\\n   */\\n  function _writeSnapshot(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address owner,\\n    uint128 oldValue,\\n    uint128 newValue\\n  ) internal {\\n    uint128 currentBlock = uint128(block.number);\\n\\n    uint256 ownerSnapshotsCount = snapshotsCounts[owner];\\n    mapping(uint256 => Snapshot) storage snapshotsOwner = snapshots[owner];\\n\\n    // Doing multiple operations in the same block\\n    if (\\n      ownerSnapshotsCount != 0 &&\\n      snapshotsOwner[ownerSnapshotsCount - 1].blockNumber == currentBlock\\n    ) {\\n      snapshotsOwner[ownerSnapshotsCount - 1].value = newValue;\\n    } else {\\n      snapshotsOwner[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\\n      snapshotsCounts[owner] = ownerSnapshotsCount + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the user delegatee. If a user never performed any delegation,\\n   * his delegated address will be 0x0. In that case we simply return the user itself\\n   * @param delegator the address of the user for which return the delegatee\\n   * @param delegates the array of delegates for a particular type of delegation\\n   **/\\n  function _getDelegatee(address delegator, mapping(address => address) storage delegates)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address previousDelegatee = delegates[delegator];\\n\\n    if (previousDelegatee == address(0)) {\\n      return delegator;\\n    }\\n\\n    return previousDelegatee;\\n  }\\n}\\n\\n/**\\n * @title ERC20WithSnapshot\\n * @notice ERC20 including snapshots of balances on transfer-related actions\\n * @author Aave\\n **/\\nabstract contract GovernancePowerWithSnapshot is GovernancePowerDelegationERC20 {\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @dev The following storage layout points to the prior StakedToken.sol implementation:\\n   * _snapshots => _votingSnapshots\\n   * _snapshotsCounts =>  _votingSnapshotsCounts\\n   * _aaveGovernance => _aaveGovernance\\n   */\\n  mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\\n  mapping(address => uint256) public _votingSnapshotsCounts;\\n\\n  /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\\n  /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\\n  /// to control all potential reentrancies by calling back the this contract\\n  ITransferHook public _aaveGovernance;\\n\\n  function _setAaveGovernance(ITransferHook aaveGovernance) internal virtual {\\n    _aaveGovernance = aaveGovernance;\\n  }\\n}\\n\\n/**\\n * @title StakedToken\\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\\n * @author Aave\\n **/\\ncontract StakedTokenV2Rev3 is\\n  IStakedAave,\\n  GovernancePowerWithSnapshot,\\n  VersionedInitializable,\\n  AaveDistributionManager\\n{\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev Start of Storage layout from StakedToken v1\\n  uint256 public constant REVISION = 3;\\n\\n  IERC20 public immutable STAKED_TOKEN;\\n  IERC20 public immutable REWARD_TOKEN;\\n  uint256 public immutable COOLDOWN_SECONDS;\\n\\n  /// @notice Seconds available to redeem once the cooldown period is fullfilled\\n  uint256 public immutable UNSTAKE_WINDOW;\\n\\n  /// @notice Address to pull from the rewards, needs to have approved this contract\\n  address public immutable REWARDS_VAULT;\\n\\n  mapping(address => uint256) public stakerRewardsToClaim;\\n  mapping(address => uint256) public stakersCooldowns;\\n\\n  /// @dev End of Storage layout from StakedToken v1\\n\\n  /// @dev To see the voting mappings, go to GovernancePowerWithSnapshot.sol\\n  mapping(address => address) internal _votingDelegates;\\n\\n  mapping(address => mapping(uint256 => Snapshot)) internal _propositionPowerSnapshots;\\n  mapping(address => uint256) internal _propositionPowerSnapshotsCounts;\\n  mapping(address => address) internal _propositionPowerDelegates;\\n\\n  bytes32 public DOMAIN_SEPARATOR;\\n  bytes public constant EIP712_REVISION = bytes('1');\\n  bytes32 internal constant EIP712_DOMAIN =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  /// @dev owner => next valid nonce to submit with permit()\\n  mapping(address => uint256) public _nonces;\\n\\n  event Staked(address indexed from, address indexed onBehalfOf, uint256 amount);\\n  event Redeem(address indexed from, address indexed to, uint256 amount);\\n\\n  event RewardsAccrued(address user, uint256 amount);\\n  event RewardsClaimed(address indexed from, address indexed to, uint256 amount);\\n\\n  event Cooldown(address indexed user);\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals,\\n    address governance\\n  ) public ERC20(name, symbol) AaveDistributionManager(emissionManager, distributionDuration) {\\n    STAKED_TOKEN = stakedToken;\\n    REWARD_TOKEN = rewardToken;\\n    COOLDOWN_SECONDS = cooldownSeconds;\\n    UNSTAKE_WINDOW = unstakeWindow;\\n    REWARDS_VAULT = rewardsVault;\\n    _aaveGovernance = ITransferHook(governance);\\n    ERC20._setupDecimals(decimals);\\n  }\\n\\n  /**\\n   * @dev Called by the proxy contract\\n   **/\\n  function initialize() external initializer {\\n    uint256 chainId;\\n\\n    //solium-disable-next-line\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN,\\n        keccak256(bytes(name())),\\n        keccak256(EIP712_REVISION),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n\\n    // Update lastUpdateTimestamp of stkAave to reward users since the end of the prior staking period\\n    AssetData storage assetData = assets[address(this)];\\n    assetData.lastUpdateTimestamp = 1620594720;\\n  }\\n\\n  function stake(address onBehalfOf, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    uint256 balanceOfUser = balanceOf(onBehalfOf);\\n\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(onBehalfOf, address(this), balanceOfUser, totalSupply());\\n    if (accruedRewards != 0) {\\n      emit RewardsAccrued(onBehalfOf, accruedRewards);\\n      stakerRewardsToClaim[onBehalfOf] = stakerRewardsToClaim[onBehalfOf].add(accruedRewards);\\n    }\\n\\n    stakersCooldowns[onBehalfOf] = getNextCooldownTimestamp(0, amount, onBehalfOf, balanceOfUser);\\n\\n    _mint(onBehalfOf, amount);\\n    IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit Staked(msg.sender, onBehalfOf, amount);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens, and stop earning rewards\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   **/\\n  function redeem(address to, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    //solium-disable-next-line\\n    uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\\n    require(\\n      block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\\n      'INSUFFICIENT_COOLDOWN'\\n    );\\n    require(\\n      block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n      'UNSTAKE_WINDOW_FINISHED'\\n    );\\n    uint256 balanceOfMessageSender = balanceOf(msg.sender);\\n\\n    uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\\n\\n    _updateCurrentUnclaimedRewards(msg.sender, balanceOfMessageSender, true);\\n\\n    _burn(msg.sender, amountToRedeem);\\n\\n    if (balanceOfMessageSender.sub(amountToRedeem) == 0) {\\n      stakersCooldowns[msg.sender] = 0;\\n    }\\n\\n    IERC20(STAKED_TOKEN).safeTransfer(to, amountToRedeem);\\n\\n    emit Redeem(msg.sender, to, amountToRedeem);\\n  }\\n\\n  /**\\n   * @dev Activates the cooldown period to unstake\\n   * - It can't be called if the user is not staking\\n   **/\\n  function cooldown() external override {\\n    require(balanceOf(msg.sender) != 0, 'INVALID_BALANCE_ON_COOLDOWN');\\n    //solium-disable-next-line\\n    stakersCooldowns[msg.sender] = block.timestamp;\\n\\n    emit Cooldown(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\\n   * @param to Address to stake for\\n   * @param amount Amount to stake\\n   **/\\n  function claimRewards(address to, uint256 amount) external override {\\n    uint256 newTotalRewards =\\n      _updateCurrentUnclaimedRewards(msg.sender, balanceOf(msg.sender), false);\\n    uint256 amountToClaim = (amount == type(uint256).max) ? newTotalRewards : amount;\\n\\n    stakerRewardsToClaim[msg.sender] = newTotalRewards.sub(amountToClaim, 'INVALID_AMOUNT');\\n\\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\\n\\n    emit RewardsClaimed(msg.sender, to, amountToClaim);\\n  }\\n\\n  /**\\n   * @dev Internal ERC20 _transfer of the tokenized staked tokens\\n   * @param from Address to transfer from\\n   * @param to Address to transfer to\\n   * @param amount Amount to transfer\\n   **/\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    uint256 balanceOfFrom = balanceOf(from);\\n    // Sender\\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\\n\\n    // Recipient\\n    if (from != to) {\\n      uint256 balanceOfTo = balanceOf(to);\\n      _updateCurrentUnclaimedRewards(to, balanceOfTo, true);\\n\\n      uint256 previousSenderCooldown = stakersCooldowns[from];\\n      stakersCooldowns[to] = getNextCooldownTimestamp(\\n        previousSenderCooldown,\\n        amount,\\n        to,\\n        balanceOfTo\\n      );\\n      // if cooldown was set and whole balance of sender was transferred - clear cooldown\\n      if (balanceOfFrom == amount && previousSenderCooldown != 0) {\\n        stakersCooldowns[from] = 0;\\n      }\\n    }\\n\\n    super._transfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Updates the user state related with his accrued rewards\\n   * @param user Address of the user\\n   * @param userBalance The current balance of the user\\n   * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\\n   * @return The unclaimed rewards that were added to the total accrued\\n   **/\\n  function _updateCurrentUnclaimedRewards(\\n    address user,\\n    uint256 userBalance,\\n    bool updateStorage\\n  ) internal returns (uint256) {\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(user, address(this), userBalance, totalSupply());\\n    uint256 unclaimedRewards = stakerRewardsToClaim[user].add(accruedRewards);\\n\\n    if (accruedRewards != 0) {\\n      if (updateStorage) {\\n        stakerRewardsToClaim[user] = unclaimedRewards;\\n      }\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n\\n    return unclaimedRewards;\\n  }\\n\\n  /**\\n   * @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\\n   *  - If the timestamp of the sender is \\\"better\\\" or the timestamp of the recipient is 0, we take the one of the recipient\\n   *  - Weighted average of from/to cooldown timestamps if:\\n   *    # The sender doesn't have the cooldown activated (timestamp 0).\\n   *    # The sender timestamp is expired\\n   *    # The sender has a \\\"worse\\\" timestamp\\n   *  - If the receiver's cooldown timestamp expired (too old), the next is 0\\n   * @param fromCooldownTimestamp Cooldown timestamp of the sender\\n   * @param amountToReceive Amount\\n   * @param toAddress Address of the recipient\\n   * @param toBalance Current balance of the receiver\\n   * @return The new cooldown timestamp\\n   **/\\n  function getNextCooldownTimestamp(\\n    uint256 fromCooldownTimestamp,\\n    uint256 amountToReceive,\\n    address toAddress,\\n    uint256 toBalance\\n  ) public view returns (uint256) {\\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\\n    if (toCooldownTimestamp == 0) {\\n      return 0;\\n    }\\n\\n    uint256 minimalValidCooldownTimestamp =\\n      block.timestamp.sub(COOLDOWN_SECONDS).sub(UNSTAKE_WINDOW);\\n\\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\\n      toCooldownTimestamp = 0;\\n    } else {\\n      uint256 fromCooldownTimestamp =\\n        (minimalValidCooldownTimestamp > fromCooldownTimestamp)\\n          ? block.timestamp\\n          : fromCooldownTimestamp;\\n\\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\\n        return toCooldownTimestamp;\\n      } else {\\n        toCooldownTimestamp = (\\n          amountToReceive.mul(fromCooldownTimestamp).add(toBalance.mul(toCooldownTimestamp))\\n        )\\n          .div(amountToReceive.add(toBalance));\\n      }\\n    }\\n    return toCooldownTimestamp;\\n  }\\n\\n  /**\\n   * @dev Return the total rewards pending to claim by an staker\\n   * @param staker The staker address\\n   * @return The rewards\\n   */\\n  function getTotalRewardsBalance(address staker) external view returns (uint256) {\\n    DistributionTypes.UserStakeInput[] memory userStakeInputs =\\n      new DistributionTypes.UserStakeInput[](1);\\n    userStakeInputs[0] = DistributionTypes.UserStakeInput({\\n      underlyingAsset: address(this),\\n      stakedByUser: balanceOf(staker),\\n      totalStaked: totalSupply()\\n    });\\n    return stakerRewardsToClaim[staker].add(_getUnclaimedRewards(staker, userStakeInputs));\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   * @return The revision\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner the owner of the funds\\n   * @param spender the spender\\n   * @param value the amount\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(owner != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    uint256 currentValidNonce = _nonces[owner];\\n    bytes32 digest =\\n      keccak256(\\n        abi.encodePacked(\\n          '\\\\x19\\\\x01',\\n          DOMAIN_SEPARATOR,\\n          keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n        )\\n      );\\n\\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _nonces[owner] = currentValidNonce.add(1);\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\\n   * - On _transfer, it writes snapshots for both \\\"from\\\" and \\\"to\\\"\\n   * - On _mint, only for _to\\n   * - On _burn, only for _from\\n   * @param from the from address\\n   * @param to the to address\\n   * @param amount the amount to transfer\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    address votingFromDelegatee = _votingDelegates[from];\\n    address votingToDelegatee = _votingDelegates[to];\\n\\n    if (votingFromDelegatee == address(0)) {\\n      votingFromDelegatee = from;\\n    }\\n    if (votingToDelegatee == address(0)) {\\n      votingToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      votingFromDelegatee,\\n      votingToDelegatee,\\n      amount,\\n      DelegationType.VOTING_POWER\\n    );\\n\\n    address propPowerFromDelegatee = _propositionPowerDelegates[from];\\n    address propPowerToDelegatee = _propositionPowerDelegates[to];\\n\\n    if (propPowerFromDelegatee == address(0)) {\\n      propPowerFromDelegatee = from;\\n    }\\n    if (propPowerToDelegatee == address(0)) {\\n      propPowerToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      propPowerFromDelegatee,\\n      propPowerToDelegatee,\\n      amount,\\n      DelegationType.PROPOSITION_POWER\\n    );\\n\\n    // caching the aave governance address to avoid multiple state loads\\n    ITransferHook aaveGovernance = _aaveGovernance;\\n    if (aaveGovernance != ITransferHook(0)) {\\n      aaveGovernance.onTransfer(from, to, amount);\\n    }\\n  }\\n\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    override\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    )\\n  {\\n    if (delegationType == DelegationType.VOTING_POWER) {\\n      return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\\n    } else {\\n      return (\\n        _propositionPowerSnapshots,\\n        _propositionPowerSnapshotsCounts,\\n        _propositionPowerDelegates\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateByTypeBySig(\\n    address delegatee,\\n    DelegationType delegationType,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash =\\n      keccak256(\\n        abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\\n      );\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(signatory, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n}\\n\",\"keccak256\":\"0x193e8dd33d55c137ea32793b1f2c2f06b4b8936ee5c625e38766062c4f89fb43\",\"license\":\"agpl-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"DistributionTypes":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220645266437d2a63ac540f48081a60e79f0d1b9dca1be1c04f37f75e3955a67ef064736f6c63430007050033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH5 0x5266437D2A PUSH4 0xAC540F48 ADDMOD BYTE PUSH1 0xE7 SWAP16 0xD SHL SWAP14 0xCA SHL 0xE1 0xC0 0x4F CALLDATACOPY 0xF7 0x5E CODECOPY SSTORE 0xA6 PUSH31 0xF064736F6C6343000705003300000000000000000000000000000000000000 ","sourceMap":"24061:257:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220645266437d2a63ac540f48081a60e79f0d1b9dca1be1c04f37f75e3955a67ef064736f6c63430007050033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH5 0x5266437D2A PUSH4 0xAC540F48 ADDMOD BYTE PUSH1 0xE7 SWAP16 0xD SHL SWAP14 0xCA SHL 0xE1 0xC0 0x4F CALLDATACOPY 0xF7 0x5E CODECOPY SSTORE 0xA6 PUSH31 0xF064736F6C6343000705003300000000000000000000000000000000000000 ","sourceMap":"24061:257:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":\"DistributionTypes\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-12-10\\n */\\n\\n// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGovernancePowerDelegationToken {\\n  enum DelegationType {VOTING_POWER, PROPOSITION_POWER}\\n\\n  /**\\n   * @dev emitted when a user delegates to another\\n   * @param delegator the delegator\\n   * @param delegatee the delegatee\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    DelegationType delegationType\\n  );\\n\\n  /**\\n   * @dev emitted when an action changes the delegated power of a user\\n   * @param user the user which delegated power has changed\\n   * @param amount the amount of delegated power for the user\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external virtual;\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (address);\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view virtual returns (uint256);\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view virtual returns (uint256);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string internal _name;\\n  string internal _symbol;\\n  uint8 private _decimals;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n   * a default value of 18.\\n   *\\n   * To select a different value for {decimals}, use {_setupDecimals}.\\n   *\\n   * All three of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name, string memory symbol) public {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = 18;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        'ERC20: decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n   *\\n   * This is internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Sets {decimals} to a value other than the default one of 18.\\n   *\\n   * WARNING: This function should only be called from the constructor. Most\\n   * applications that interact with token contracts will not expect\\n   * {decimals} to ever change, and may work incorrectly if it does.\\n   */\\n  function _setupDecimals(uint8 decimals_) internal {\\n    _decimals = decimals_;\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be to transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\\ninterface IStakedAave {\\n  function stake(address to, uint256 amount) external;\\n\\n  function redeem(address to, uint256 amount) external;\\n\\n  function cooldown() external;\\n\\n  function claimRewards(address to, uint256 amount) external;\\n}\\n\\ninterface ITransferHook {\\n  function onTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint128 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\\ninterface IAaveDistributionManager {\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external;\\n}\\n\\n/**\\n * @title AaveDistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract AaveDistributionManager is IAaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  struct AssetData {\\n    uint128 emissionPerSecond;\\n    uint128 lastUpdateTimestamp;\\n    uint256 index;\\n    mapping(address => uint256) users;\\n  }\\n\\n  uint256 public immutable DISTRIBUTION_END;\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n\\n  constructor(address emissionManager, uint256 distributionDuration) public {\\n    DISTRIBUTION_END = block.timestamp.add(distributionDuration);\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /**\\n   * @dev Configures the distribution of rewards for a list of assets\\n   * @param assetsConfigInput The list of configurations to apply\\n   **/\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external\\n    override\\n  {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address underlyingAsset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex =\\n      _getAssetIndex(oldIndex, assetConfig.emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n    if (newIndex != oldIndex) {\\n      assetConfig.index = newIndex;\\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\\n    }\\n\\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards = accruedRewards.add(\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        )\\n      );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex =\\n        _getAssetIndex(\\n          assetConfig.index,\\n          assetConfig.emissionPerSecond,\\n          assetConfig.lastUpdateTimestamp,\\n          stakes[i].totalStaked\\n        );\\n\\n      accruedRewards = accruedRewards.add(\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\\n      );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= DISTRIBUTION_END\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp =\\n      block.timestamp > DISTRIBUTION_END ? DISTRIBUTION_END : block.timestamp;\\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\\n    return\\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\\n        currentIndex\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n}\\n\\n/**\\n * @notice implementation of the AAVE token contract\\n * @author Aave\\n */\\nabstract contract GovernancePowerDelegationERC20 is ERC20, IGovernancePowerDelegationToken {\\n  using SafeMath for uint256;\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH =\\n    keccak256('DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)');\\n\\n  bytes32 public constant DELEGATE_TYPEHASH =\\n    keccak256('Delegate(address delegatee,uint256 nonce,uint256 expiry)');\\n\\n  /// @dev snapshot of a value on a specific block, used for votes\\n  struct Snapshot {\\n    uint128 blockNumber;\\n    uint128 value;\\n  }\\n\\n  /**\\n   * @dev delegates one specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external override {\\n    _delegateByType(msg.sender, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external override {\\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    return _getDelegatee(delegator, delegates);\\n  }\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\\n  }\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view override returns (uint256) {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\\n  }\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   * used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\\n   * In this initial implementation with no AAVE minting, simply returns the current supply\\n   * A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view override returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _delegateByType(\\n    address delegator,\\n    address delegatee,\\n    DelegationType delegationType\\n  ) internal {\\n    require(delegatee != address(0), 'INVALID_DELEGATEE');\\n\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    uint256 delegatorBalance = balanceOf(delegator);\\n\\n    address previousDelegatee = _getDelegatee(delegator, delegates);\\n\\n    delegates[delegator] = delegatee;\\n\\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\\n    emit DelegateChanged(delegator, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev moves delegated power from one user to another\\n   * @param from the user from which delegated power is moved\\n   * @param to the user that will receive the delegated power\\n   * @param amount the amount of delegated power to be moved\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _moveDelegatesByType(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    DelegationType delegationType\\n  ) internal {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    if (from != address(0)) {\\n      uint256 previous = 0;\\n      uint256 fromSnapshotsCount = snapshotsCounts[from];\\n\\n      if (fromSnapshotsCount != 0) {\\n        previous = snapshots[from][fromSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(from);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        from,\\n        uint128(previous),\\n        uint128(previous.sub(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(from, previous.sub(amount), delegationType);\\n    }\\n    if (to != address(0)) {\\n      uint256 previous = 0;\\n      uint256 toSnapshotsCount = snapshotsCounts[to];\\n      if (toSnapshotsCount != 0) {\\n        previous = snapshots[to][toSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(to);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        to,\\n        uint128(previous),\\n        uint128(previous.add(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(to, previous.add(amount), delegationType);\\n    }\\n  }\\n\\n  /**\\n   * @dev searches a snapshot by block number. Uses binary search.\\n   * @param snapshots the snapshots mapping\\n   * @param snapshotsCounts the number of snapshots\\n   * @param user the user for which the snapshot is being searched\\n   * @param blockNumber the block number being searched\\n   **/\\n  function _searchByBlockNumber(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address user,\\n    uint256 blockNumber\\n  ) internal view returns (uint256) {\\n    require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\\n\\n    uint256 snapshotsCount = snapshotsCounts[user];\\n\\n    if (snapshotsCount == 0) {\\n      return balanceOf(user);\\n    }\\n\\n    // First check most recent balance\\n    if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\\n      return snapshots[user][snapshotsCount - 1].value;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (snapshots[user][0].blockNumber > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint256 lower = 0;\\n    uint256 upper = snapshotsCount - 1;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Snapshot memory snapshot = snapshots[user][center];\\n      if (snapshot.blockNumber == blockNumber) {\\n        return snapshot.value;\\n      } else if (snapshot.blockNumber < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return snapshots[user][lower].value;\\n  }\\n\\n  /**\\n   * @dev returns the delegation data (snapshot, snapshotsCount, list of delegates) by delegation type\\n   * NOTE: Ideal implementation would have mapped this in a struct by delegation type. Unfortunately,\\n   * the AAVE token and StakeToken already include a mapping for the snapshots, so we require contracts\\n   * who inherit from this to provide access to the delegation data by overriding this method.\\n   * @param delegationType the type of delegation\\n   **/\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    virtual\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    );\\n\\n  /**\\n   * @dev Writes a snapshot for an owner of tokens\\n   * @param owner The owner of the tokens\\n   * @param oldValue The value before the operation that is gonna be executed after the snapshot\\n   * @param newValue The value after the operation\\n   */\\n  function _writeSnapshot(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address owner,\\n    uint128 oldValue,\\n    uint128 newValue\\n  ) internal {\\n    uint128 currentBlock = uint128(block.number);\\n\\n    uint256 ownerSnapshotsCount = snapshotsCounts[owner];\\n    mapping(uint256 => Snapshot) storage snapshotsOwner = snapshots[owner];\\n\\n    // Doing multiple operations in the same block\\n    if (\\n      ownerSnapshotsCount != 0 &&\\n      snapshotsOwner[ownerSnapshotsCount - 1].blockNumber == currentBlock\\n    ) {\\n      snapshotsOwner[ownerSnapshotsCount - 1].value = newValue;\\n    } else {\\n      snapshotsOwner[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\\n      snapshotsCounts[owner] = ownerSnapshotsCount + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the user delegatee. If a user never performed any delegation,\\n   * his delegated address will be 0x0. In that case we simply return the user itself\\n   * @param delegator the address of the user for which return the delegatee\\n   * @param delegates the array of delegates for a particular type of delegation\\n   **/\\n  function _getDelegatee(address delegator, mapping(address => address) storage delegates)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address previousDelegatee = delegates[delegator];\\n\\n    if (previousDelegatee == address(0)) {\\n      return delegator;\\n    }\\n\\n    return previousDelegatee;\\n  }\\n}\\n\\n/**\\n * @title ERC20WithSnapshot\\n * @notice ERC20 including snapshots of balances on transfer-related actions\\n * @author Aave\\n **/\\nabstract contract GovernancePowerWithSnapshot is GovernancePowerDelegationERC20 {\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @dev The following storage layout points to the prior StakedToken.sol implementation:\\n   * _snapshots => _votingSnapshots\\n   * _snapshotsCounts =>  _votingSnapshotsCounts\\n   * _aaveGovernance => _aaveGovernance\\n   */\\n  mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\\n  mapping(address => uint256) public _votingSnapshotsCounts;\\n\\n  /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\\n  /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\\n  /// to control all potential reentrancies by calling back the this contract\\n  ITransferHook public _aaveGovernance;\\n\\n  function _setAaveGovernance(ITransferHook aaveGovernance) internal virtual {\\n    _aaveGovernance = aaveGovernance;\\n  }\\n}\\n\\n/**\\n * @title StakedToken\\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\\n * @author Aave\\n **/\\ncontract StakedTokenV2Rev3 is\\n  IStakedAave,\\n  GovernancePowerWithSnapshot,\\n  VersionedInitializable,\\n  AaveDistributionManager\\n{\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev Start of Storage layout from StakedToken v1\\n  uint256 public constant REVISION = 3;\\n\\n  IERC20 public immutable STAKED_TOKEN;\\n  IERC20 public immutable REWARD_TOKEN;\\n  uint256 public immutable COOLDOWN_SECONDS;\\n\\n  /// @notice Seconds available to redeem once the cooldown period is fullfilled\\n  uint256 public immutable UNSTAKE_WINDOW;\\n\\n  /// @notice Address to pull from the rewards, needs to have approved this contract\\n  address public immutable REWARDS_VAULT;\\n\\n  mapping(address => uint256) public stakerRewardsToClaim;\\n  mapping(address => uint256) public stakersCooldowns;\\n\\n  /// @dev End of Storage layout from StakedToken v1\\n\\n  /// @dev To see the voting mappings, go to GovernancePowerWithSnapshot.sol\\n  mapping(address => address) internal _votingDelegates;\\n\\n  mapping(address => mapping(uint256 => Snapshot)) internal _propositionPowerSnapshots;\\n  mapping(address => uint256) internal _propositionPowerSnapshotsCounts;\\n  mapping(address => address) internal _propositionPowerDelegates;\\n\\n  bytes32 public DOMAIN_SEPARATOR;\\n  bytes public constant EIP712_REVISION = bytes('1');\\n  bytes32 internal constant EIP712_DOMAIN =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  /// @dev owner => next valid nonce to submit with permit()\\n  mapping(address => uint256) public _nonces;\\n\\n  event Staked(address indexed from, address indexed onBehalfOf, uint256 amount);\\n  event Redeem(address indexed from, address indexed to, uint256 amount);\\n\\n  event RewardsAccrued(address user, uint256 amount);\\n  event RewardsClaimed(address indexed from, address indexed to, uint256 amount);\\n\\n  event Cooldown(address indexed user);\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals,\\n    address governance\\n  ) public ERC20(name, symbol) AaveDistributionManager(emissionManager, distributionDuration) {\\n    STAKED_TOKEN = stakedToken;\\n    REWARD_TOKEN = rewardToken;\\n    COOLDOWN_SECONDS = cooldownSeconds;\\n    UNSTAKE_WINDOW = unstakeWindow;\\n    REWARDS_VAULT = rewardsVault;\\n    _aaveGovernance = ITransferHook(governance);\\n    ERC20._setupDecimals(decimals);\\n  }\\n\\n  /**\\n   * @dev Called by the proxy contract\\n   **/\\n  function initialize() external initializer {\\n    uint256 chainId;\\n\\n    //solium-disable-next-line\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN,\\n        keccak256(bytes(name())),\\n        keccak256(EIP712_REVISION),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n\\n    // Update lastUpdateTimestamp of stkAave to reward users since the end of the prior staking period\\n    AssetData storage assetData = assets[address(this)];\\n    assetData.lastUpdateTimestamp = 1620594720;\\n  }\\n\\n  function stake(address onBehalfOf, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    uint256 balanceOfUser = balanceOf(onBehalfOf);\\n\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(onBehalfOf, address(this), balanceOfUser, totalSupply());\\n    if (accruedRewards != 0) {\\n      emit RewardsAccrued(onBehalfOf, accruedRewards);\\n      stakerRewardsToClaim[onBehalfOf] = stakerRewardsToClaim[onBehalfOf].add(accruedRewards);\\n    }\\n\\n    stakersCooldowns[onBehalfOf] = getNextCooldownTimestamp(0, amount, onBehalfOf, balanceOfUser);\\n\\n    _mint(onBehalfOf, amount);\\n    IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit Staked(msg.sender, onBehalfOf, amount);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens, and stop earning rewards\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   **/\\n  function redeem(address to, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    //solium-disable-next-line\\n    uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\\n    require(\\n      block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\\n      'INSUFFICIENT_COOLDOWN'\\n    );\\n    require(\\n      block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n      'UNSTAKE_WINDOW_FINISHED'\\n    );\\n    uint256 balanceOfMessageSender = balanceOf(msg.sender);\\n\\n    uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\\n\\n    _updateCurrentUnclaimedRewards(msg.sender, balanceOfMessageSender, true);\\n\\n    _burn(msg.sender, amountToRedeem);\\n\\n    if (balanceOfMessageSender.sub(amountToRedeem) == 0) {\\n      stakersCooldowns[msg.sender] = 0;\\n    }\\n\\n    IERC20(STAKED_TOKEN).safeTransfer(to, amountToRedeem);\\n\\n    emit Redeem(msg.sender, to, amountToRedeem);\\n  }\\n\\n  /**\\n   * @dev Activates the cooldown period to unstake\\n   * - It can't be called if the user is not staking\\n   **/\\n  function cooldown() external override {\\n    require(balanceOf(msg.sender) != 0, 'INVALID_BALANCE_ON_COOLDOWN');\\n    //solium-disable-next-line\\n    stakersCooldowns[msg.sender] = block.timestamp;\\n\\n    emit Cooldown(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\\n   * @param to Address to stake for\\n   * @param amount Amount to stake\\n   **/\\n  function claimRewards(address to, uint256 amount) external override {\\n    uint256 newTotalRewards =\\n      _updateCurrentUnclaimedRewards(msg.sender, balanceOf(msg.sender), false);\\n    uint256 amountToClaim = (amount == type(uint256).max) ? newTotalRewards : amount;\\n\\n    stakerRewardsToClaim[msg.sender] = newTotalRewards.sub(amountToClaim, 'INVALID_AMOUNT');\\n\\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\\n\\n    emit RewardsClaimed(msg.sender, to, amountToClaim);\\n  }\\n\\n  /**\\n   * @dev Internal ERC20 _transfer of the tokenized staked tokens\\n   * @param from Address to transfer from\\n   * @param to Address to transfer to\\n   * @param amount Amount to transfer\\n   **/\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    uint256 balanceOfFrom = balanceOf(from);\\n    // Sender\\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\\n\\n    // Recipient\\n    if (from != to) {\\n      uint256 balanceOfTo = balanceOf(to);\\n      _updateCurrentUnclaimedRewards(to, balanceOfTo, true);\\n\\n      uint256 previousSenderCooldown = stakersCooldowns[from];\\n      stakersCooldowns[to] = getNextCooldownTimestamp(\\n        previousSenderCooldown,\\n        amount,\\n        to,\\n        balanceOfTo\\n      );\\n      // if cooldown was set and whole balance of sender was transferred - clear cooldown\\n      if (balanceOfFrom == amount && previousSenderCooldown != 0) {\\n        stakersCooldowns[from] = 0;\\n      }\\n    }\\n\\n    super._transfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Updates the user state related with his accrued rewards\\n   * @param user Address of the user\\n   * @param userBalance The current balance of the user\\n   * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\\n   * @return The unclaimed rewards that were added to the total accrued\\n   **/\\n  function _updateCurrentUnclaimedRewards(\\n    address user,\\n    uint256 userBalance,\\n    bool updateStorage\\n  ) internal returns (uint256) {\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(user, address(this), userBalance, totalSupply());\\n    uint256 unclaimedRewards = stakerRewardsToClaim[user].add(accruedRewards);\\n\\n    if (accruedRewards != 0) {\\n      if (updateStorage) {\\n        stakerRewardsToClaim[user] = unclaimedRewards;\\n      }\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n\\n    return unclaimedRewards;\\n  }\\n\\n  /**\\n   * @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\\n   *  - If the timestamp of the sender is \\\"better\\\" or the timestamp of the recipient is 0, we take the one of the recipient\\n   *  - Weighted average of from/to cooldown timestamps if:\\n   *    # The sender doesn't have the cooldown activated (timestamp 0).\\n   *    # The sender timestamp is expired\\n   *    # The sender has a \\\"worse\\\" timestamp\\n   *  - If the receiver's cooldown timestamp expired (too old), the next is 0\\n   * @param fromCooldownTimestamp Cooldown timestamp of the sender\\n   * @param amountToReceive Amount\\n   * @param toAddress Address of the recipient\\n   * @param toBalance Current balance of the receiver\\n   * @return The new cooldown timestamp\\n   **/\\n  function getNextCooldownTimestamp(\\n    uint256 fromCooldownTimestamp,\\n    uint256 amountToReceive,\\n    address toAddress,\\n    uint256 toBalance\\n  ) public view returns (uint256) {\\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\\n    if (toCooldownTimestamp == 0) {\\n      return 0;\\n    }\\n\\n    uint256 minimalValidCooldownTimestamp =\\n      block.timestamp.sub(COOLDOWN_SECONDS).sub(UNSTAKE_WINDOW);\\n\\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\\n      toCooldownTimestamp = 0;\\n    } else {\\n      uint256 fromCooldownTimestamp =\\n        (minimalValidCooldownTimestamp > fromCooldownTimestamp)\\n          ? block.timestamp\\n          : fromCooldownTimestamp;\\n\\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\\n        return toCooldownTimestamp;\\n      } else {\\n        toCooldownTimestamp = (\\n          amountToReceive.mul(fromCooldownTimestamp).add(toBalance.mul(toCooldownTimestamp))\\n        )\\n          .div(amountToReceive.add(toBalance));\\n      }\\n    }\\n    return toCooldownTimestamp;\\n  }\\n\\n  /**\\n   * @dev Return the total rewards pending to claim by an staker\\n   * @param staker The staker address\\n   * @return The rewards\\n   */\\n  function getTotalRewardsBalance(address staker) external view returns (uint256) {\\n    DistributionTypes.UserStakeInput[] memory userStakeInputs =\\n      new DistributionTypes.UserStakeInput[](1);\\n    userStakeInputs[0] = DistributionTypes.UserStakeInput({\\n      underlyingAsset: address(this),\\n      stakedByUser: balanceOf(staker),\\n      totalStaked: totalSupply()\\n    });\\n    return stakerRewardsToClaim[staker].add(_getUnclaimedRewards(staker, userStakeInputs));\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   * @return The revision\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner the owner of the funds\\n   * @param spender the spender\\n   * @param value the amount\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(owner != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    uint256 currentValidNonce = _nonces[owner];\\n    bytes32 digest =\\n      keccak256(\\n        abi.encodePacked(\\n          '\\\\x19\\\\x01',\\n          DOMAIN_SEPARATOR,\\n          keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n        )\\n      );\\n\\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _nonces[owner] = currentValidNonce.add(1);\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\\n   * - On _transfer, it writes snapshots for both \\\"from\\\" and \\\"to\\\"\\n   * - On _mint, only for _to\\n   * - On _burn, only for _from\\n   * @param from the from address\\n   * @param to the to address\\n   * @param amount the amount to transfer\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    address votingFromDelegatee = _votingDelegates[from];\\n    address votingToDelegatee = _votingDelegates[to];\\n\\n    if (votingFromDelegatee == address(0)) {\\n      votingFromDelegatee = from;\\n    }\\n    if (votingToDelegatee == address(0)) {\\n      votingToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      votingFromDelegatee,\\n      votingToDelegatee,\\n      amount,\\n      DelegationType.VOTING_POWER\\n    );\\n\\n    address propPowerFromDelegatee = _propositionPowerDelegates[from];\\n    address propPowerToDelegatee = _propositionPowerDelegates[to];\\n\\n    if (propPowerFromDelegatee == address(0)) {\\n      propPowerFromDelegatee = from;\\n    }\\n    if (propPowerToDelegatee == address(0)) {\\n      propPowerToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      propPowerFromDelegatee,\\n      propPowerToDelegatee,\\n      amount,\\n      DelegationType.PROPOSITION_POWER\\n    );\\n\\n    // caching the aave governance address to avoid multiple state loads\\n    ITransferHook aaveGovernance = _aaveGovernance;\\n    if (aaveGovernance != ITransferHook(0)) {\\n      aaveGovernance.onTransfer(from, to, amount);\\n    }\\n  }\\n\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    override\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    )\\n  {\\n    if (delegationType == DelegationType.VOTING_POWER) {\\n      return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\\n    } else {\\n      return (\\n        _propositionPowerSnapshots,\\n        _propositionPowerSnapshotsCounts,\\n        _propositionPowerDelegates\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateByTypeBySig(\\n    address delegatee,\\n    DelegationType delegationType,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash =\\n      keccak256(\\n        abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\\n      );\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(signatory, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n}\\n\",\"keccak256\":\"0x193e8dd33d55c137ea32793b1f2c2f06b4b8936ee5c625e38766062c4f89fb43\",\"license\":\"agpl-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"ERC20":{"abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.","kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"constructor":{"details":"Sets the values for {name} and {symbol}, initializes {decimals} with a default value of 18. To select a different value for {decimals}, use {_setupDecimals}. All three of these values are immutable: they can only be set once during construction."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1496:2","statements":[{"nodeType":"YulBlock","src":"6:3:2","statements":[]},{"body":{"nodeType":"YulBlock","src":"80:813:2","statements":[{"body":{"nodeType":"YulBlock","src":"129:24:2","statements":[{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"138:5:2"},{"name":"array","nodeType":"YulIdentifier","src":"145:5:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:2"},"nodeType":"YulFunctionCall","src":"131:20:2"},"nodeType":"YulExpressionStatement","src":"131:20:2"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"108:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"116:4:2","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"104:3:2"},"nodeType":"YulFunctionCall","src":"104:17:2"},{"name":"end","nodeType":"YulIdentifier","src":"123:3:2"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"100:3:2"},"nodeType":"YulFunctionCall","src":"100:27:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"93:6:2"},"nodeType":"YulFunctionCall","src":"93:35:2"},"nodeType":"YulIf","src":"90:2:2"},{"nodeType":"YulVariableDeclaration","src":"162:27:2","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"182:6:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"176:5:2"},"nodeType":"YulFunctionCall","src":"176:13:2"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"166:6:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"198:28:2","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"216:2:2","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"220:1:2","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"212:3:2"},"nodeType":"YulFunctionCall","src":"212:10:2"},{"kind":"number","nodeType":"YulLiteral","src":"224:1:2","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"208:3:2"},"nodeType":"YulFunctionCall","src":"208:18:2"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"202:2:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"253:13:2","statements":[{"expression":{"arguments":[],"functionName":{"name":"invalid","nodeType":"YulIdentifier","src":"255:7:2"},"nodeType":"YulFunctionCall","src":"255:9:2"},"nodeType":"YulExpressionStatement","src":"255:9:2"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"241:6:2"},{"name":"_1","nodeType":"YulIdentifier","src":"249:2:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"238:2:2"},"nodeType":"YulFunctionCall","src":"238:14:2"},"nodeType":"YulIf","src":"235:2:2"},{"nodeType":"YulVariableDeclaration","src":"275:23:2","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"295:2:2","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"289:5:2"},"nodeType":"YulFunctionCall","src":"289:9:2"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"279:6:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"307:14:2","value":{"kind":"number","nodeType":"YulLiteral","src":"317:4:2","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"311:2:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"330:71:2","value":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"356:6:2"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"372:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"380:4:2","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"368:3:2"},"nodeType":"YulFunctionCall","src":"368:17:2"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"391:2:2","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"387:3:2"},"nodeType":"YulFunctionCall","src":"387:7:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"364:3:2"},"nodeType":"YulFunctionCall","src":"364:31:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"352:3:2"},"nodeType":"YulFunctionCall","src":"352:44:2"},{"name":"_2","nodeType":"YulIdentifier","src":"398:2:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"348:3:2"},"nodeType":"YulFunctionCall","src":"348:53:2"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"334:10:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"460:13:2","statements":[{"expression":{"arguments":[],"functionName":{"name":"invalid","nodeType":"YulIdentifier","src":"462:7:2"},"nodeType":"YulFunctionCall","src":"462:9:2"},"nodeType":"YulExpressionStatement","src":"462:9:2"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"419:10:2"},{"name":"_1","nodeType":"YulIdentifier","src":"431:2:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"416:2:2"},"nodeType":"YulFunctionCall","src":"416:18:2"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"439:10:2"},{"name":"memPtr","nodeType":"YulIdentifier","src":"451:6:2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"436:2:2"},"nodeType":"YulFunctionCall","src":"436:22:2"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"413:2:2"},"nodeType":"YulFunctionCall","src":"413:46:2"},"nodeType":"YulIf","src":"410:2:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"489:2:2","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"493:10:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"482:6:2"},"nodeType":"YulFunctionCall","src":"482:22:2"},"nodeType":"YulExpressionStatement","src":"482:22:2"},{"nodeType":"YulAssignment","src":"513:15:2","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"522:6:2"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"513:5:2"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"544:6:2"},{"name":"length","nodeType":"YulIdentifier","src":"552:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"537:6:2"},"nodeType":"YulFunctionCall","src":"537:22:2"},"nodeType":"YulExpressionStatement","src":"537:22:2"},{"body":{"nodeType":"YulBlock","src":"609:16:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"618:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"621:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"611:6:2"},"nodeType":"YulFunctionCall","src":"611:12:2"},"nodeType":"YulExpressionStatement","src":"611:12:2"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"582:6:2"},{"name":"length","nodeType":"YulIdentifier","src":"590:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"578:3:2"},"nodeType":"YulFunctionCall","src":"578:19:2"},{"name":"_2","nodeType":"YulIdentifier","src":"599:2:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"574:3:2"},"nodeType":"YulFunctionCall","src":"574:28:2"},{"name":"end","nodeType":"YulIdentifier","src":"604:3:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"571:2:2"},"nodeType":"YulFunctionCall","src":"571:37:2"},"nodeType":"YulIf","src":"568:2:2"},{"nodeType":"YulVariableDeclaration","src":"634:10:2","value":{"kind":"number","nodeType":"YulLiteral","src":"643:1:2","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"638:1:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"703:87:2","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"732:6:2"},{"name":"i","nodeType":"YulIdentifier","src":"740:1:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"728:3:2"},"nodeType":"YulFunctionCall","src":"728:14:2"},{"name":"_2","nodeType":"YulIdentifier","src":"744:2:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"724:3:2"},"nodeType":"YulFunctionCall","src":"724:23:2"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"763:6:2"},{"name":"i","nodeType":"YulIdentifier","src":"771:1:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"759:3:2"},"nodeType":"YulFunctionCall","src":"759:14:2"},{"name":"_2","nodeType":"YulIdentifier","src":"775:2:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"755:3:2"},"nodeType":"YulFunctionCall","src":"755:23:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"749:5:2"},"nodeType":"YulFunctionCall","src":"749:30:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"717:6:2"},"nodeType":"YulFunctionCall","src":"717:63:2"},"nodeType":"YulExpressionStatement","src":"717:63:2"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"664:1:2"},{"name":"length","nodeType":"YulIdentifier","src":"667:6:2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"661:2:2"},"nodeType":"YulFunctionCall","src":"661:13:2"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"675:19:2","statements":[{"nodeType":"YulAssignment","src":"677:15:2","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"686:1:2"},{"name":"_2","nodeType":"YulIdentifier","src":"689:2:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"682:3:2"},"nodeType":"YulFunctionCall","src":"682:10:2"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"677:1:2"}]}]},"pre":{"nodeType":"YulBlock","src":"657:3:2","statements":[]},"src":"653:137:2"},{"body":{"nodeType":"YulBlock","src":"824:63:2","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"853:6:2"},{"name":"length","nodeType":"YulIdentifier","src":"861:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"849:3:2"},"nodeType":"YulFunctionCall","src":"849:19:2"},{"name":"_2","nodeType":"YulIdentifier","src":"870:2:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"845:3:2"},"nodeType":"YulFunctionCall","src":"845:28:2"},{"kind":"number","nodeType":"YulLiteral","src":"875:1:2","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"838:6:2"},"nodeType":"YulFunctionCall","src":"838:39:2"},"nodeType":"YulExpressionStatement","src":"838:39:2"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"805:1:2"},{"name":"length","nodeType":"YulIdentifier","src":"808:6:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"802:2:2"},"nodeType":"YulFunctionCall","src":"802:13:2"},"nodeType":"YulIf","src":"799:2:2"}]},"name":"abi_decode_t_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"54:6:2","type":""},{"name":"end","nodeType":"YulTypedName","src":"62:3:2","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"70:5:2","type":""}],"src":"14:879:2"},{"body":{"nodeType":"YulBlock","src":"1016:478:2","statements":[{"body":{"nodeType":"YulBlock","src":"1062:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1071:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"1079:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1064:6:2"},"nodeType":"YulFunctionCall","src":"1064:22:2"},"nodeType":"YulExpressionStatement","src":"1064:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1037:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"1046:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1033:3:2"},"nodeType":"YulFunctionCall","src":"1033:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"1058:2:2","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1029:3:2"},"nodeType":"YulFunctionCall","src":"1029:32:2"},"nodeType":"YulIf","src":"1026:2:2"},{"nodeType":"YulVariableDeclaration","src":"1097:30:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1117:9:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1111:5:2"},"nodeType":"YulFunctionCall","src":"1111:16:2"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1101:6:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1136:28:2","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1154:2:2","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1158:1:2","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1150:3:2"},"nodeType":"YulFunctionCall","src":"1150:10:2"},{"kind":"number","nodeType":"YulLiteral","src":"1162:1:2","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1146:3:2"},"nodeType":"YulFunctionCall","src":"1146:18:2"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1140:2:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"1191:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1200:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"1208:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1193:6:2"},"nodeType":"YulFunctionCall","src":"1193:22:2"},"nodeType":"YulExpressionStatement","src":"1193:22:2"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1179:6:2"},{"name":"_1","nodeType":"YulIdentifier","src":"1187:2:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1176:2:2"},"nodeType":"YulFunctionCall","src":"1176:14:2"},"nodeType":"YulIf","src":"1173:2:2"},{"nodeType":"YulAssignment","src":"1226:73:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1271:9:2"},{"name":"offset","nodeType":"YulIdentifier","src":"1282:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1267:3:2"},"nodeType":"YulFunctionCall","src":"1267:22:2"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1291:7:2"}],"functionName":{"name":"abi_decode_t_string_fromMemory","nodeType":"YulIdentifier","src":"1236:30:2"},"nodeType":"YulFunctionCall","src":"1236:63:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1226:6:2"}]},{"nodeType":"YulVariableDeclaration","src":"1308:41:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1334:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"1345:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1330:3:2"},"nodeType":"YulFunctionCall","src":"1330:18:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1324:5:2"},"nodeType":"YulFunctionCall","src":"1324:25:2"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1312:8:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"1378:26:2","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1387:6:2"},{"name":"value1","nodeType":"YulIdentifier","src":"1395:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1380:6:2"},"nodeType":"YulFunctionCall","src":"1380:22:2"},"nodeType":"YulExpressionStatement","src":"1380:22:2"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1364:8:2"},{"name":"_1","nodeType":"YulIdentifier","src":"1374:2:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1361:2:2"},"nodeType":"YulFunctionCall","src":"1361:16:2"},"nodeType":"YulIf","src":"1358:2:2"},{"nodeType":"YulAssignment","src":"1413:75:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1458:9:2"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1469:8:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1454:3:2"},"nodeType":"YulFunctionCall","src":"1454:24:2"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1480:7:2"}],"functionName":{"name":"abi_decode_t_string_fromMemory","nodeType":"YulIdentifier","src":"1423:30:2"},"nodeType":"YulFunctionCall","src":"1423:65:2"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1413:6:2"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"974:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"985:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"997:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1005:6:2","type":""}],"src":"898:596:2"}]},"contents":"{\n    { }\n    function abi_decode_t_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let length := mload(offset)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(length, _1) { invalid() }\n        let memPtr := mload(64)\n        let _2 := 0x20\n        let newFreePtr := add(add(memPtr, and(add(length, 0x1f), not(31))), _2)\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(64, newFreePtr)\n        array := memPtr\n        mstore(memPtr, length)\n        if gt(add(add(offset, length), _2), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, length) { i := add(i, _2) }\n        {\n            mstore(add(add(memPtr, i), _2), mload(add(add(offset, i), _2)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(memPtr, length), _2), 0)\n        }\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(value0, value0) }\n        value0 := abi_decode_t_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(value1, value1) }\n        value1 := abi_decode_t_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n}","id":2,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060405162000e2538038062000e258339810160408190526200003491620001c4565b81516200004990600390602085019062000075565b5080516200005f90600490602084019062000075565b50506005805460ff19166012179055506200022b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620000ad5760008555620000f8565b82601f10620000c857805160ff1916838001178555620000f8565b82800160010185558215620000f8579182015b82811115620000f8578251825591602001919060010190620000db565b50620001069291506200010a565b5090565b5b808211156200010657600081556001016200010b565b600082601f83011262000132578081fd5b81516001600160401b03808211156200014757fe5b6040516020601f8401601f19168201810183811183821017156200016757fe5b806040525081945083825286818588010111156200018457600080fd5b600092505b83831015620001a8578583018101518284018201529182019162000189565b83831115620001ba5760008185840101525b5050505092915050565b60008060408385031215620001d7578182fd5b82516001600160401b0380821115620001ee578384fd5b620001fc8683870162000121565b9350602085015191508082111562000212578283fd5b50620002218582860162000121565b9150509250929050565b610bea806200023b6000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610177578063a9059cbb1461018a578063dd62ed3e1461019d576100c9565b8063395093511461014957806370a082311461015c57806395d89b411461016f576100c9565b806318160ddd116100b257806318160ddd1461010c57806323b872dd14610121578063313ce56714610134576100c9565b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d66101b0565b6040516100e3919061090e565b60405180910390f35b6100ff6100fa3660046108da565b610264565b6040516100e39190610903565b610114610281565b6040516100e39190610b2a565b6100ff61012f36600461089f565b610287565b61013c610328565b6040516100e39190610b33565b6100ff6101573660046108da565b610331565b61011461016a366004610853565b61038c565b6100d66103b8565b6100ff6101853660046108da565b610437565b6100ff6101983660046108da565b6104ac565b6101146101ab36600461086d565b6104c0565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561025a5780601f1061022f5761010080835404028352916020019161025a565b820191906000526020600020905b81548152906001019060200180831161023d57829003601f168201915b5050505050905090565b60006102786102716104f8565b84846104fc565b50600192915050565b60025490565b6000610294848484610614565b61031e846102a06104f8565b61031985604051806060016040528060288152602001610b686028913973ffffffffffffffffffffffffffffffffffffffff8a166000908152600160205260408120906102eb6104f8565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002054919061079e565b6104fc565b5060019392505050565b60055460ff1690565b600061027861033e6104f8565b84610319856001600061034f6104f8565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918c1681529252902054906107e4565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081905260409020545b919050565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561025a5780601f1061022f5761010080835404028352916020019161025a565b60006102786104446104f8565b8461031985604051806060016040528060258152602001610b90602591396001600061046e6104f8565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918d1681529252902054919061079e565b60006102786104b96104f8565b8484610614565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b3390565b73ffffffffffffffffffffffffffffffffffffffff8316610552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054990610acd565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821661059f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610549906109dc565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610607908590610b2a565b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316610661576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054990610a70565b73ffffffffffffffffffffffffffffffffffffffff82166106ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105499061097f565b6106b983838361082a565b61070381604051806060016040528060268152602001610b426026913973ffffffffffffffffffffffffffffffffffffffff8616600090815260208190526040902054919061079e565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208190526040808220939093559084168152205461073f90826107e4565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526020819052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610607908590610b2a565b600081848411156107dc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610549919061090e565b505050900390565b600082820183811015610823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054990610a39565b9392505050565b505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146103b357600080fd5b600060208284031215610864578081fd5b6108238261082f565b6000806040838503121561087f578081fd5b6108888361082f565b91506108966020840161082f565b90509250929050565b6000806000606084860312156108b3578081fd5b6108bc8461082f565b92506108ca6020850161082f565b9150604084013590509250925092565b600080604083850312156108ec578182fd5b6108f58361082f565b946020939093013593505050565b901515815260200190565b6000602080835283518082850152825b8181101561093a5785810183015185820160400152820161091e565b8181111561094b5783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201527f6573730000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460408201527f7265737300000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b60ff9190911681526020019056fe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122080586f44bd9b217dba525bd791ca0d56f7b3edcb88a650a5df8b896e929588e764736f6c63430007050033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xE25 CODESIZE SUB DUP1 PUSH3 0xE25 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1C4 JUMP JUMPDEST DUP2 MLOAD PUSH3 0x49 SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x75 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x5F SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x75 JUMP JUMPDEST POP POP PUSH1 0x5 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x12 OR SWAP1 SSTORE POP PUSH3 0x22B JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xAD JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xF8 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xC8 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xF8 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xF8 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xF8 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xDB JUMP JUMPDEST POP PUSH3 0x106 SWAP3 SWAP2 POP PUSH3 0x10A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x106 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x10B JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x132 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x147 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND DUP3 ADD DUP2 ADD DUP4 DUP2 GT DUP4 DUP3 LT OR ISZERO PUSH3 0x167 JUMPI INVALID JUMPDEST DUP1 PUSH1 0x40 MSTORE POP DUP2 SWAP5 POP DUP4 DUP3 MSTORE DUP7 DUP2 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x184 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 POP JUMPDEST DUP4 DUP4 LT ISZERO PUSH3 0x1A8 JUMPI DUP6 DUP4 ADD DUP2 ADD MLOAD DUP3 DUP5 ADD DUP3 ADD MSTORE SWAP2 DUP3 ADD SWAP2 PUSH3 0x189 JUMP JUMPDEST DUP4 DUP4 GT ISZERO PUSH3 0x1BA JUMPI PUSH1 0x0 DUP2 DUP6 DUP5 ADD ADD MSTORE JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1D7 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x1EE JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH3 0x1FC DUP7 DUP4 DUP8 ADD PUSH3 0x121 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x212 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH3 0x221 DUP6 DUP3 DUP7 ADD PUSH3 0x121 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xBEA DUP1 PUSH3 0x23B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x19D JUMPI PUSH2 0xC9 JUMP JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x149 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x15C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x16F JUMPI PUSH2 0xC9 JUMP JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x134 JUMPI PUSH2 0xC9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0x1B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x90E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFF PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0x8DA JUMP JUMPDEST PUSH2 0x264 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x903 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x281 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0xB2A JUMP JUMPDEST PUSH2 0xFF PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0x89F JUMP JUMPDEST PUSH2 0x287 JUMP JUMPDEST PUSH2 0x13C PUSH2 0x328 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0xB33 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x157 CALLDATASIZE PUSH1 0x4 PUSH2 0x8DA JUMP JUMPDEST PUSH2 0x331 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x16A CALLDATASIZE PUSH1 0x4 PUSH2 0x853 JUMP JUMPDEST PUSH2 0x38C JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x3B8 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x185 CALLDATASIZE PUSH1 0x4 PUSH2 0x8DA JUMP JUMPDEST PUSH2 0x437 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x198 CALLDATASIZE PUSH1 0x4 PUSH2 0x8DA JUMP JUMPDEST PUSH2 0x4AC JUMP JUMPDEST PUSH2 0x114 PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0x86D JUMP JUMPDEST PUSH2 0x4C0 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x25A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x22F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x25A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x23D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x278 PUSH2 0x271 PUSH2 0x4F8 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x4FC JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x294 DUP5 DUP5 DUP5 PUSH2 0x614 JUMP JUMPDEST PUSH2 0x31E DUP5 PUSH2 0x2A0 PUSH2 0x4F8 JUMP JUMPDEST PUSH2 0x319 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB68 PUSH1 0x28 SWAP2 CODECOPY PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x2EB PUSH2 0x4F8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x79E JUMP JUMPDEST PUSH2 0x4FC JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x278 PUSH2 0x33E PUSH2 0x4F8 JUMP JUMPDEST DUP5 PUSH2 0x319 DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0x34F PUSH2 0x4F8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP13 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 PUSH2 0x7E4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x25A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x22F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x25A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x278 PUSH2 0x444 PUSH2 0x4F8 JUMP JUMPDEST DUP5 PUSH2 0x319 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB90 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x46E PUSH2 0x4F8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP14 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x79E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x278 PUSH2 0x4B9 PUSH2 0x4F8 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x614 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x552 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x549 SWAP1 PUSH2 0xACD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x59F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x549 SWAP1 PUSH2 0x9DC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x607 SWAP1 DUP6 SWAP1 PUSH2 0xB2A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x661 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x549 SWAP1 PUSH2 0xA70 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x6AE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x549 SWAP1 PUSH2 0x97F JUMP JUMPDEST PUSH2 0x6B9 DUP4 DUP4 DUP4 PUSH2 0x82A JUMP JUMPDEST PUSH2 0x703 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB42 PUSH1 0x26 SWAP2 CODECOPY PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x79E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x73F SWAP1 DUP3 PUSH2 0x7E4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x607 SWAP1 DUP6 SWAP1 PUSH2 0xB2A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x7DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x549 SWAP2 SWAP1 PUSH2 0x90E JUMP JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x823 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x549 SWAP1 PUSH2 0xA39 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x864 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x823 DUP3 PUSH2 0x82F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x87F JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x888 DUP4 PUSH2 0x82F JUMP JUMPDEST SWAP2 POP PUSH2 0x896 PUSH1 0x20 DUP5 ADD PUSH2 0x82F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8B3 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8BC DUP5 PUSH2 0x82F JUMP JUMPDEST SWAP3 POP PUSH2 0x8CA PUSH1 0x20 DUP6 ADD PUSH2 0x82F JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8EC JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8F5 DUP4 PUSH2 0x82F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x93A JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x91E JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x94B JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x2062616C616E636545524332303A207472616E73 PUSH7 0x657220616D6F75 PUSH15 0x74206578636565647320616C6C6F77 PUSH2 0x6E63 PUSH6 0x45524332303A KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x73582212208058 PUSH16 0x44BD9B217DBA525BD791CA0D56F7B3ED 0xCB DUP9 0xA6 POP 0xA5 0xDF DUP12 DUP10 PUSH15 0x929588E764736F6C63430007050033 ","sourceMap":"14658:9047:0:-:0;;;15289:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;15356:12;;;;:5;;:12;;;;;:::i;:::-;-1:-1:-1;15374:16:0;;;;:7;;:16;;;;;:::i;:::-;-1:-1:-1;;15396:9:0;:14;;-1:-1:-1;;15396:14:0;15408:2;15396:14;;;-1:-1:-1;14658:9047:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14658:9047:0;;;-1:-1:-1;14658:9047:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:879:2;;123:3;116:4;108:6;104:17;100:27;90:2;;145:5;138;131:20;90:2;176:13;;-1:-1:-1;;;;;238:14:2;;;235:2;;;255:9;235:2;295;289:9;317:4;391:2;368:17;;-1:-1:-1;;364:31:2;352:44;;348:53;;416:18;;;436:22;;;413:46;410:2;;;462:9;410:2;493:10;489:2;482:22;;522:6;513:15;;552:6;544;537:22;604:3;599:2;590:6;582;578:19;574:28;571:37;568:2;;;621:1;618;611:12;568:2;643:1;634:10;;653:137;667:6;664:1;661:13;653:137;;;759:14;;;755:23;;749:30;728:14;;;724:23;;717:63;682:10;;;;653:137;;;808:6;805:1;802:13;799:2;;;875:1;870:2;861:6;853;849:19;845:28;838:39;799:2;;;;;80:813;;;;:::o;898:596::-;;;1058:2;1046:9;1037:7;1033:23;1029:32;1026:2;;;1079:6;1071;1064:22;1026:2;1111:16;;-1:-1:-1;;;;;1176:14:2;;;1173:2;;;1208:6;1200;1193:22;1173:2;1236:63;1291:7;1282:6;1271:9;1267:22;1236:63;:::i;:::-;1226:73;;1345:2;1334:9;1330:18;1324:25;1308:41;;1374:2;1364:8;1361:16;1358:2;;;1395:6;1387;1380:22;1358:2;;1423:65;1480:7;1469:8;1458:9;1454:24;1423:65;:::i;:::-;1413:75;;;1016:478;;;;;:::o;:::-;14658:9047:0;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4518:2","statements":[{"nodeType":"YulBlock","src":"6:3:2","statements":[]},{"body":{"nodeType":"YulBlock","src":"65:147:2","statements":[{"nodeType":"YulAssignment","src":"75:29:2","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"97:6:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"84:12:2"},"nodeType":"YulFunctionCall","src":"84:20:2"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"75:5:2"}]},{"body":{"nodeType":"YulBlock","src":"190:16:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"199:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"202:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"192:6:2"},"nodeType":"YulFunctionCall","src":"192:12:2"},"nodeType":"YulExpressionStatement","src":"192:12:2"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"126:5:2"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"137:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"144:42:2","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"133:3:2"},"nodeType":"YulFunctionCall","src":"133:54:2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"123:2:2"},"nodeType":"YulFunctionCall","src":"123:65:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"116:6:2"},"nodeType":"YulFunctionCall","src":"116:73:2"},"nodeType":"YulIf","src":"113:2:2"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"44:6:2","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"55:5:2","type":""}],"src":"14:198:2"},{"body":{"nodeType":"YulBlock","src":"287:128:2","statements":[{"body":{"nodeType":"YulBlock","src":"333:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"342:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"350:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"335:6:2"},"nodeType":"YulFunctionCall","src":"335:22:2"},"nodeType":"YulExpressionStatement","src":"335:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"308:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"317:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"304:3:2"},"nodeType":"YulFunctionCall","src":"304:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"329:2:2","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"300:3:2"},"nodeType":"YulFunctionCall","src":"300:32:2"},"nodeType":"YulIf","src":"297:2:2"},{"nodeType":"YulAssignment","src":"368:41:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"399:9:2"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"378:20:2"},"nodeType":"YulFunctionCall","src":"378:31:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"368:6:2"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"253:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"264:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"276:6:2","type":""}],"src":"217:198:2"},{"body":{"nodeType":"YulBlock","src":"507:187:2","statements":[{"body":{"nodeType":"YulBlock","src":"553:26:2","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"562:6:2"},{"name":"value1","nodeType":"YulIdentifier","src":"570:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"555:6:2"},"nodeType":"YulFunctionCall","src":"555:22:2"},"nodeType":"YulExpressionStatement","src":"555:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"528:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"537:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"524:3:2"},"nodeType":"YulFunctionCall","src":"524:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"549:2:2","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"520:3:2"},"nodeType":"YulFunctionCall","src":"520:32:2"},"nodeType":"YulIf","src":"517:2:2"},{"nodeType":"YulAssignment","src":"588:41:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"619:9:2"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"598:20:2"},"nodeType":"YulFunctionCall","src":"598:31:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"588:6:2"}]},{"nodeType":"YulAssignment","src":"638:50:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"673:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"684:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"669:3:2"},"nodeType":"YulFunctionCall","src":"669:18:2"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"648:20:2"},"nodeType":"YulFunctionCall","src":"648:40:2"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"638:6:2"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"465:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"476:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"488:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"496:6:2","type":""}],"src":"420:274:2"},{"body":{"nodeType":"YulBlock","src":"803:238:2","statements":[{"body":{"nodeType":"YulBlock","src":"849:26:2","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"858:6:2"},{"name":"value2","nodeType":"YulIdentifier","src":"866:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"851:6:2"},"nodeType":"YulFunctionCall","src":"851:22:2"},"nodeType":"YulExpressionStatement","src":"851:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"824:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"833:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"820:3:2"},"nodeType":"YulFunctionCall","src":"820:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"845:2:2","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"816:3:2"},"nodeType":"YulFunctionCall","src":"816:32:2"},"nodeType":"YulIf","src":"813:2:2"},{"nodeType":"YulAssignment","src":"884:41:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"915:9:2"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"894:20:2"},"nodeType":"YulFunctionCall","src":"894:31:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"884:6:2"}]},{"nodeType":"YulAssignment","src":"934:50:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"969:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"980:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"965:3:2"},"nodeType":"YulFunctionCall","src":"965:18:2"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"944:20:2"},"nodeType":"YulFunctionCall","src":"944:40:2"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"934:6:2"}]},{"nodeType":"YulAssignment","src":"993:42:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1020:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"1031:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1016:3:2"},"nodeType":"YulFunctionCall","src":"1016:18:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1003:12:2"},"nodeType":"YulFunctionCall","src":"1003:32:2"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"993:6:2"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"753:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"764:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"776:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"784:6:2","type":""},{"name":"value2","nodeType":"YulTypedName","src":"792:6:2","type":""}],"src":"699:342:2"},{"body":{"nodeType":"YulBlock","src":"1133:179:2","statements":[{"body":{"nodeType":"YulBlock","src":"1179:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1188:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"1196:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1181:6:2"},"nodeType":"YulFunctionCall","src":"1181:22:2"},"nodeType":"YulExpressionStatement","src":"1181:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1154:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"1163:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1150:3:2"},"nodeType":"YulFunctionCall","src":"1150:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"1175:2:2","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1146:3:2"},"nodeType":"YulFunctionCall","src":"1146:32:2"},"nodeType":"YulIf","src":"1143:2:2"},{"nodeType":"YulAssignment","src":"1214:41:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1245:9:2"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1224:20:2"},"nodeType":"YulFunctionCall","src":"1224:31:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1214:6:2"}]},{"nodeType":"YulAssignment","src":"1264:42:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1291:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"1302:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1287:3:2"},"nodeType":"YulFunctionCall","src":"1287:18:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1274:12:2"},"nodeType":"YulFunctionCall","src":"1274:32:2"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1264:6:2"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1091:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1102:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1114:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1122:6:2","type":""}],"src":"1046:266:2"},{"body":{"nodeType":"YulBlock","src":"1412:92:2","statements":[{"nodeType":"YulAssignment","src":"1422:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1434:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"1445:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1430:3:2"},"nodeType":"YulFunctionCall","src":"1430:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1422:4:2"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1464:9:2"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1489:6:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1482:6:2"},"nodeType":"YulFunctionCall","src":"1482:14:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1475:6:2"},"nodeType":"YulFunctionCall","src":"1475:22:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1457:6:2"},"nodeType":"YulFunctionCall","src":"1457:41:2"},"nodeType":"YulExpressionStatement","src":"1457:41:2"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1381:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1392:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1403:4:2","type":""}],"src":"1317:187:2"},{"body":{"nodeType":"YulBlock","src":"1630:541:2","statements":[{"nodeType":"YulVariableDeclaration","src":"1640:12:2","value":{"kind":"number","nodeType":"YulLiteral","src":"1650:2:2","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1644:2:2","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1668:9:2"},{"name":"_1","nodeType":"YulIdentifier","src":"1679:2:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1661:6:2"},"nodeType":"YulFunctionCall","src":"1661:21:2"},"nodeType":"YulExpressionStatement","src":"1661:21:2"},{"nodeType":"YulVariableDeclaration","src":"1691:27:2","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1711:6:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1705:5:2"},"nodeType":"YulFunctionCall","src":"1705:13:2"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1695:6:2","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1738:9:2"},{"name":"_1","nodeType":"YulIdentifier","src":"1749:2:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1734:3:2"},"nodeType":"YulFunctionCall","src":"1734:18:2"},{"name":"length","nodeType":"YulIdentifier","src":"1754:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1727:6:2"},"nodeType":"YulFunctionCall","src":"1727:34:2"},"nodeType":"YulExpressionStatement","src":"1727:34:2"},{"nodeType":"YulVariableDeclaration","src":"1770:13:2","value":{"name":"tail","nodeType":"YulIdentifier","src":"1779:4:2"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1774:1:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"1842:90:2","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1871:9:2"},{"name":"i","nodeType":"YulIdentifier","src":"1882:1:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1867:3:2"},"nodeType":"YulFunctionCall","src":"1867:17:2"},{"kind":"number","nodeType":"YulLiteral","src":"1886:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1863:3:2"},"nodeType":"YulFunctionCall","src":"1863:26:2"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1905:6:2"},{"name":"i","nodeType":"YulIdentifier","src":"1913:1:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1901:3:2"},"nodeType":"YulFunctionCall","src":"1901:14:2"},{"name":"_1","nodeType":"YulIdentifier","src":"1917:2:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1897:3:2"},"nodeType":"YulFunctionCall","src":"1897:23:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1891:5:2"},"nodeType":"YulFunctionCall","src":"1891:30:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1856:6:2"},"nodeType":"YulFunctionCall","src":"1856:66:2"},"nodeType":"YulExpressionStatement","src":"1856:66:2"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1803:1:2"},{"name":"length","nodeType":"YulIdentifier","src":"1806:6:2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1800:2:2"},"nodeType":"YulFunctionCall","src":"1800:13:2"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1814:19:2","statements":[{"nodeType":"YulAssignment","src":"1816:15:2","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1825:1:2"},{"name":"_1","nodeType":"YulIdentifier","src":"1828:2:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1821:3:2"},"nodeType":"YulFunctionCall","src":"1821:10:2"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1816:1:2"}]}]},"pre":{"nodeType":"YulBlock","src":"1796:3:2","statements":[]},"src":"1792:140:2"},{"body":{"nodeType":"YulBlock","src":"1966:69:2","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1995:9:2"},{"name":"length","nodeType":"YulIdentifier","src":"2006:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1991:3:2"},"nodeType":"YulFunctionCall","src":"1991:22:2"},{"kind":"number","nodeType":"YulLiteral","src":"2015:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1987:3:2"},"nodeType":"YulFunctionCall","src":"1987:31:2"},{"name":"tail","nodeType":"YulIdentifier","src":"2020:4:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1980:6:2"},"nodeType":"YulFunctionCall","src":"1980:45:2"},"nodeType":"YulExpressionStatement","src":"1980:45:2"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1947:1:2"},{"name":"length","nodeType":"YulIdentifier","src":"1950:6:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1944:2:2"},"nodeType":"YulFunctionCall","src":"1944:13:2"},"nodeType":"YulIf","src":"1941:2:2"},{"nodeType":"YulAssignment","src":"2044:121:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2060:9:2"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2079:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"2087:2:2","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2075:3:2"},"nodeType":"YulFunctionCall","src":"2075:15:2"},{"kind":"number","nodeType":"YulLiteral","src":"2092:66:2","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2071:3:2"},"nodeType":"YulFunctionCall","src":"2071:88:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2056:3:2"},"nodeType":"YulFunctionCall","src":"2056:104:2"},{"kind":"number","nodeType":"YulLiteral","src":"2162:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2052:3:2"},"nodeType":"YulFunctionCall","src":"2052:113:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2044:4:2"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1599:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1610:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1621:4:2","type":""}],"src":"1509:662:2"},{"body":{"nodeType":"YulBlock","src":"2350:225:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2367:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2378:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2360:6:2"},"nodeType":"YulFunctionCall","src":"2360:21:2"},"nodeType":"YulExpressionStatement","src":"2360:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2401:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2412:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2397:3:2"},"nodeType":"YulFunctionCall","src":"2397:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"2417:2:2","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2390:6:2"},"nodeType":"YulFunctionCall","src":"2390:30:2"},"nodeType":"YulExpressionStatement","src":"2390:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2440:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2451:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2436:3:2"},"nodeType":"YulFunctionCall","src":"2436:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"2456:34:2","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2429:6:2"},"nodeType":"YulFunctionCall","src":"2429:62:2"},"nodeType":"YulExpressionStatement","src":"2429:62:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2511:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2522:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2507:3:2"},"nodeType":"YulFunctionCall","src":"2507:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"2527:5:2","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2500:6:2"},"nodeType":"YulFunctionCall","src":"2500:33:2"},"nodeType":"YulExpressionStatement","src":"2500:33:2"},{"nodeType":"YulAssignment","src":"2542:27:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2554:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2565:3:2","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2550:3:2"},"nodeType":"YulFunctionCall","src":"2550:19:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2542:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2327:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2341:4:2","type":""}],"src":"2176:399:2"},{"body":{"nodeType":"YulBlock","src":"2754:224:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2771:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2782:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2764:6:2"},"nodeType":"YulFunctionCall","src":"2764:21:2"},"nodeType":"YulExpressionStatement","src":"2764:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2805:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2816:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2801:3:2"},"nodeType":"YulFunctionCall","src":"2801:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"2821:2:2","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2794:6:2"},"nodeType":"YulFunctionCall","src":"2794:30:2"},"nodeType":"YulExpressionStatement","src":"2794:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2844:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2855:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2840:3:2"},"nodeType":"YulFunctionCall","src":"2840:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"2860:34:2","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2833:6:2"},"nodeType":"YulFunctionCall","src":"2833:62:2"},"nodeType":"YulExpressionStatement","src":"2833:62:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2915:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2926:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2911:3:2"},"nodeType":"YulFunctionCall","src":"2911:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"2931:4:2","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2904:6:2"},"nodeType":"YulFunctionCall","src":"2904:32:2"},"nodeType":"YulExpressionStatement","src":"2904:32:2"},{"nodeType":"YulAssignment","src":"2945:27:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2957:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2968:3:2","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2953:3:2"},"nodeType":"YulFunctionCall","src":"2953:19:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2945:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2731:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2745:4:2","type":""}],"src":"2580:398:2"},{"body":{"nodeType":"YulBlock","src":"3157:177:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3174:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3185:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3167:6:2"},"nodeType":"YulFunctionCall","src":"3167:21:2"},"nodeType":"YulExpressionStatement","src":"3167:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3208:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3219:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3204:3:2"},"nodeType":"YulFunctionCall","src":"3204:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"3224:2:2","type":"","value":"27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3197:6:2"},"nodeType":"YulFunctionCall","src":"3197:30:2"},"nodeType":"YulExpressionStatement","src":"3197:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3247:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3258:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3243:3:2"},"nodeType":"YulFunctionCall","src":"3243:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"3263:29:2","type":"","value":"SafeMath: addition overflow"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3236:6:2"},"nodeType":"YulFunctionCall","src":"3236:57:2"},"nodeType":"YulExpressionStatement","src":"3236:57:2"},{"nodeType":"YulAssignment","src":"3302:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3314:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3325:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3310:3:2"},"nodeType":"YulFunctionCall","src":"3310:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3302:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3134:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3148:4:2","type":""}],"src":"2983:351:2"},{"body":{"nodeType":"YulBlock","src":"3513:227:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3530:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3541:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3523:6:2"},"nodeType":"YulFunctionCall","src":"3523:21:2"},"nodeType":"YulExpressionStatement","src":"3523:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3564:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3575:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3560:3:2"},"nodeType":"YulFunctionCall","src":"3560:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"3580:2:2","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3553:6:2"},"nodeType":"YulFunctionCall","src":"3553:30:2"},"nodeType":"YulExpressionStatement","src":"3553:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3603:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3614:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3599:3:2"},"nodeType":"YulFunctionCall","src":"3599:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"3619:34:2","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3592:6:2"},"nodeType":"YulFunctionCall","src":"3592:62:2"},"nodeType":"YulExpressionStatement","src":"3592:62:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3674:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3685:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3670:3:2"},"nodeType":"YulFunctionCall","src":"3670:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"3690:7:2","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3663:6:2"},"nodeType":"YulFunctionCall","src":"3663:35:2"},"nodeType":"YulExpressionStatement","src":"3663:35:2"},{"nodeType":"YulAssignment","src":"3707:27:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3719:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3730:3:2","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3715:3:2"},"nodeType":"YulFunctionCall","src":"3715:19:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3707:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3490:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3504:4:2","type":""}],"src":"3339:401:2"},{"body":{"nodeType":"YulBlock","src":"3919:226:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3936:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3947:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3929:6:2"},"nodeType":"YulFunctionCall","src":"3929:21:2"},"nodeType":"YulExpressionStatement","src":"3929:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3970:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3981:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3966:3:2"},"nodeType":"YulFunctionCall","src":"3966:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"3986:2:2","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3959:6:2"},"nodeType":"YulFunctionCall","src":"3959:30:2"},"nodeType":"YulExpressionStatement","src":"3959:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4009:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"4020:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4005:3:2"},"nodeType":"YulFunctionCall","src":"4005:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"4025:34:2","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3998:6:2"},"nodeType":"YulFunctionCall","src":"3998:62:2"},"nodeType":"YulExpressionStatement","src":"3998:62:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4080:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"4091:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4076:3:2"},"nodeType":"YulFunctionCall","src":"4076:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"4096:6:2","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4069:6:2"},"nodeType":"YulFunctionCall","src":"4069:34:2"},"nodeType":"YulExpressionStatement","src":"4069:34:2"},{"nodeType":"YulAssignment","src":"4112:27:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4124:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"4135:3:2","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4120:3:2"},"nodeType":"YulFunctionCall","src":"4120:19:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4112:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3896:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3910:4:2","type":""}],"src":"3745:400:2"},{"body":{"nodeType":"YulBlock","src":"4251:76:2","statements":[{"nodeType":"YulAssignment","src":"4261:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4273:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"4284:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4269:3:2"},"nodeType":"YulFunctionCall","src":"4269:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4261:4:2"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4303:9:2"},{"name":"value0","nodeType":"YulIdentifier","src":"4314:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4296:6:2"},"nodeType":"YulFunctionCall","src":"4296:25:2"},"nodeType":"YulExpressionStatement","src":"4296:25:2"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4220:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4231:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4242:4:2","type":""}],"src":"4150:177:2"},{"body":{"nodeType":"YulBlock","src":"4429:87:2","statements":[{"nodeType":"YulAssignment","src":"4439:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4451:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"4462:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4447:3:2"},"nodeType":"YulFunctionCall","src":"4447:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4439:4:2"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4481:9:2"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4496:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"4504:4:2","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4492:3:2"},"nodeType":"YulFunctionCall","src":"4492:17:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4474:6:2"},"nodeType":"YulFunctionCall","src":"4474:36:2"},"nodeType":"YulExpressionStatement","src":"4474:36:2"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4398:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4409:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4420:4:2","type":""}],"src":"4332:184:2"}]},"contents":"{\n    { }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := tail\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), tail)\n        }\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"SafeMath: addition overflow\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n}","id":2,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610177578063a9059cbb1461018a578063dd62ed3e1461019d576100c9565b8063395093511461014957806370a082311461015c57806395d89b411461016f576100c9565b806318160ddd116100b257806318160ddd1461010c57806323b872dd14610121578063313ce56714610134576100c9565b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d66101b0565b6040516100e3919061090e565b60405180910390f35b6100ff6100fa3660046108da565b610264565b6040516100e39190610903565b610114610281565b6040516100e39190610b2a565b6100ff61012f36600461089f565b610287565b61013c610328565b6040516100e39190610b33565b6100ff6101573660046108da565b610331565b61011461016a366004610853565b61038c565b6100d66103b8565b6100ff6101853660046108da565b610437565b6100ff6101983660046108da565b6104ac565b6101146101ab36600461086d565b6104c0565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561025a5780601f1061022f5761010080835404028352916020019161025a565b820191906000526020600020905b81548152906001019060200180831161023d57829003601f168201915b5050505050905090565b60006102786102716104f8565b84846104fc565b50600192915050565b60025490565b6000610294848484610614565b61031e846102a06104f8565b61031985604051806060016040528060288152602001610b686028913973ffffffffffffffffffffffffffffffffffffffff8a166000908152600160205260408120906102eb6104f8565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002054919061079e565b6104fc565b5060019392505050565b60055460ff1690565b600061027861033e6104f8565b84610319856001600061034f6104f8565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918c1681529252902054906107e4565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081905260409020545b919050565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561025a5780601f1061022f5761010080835404028352916020019161025a565b60006102786104446104f8565b8461031985604051806060016040528060258152602001610b90602591396001600061046e6104f8565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918d1681529252902054919061079e565b60006102786104b96104f8565b8484610614565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b3390565b73ffffffffffffffffffffffffffffffffffffffff8316610552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054990610acd565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821661059f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610549906109dc565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610607908590610b2a565b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316610661576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054990610a70565b73ffffffffffffffffffffffffffffffffffffffff82166106ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105499061097f565b6106b983838361082a565b61070381604051806060016040528060268152602001610b426026913973ffffffffffffffffffffffffffffffffffffffff8616600090815260208190526040902054919061079e565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208190526040808220939093559084168152205461073f90826107e4565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526020819052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610607908590610b2a565b600081848411156107dc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610549919061090e565b505050900390565b600082820183811015610823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054990610a39565b9392505050565b505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146103b357600080fd5b600060208284031215610864578081fd5b6108238261082f565b6000806040838503121561087f578081fd5b6108888361082f565b91506108966020840161082f565b90509250929050565b6000806000606084860312156108b3578081fd5b6108bc8461082f565b92506108ca6020850161082f565b9150604084013590509250925092565b600080604083850312156108ec578182fd5b6108f58361082f565b946020939093013593505050565b901515815260200190565b6000602080835283518082850152825b8181101561093a5785810183015185820160400152820161091e565b8181111561094b5783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201527f6573730000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460408201527f7265737300000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b60ff9190911681526020019056fe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122080586f44bd9b217dba525bd791ca0d56f7b3edcb88a650a5df8b896e929588e764736f6c63430007050033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x19D JUMPI PUSH2 0xC9 JUMP JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x149 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x15C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x16F JUMPI PUSH2 0xC9 JUMP JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x134 JUMPI PUSH2 0xC9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0x1B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x90E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFF PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0x8DA JUMP JUMPDEST PUSH2 0x264 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x903 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x281 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0xB2A JUMP JUMPDEST PUSH2 0xFF PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0x89F JUMP JUMPDEST PUSH2 0x287 JUMP JUMPDEST PUSH2 0x13C PUSH2 0x328 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0xB33 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x157 CALLDATASIZE PUSH1 0x4 PUSH2 0x8DA JUMP JUMPDEST PUSH2 0x331 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x16A CALLDATASIZE PUSH1 0x4 PUSH2 0x853 JUMP JUMPDEST PUSH2 0x38C JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x3B8 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x185 CALLDATASIZE PUSH1 0x4 PUSH2 0x8DA JUMP JUMPDEST PUSH2 0x437 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x198 CALLDATASIZE PUSH1 0x4 PUSH2 0x8DA JUMP JUMPDEST PUSH2 0x4AC JUMP JUMPDEST PUSH2 0x114 PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0x86D JUMP JUMPDEST PUSH2 0x4C0 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x25A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x22F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x25A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x23D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x278 PUSH2 0x271 PUSH2 0x4F8 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x4FC JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x294 DUP5 DUP5 DUP5 PUSH2 0x614 JUMP JUMPDEST PUSH2 0x31E DUP5 PUSH2 0x2A0 PUSH2 0x4F8 JUMP JUMPDEST PUSH2 0x319 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB68 PUSH1 0x28 SWAP2 CODECOPY PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x2EB PUSH2 0x4F8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x79E JUMP JUMPDEST PUSH2 0x4FC JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x278 PUSH2 0x33E PUSH2 0x4F8 JUMP JUMPDEST DUP5 PUSH2 0x319 DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0x34F PUSH2 0x4F8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP13 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 PUSH2 0x7E4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x25A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x22F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x25A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x278 PUSH2 0x444 PUSH2 0x4F8 JUMP JUMPDEST DUP5 PUSH2 0x319 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB90 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x46E PUSH2 0x4F8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP14 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x79E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x278 PUSH2 0x4B9 PUSH2 0x4F8 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x614 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x552 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x549 SWAP1 PUSH2 0xACD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x59F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x549 SWAP1 PUSH2 0x9DC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x607 SWAP1 DUP6 SWAP1 PUSH2 0xB2A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x661 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x549 SWAP1 PUSH2 0xA70 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x6AE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x549 SWAP1 PUSH2 0x97F JUMP JUMPDEST PUSH2 0x6B9 DUP4 DUP4 DUP4 PUSH2 0x82A JUMP JUMPDEST PUSH2 0x703 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB42 PUSH1 0x26 SWAP2 CODECOPY PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x79E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x73F SWAP1 DUP3 PUSH2 0x7E4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x607 SWAP1 DUP6 SWAP1 PUSH2 0xB2A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x7DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x549 SWAP2 SWAP1 PUSH2 0x90E JUMP JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x823 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x549 SWAP1 PUSH2 0xA39 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x864 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x823 DUP3 PUSH2 0x82F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x87F JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x888 DUP4 PUSH2 0x82F JUMP JUMPDEST SWAP2 POP PUSH2 0x896 PUSH1 0x20 DUP5 ADD PUSH2 0x82F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8B3 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8BC DUP5 PUSH2 0x82F JUMP JUMPDEST SWAP3 POP PUSH2 0x8CA PUSH1 0x20 DUP6 ADD PUSH2 0x82F JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8EC JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8F5 DUP4 PUSH2 0x82F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x93A JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x91E JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x94B JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x2062616C616E636545524332303A207472616E73 PUSH7 0x657220616D6F75 PUSH15 0x74206578636565647320616C6C6F77 PUSH2 0x6E63 PUSH6 0x45524332303A KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x73582212208058 PUSH16 0x44BD9B217DBA525BD791CA0D56F7B3ED 0xCB DUP9 0xA6 POP 0xA5 0xDF DUP12 DUP10 PUSH15 0x929588E764736F6C63430007050033 ","sourceMap":"14658:9047:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15472:75;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;17388:156;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;16451:92::-;;;:::i;:::-;;;;;;;:::i;17978:343::-;;;;;;:::i;:::-;;:::i;16324:75::-;;;:::i;:::-;;;;;;;:::i;18690:205::-;;;;;;:::i;:::-;;:::i;16593:111::-;;;;;;:::i;:::-;;:::i;15650:79::-;;;:::i;19352:318::-;;;;;;:::i;:::-;;:::i;16889:162::-;;;;;;:::i;:::-;;:::i;17101:165::-;;;;;;:::i;:::-;;:::i;15472:75::-;15537:5;15530:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15509:13;;15530:12;;15537:5;;15530:12;;15537:5;15530:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15472:75;:::o;17388:156::-;17471:4;17483:39;17492:12;:10;:12::i;:::-;17506:7;17515:6;17483:8;:39::i;:::-;-1:-1:-1;17535:4:0;17388:156;;;;:::o;16451:92::-;16526:12;;16451:92;:::o;17978:343::-;18100:4;18112:36;18122:6;18130:9;18141:6;18112:9;:36::i;:::-;18154:145;18170:6;18184:12;:10;:12::i;:::-;18204:89;18242:6;18204:89;;;;;;;;;;;;;;;;;:19;;;;;;;:11;:19;;;;;;18224:12;:10;:12::i;:::-;18204:33;;;;;;;;;;;;;-1:-1:-1;18204:33:0;;;:89;:37;:89::i;:::-;18154:8;:145::i;:::-;-1:-1:-1;18312:4:0;17978:343;;;;;:::o;16324:75::-;16385:9;;;;16324:75;:::o;18690:205::-;18778:4;18790:83;18799:12;:10;:12::i;:::-;18813:7;18822:50;18861:10;18822:11;:25;18834:12;:10;:12::i;:::-;18822:25;;;;;;;;;;;;;;;;;;-1:-1:-1;18822:25:0;;;:34;;;;;;;;;;;:38;:50::i;16593:111::-;16681:18;;;16659:7;16681:18;;;;;;;;;;;16593:111;;;;:::o;15650:79::-;15717:7;15710:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15689:13;;15710:14;;15717:7;;15710:14;;15717:7;15710:14;;;;;;;;;;;;;;;;;;;;;;;;19352:318;19457:4;19471:177;19487:12;:10;:12::i;:::-;19507:7;19522:120;19570:15;19522:120;;;;;;;;;;;;;;;;;:11;:25;19534:12;:10;:12::i;:::-;19522:25;;;;;;;;;;;;;;;;;;-1:-1:-1;19522:25:0;;;:34;;;;;;;;;;;:120;:38;:120::i;16889:162::-;16975:4;16987:42;16997:12;:10;:12::i;:::-;17011:9;17022:6;16987:9;:42::i;17101:165::-;17234:18;;;;17210:7;17234:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;17101:165::o;3071:98::-;3154:10;3071:98;:::o;22312:338::-;22425:19;;;22417:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;22499:21;;;22491:68;;;;;;;;;;;;:::i;:::-;22566:18;;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;;:36;;;22613:32;;;;;22596:6;;22613:32;:::i;:::-;;;;;;;;22312:338;;;:::o;20114:520::-;20231:20;;;20223:70;;;;;;;;;;;;:::i;:::-;20307:23;;;20299:71;;;;;;;;;;;;:::i;:::-;20377:47;20398:6;20406:9;20417:6;20377:20;:47::i;:::-;20451:71;20473:6;20451:71;;;;;;;;;;;;;;;;;:17;;;:9;:17;;;;;;;;;;;;:71;:21;:71::i;:::-;20431:17;;;;:9;:17;;;;;;;;;;;:91;;;;20551:20;;;;;;;:32;;20576:6;20551:24;:32::i;:::-;20528:20;;;;:9;:20;;;;;;;;;;;;:55;;;;20594:35;;;;;;;;;;20622:6;;20594:35;:::i;7643:189::-;7745:7;7776:12;7768:6;;;;7760:29;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;7807:5:0;;;7643:189::o;6845:162::-;6903:7;6930:5;;;6949:6;;;;6941:46;;;;;;;;;;;;:::i;:::-;7001:1;6845:162;-1:-1:-1;;;6845:162:0:o;23596:107::-;;;;:::o;14:198:2:-;84:20;;144:42;133:54;;123:65;;113:2;;202:1;199;192:12;217:198;;329:2;317:9;308:7;304:23;300:32;297:2;;;350:6;342;335:22;297:2;378:31;399:9;378:31;:::i;420:274::-;;;549:2;537:9;528:7;524:23;520:32;517:2;;;570:6;562;555:22;517:2;598:31;619:9;598:31;:::i;:::-;588:41;;648:40;684:2;673:9;669:18;648:40;:::i;:::-;638:50;;507:187;;;;;:::o;699:342::-;;;;845:2;833:9;824:7;820:23;816:32;813:2;;;866:6;858;851:22;813:2;894:31;915:9;894:31;:::i;:::-;884:41;;944:40;980:2;969:9;965:18;944:40;:::i;:::-;934:50;;1031:2;1020:9;1016:18;1003:32;993:42;;803:238;;;;;:::o;1046:266::-;;;1175:2;1163:9;1154:7;1150:23;1146:32;1143:2;;;1196:6;1188;1181:22;1143:2;1224:31;1245:9;1224:31;:::i;:::-;1214:41;1302:2;1287:18;;;;1274:32;;-1:-1:-1;;;1133:179:2:o;1317:187::-;1482:14;;1475:22;1457:41;;1445:2;1430:18;;1412:92::o;1509:662::-;;1650:2;1679;1668:9;1661:21;1711:6;1705:13;1754:6;1749:2;1738:9;1734:18;1727:34;1779:4;1792:140;1806:6;1803:1;1800:13;1792:140;;;1901:14;;;1897:23;;1891:30;1867:17;;;1886:2;1863:26;1856:66;1821:10;;1792:140;;;1950:6;1947:1;1944:13;1941:2;;;2020:4;2015:2;2006:6;1995:9;1991:22;1987:31;1980:45;1941:2;-1:-1:-1;2087:2:2;2075:15;2092:66;2071:88;2056:104;;;;2162:2;2052:113;;1630:541;-1:-1:-1;;;1630:541:2:o;2176:399::-;2378:2;2360:21;;;2417:2;2397:18;;;2390:30;2456:34;2451:2;2436:18;;2429:62;2527:5;2522:2;2507:18;;2500:33;2565:3;2550:19;;2350:225::o;2580:398::-;2782:2;2764:21;;;2821:2;2801:18;;;2794:30;2860:34;2855:2;2840:18;;2833:62;2931:4;2926:2;2911:18;;2904:32;2968:3;2953:19;;2754:224::o;2983:351::-;3185:2;3167:21;;;3224:2;3204:18;;;3197:30;3263:29;3258:2;3243:18;;3236:57;3325:2;3310:18;;3157:177::o;3339:401::-;3541:2;3523:21;;;3580:2;3560:18;;;3553:30;3619:34;3614:2;3599:18;;3592:62;3690:7;3685:2;3670:18;;3663:35;3730:3;3715:19;;3513:227::o;3745:400::-;3947:2;3929:21;;;3986:2;3966:18;;;3959:30;4025:34;4020:2;4005:18;;3998:62;4096:6;4091:2;4076:18;;4069:34;4135:3;4120:19;;3919:226::o;4150:177::-;4296:25;;;4284:2;4269:18;;4251:76::o;4332:184::-;4504:4;4492:17;;;;4474:36;;4462:2;4447:18;;4429:87::o"},"gasEstimates":{"creation":{"codeDepositCost":"610000","executionCost":"infinite","totalCost":"infinite"},"external":{"allowance(address,address)":"infinite","approve(address,uint256)":"22581","balanceOf(address)":"infinite","decimals()":"1113","decreaseAllowance(address,uint256)":"infinite","increaseAllowance(address,uint256)":"infinite","name()":"infinite","symbol()":"infinite","totalSupply()":"1051","transfer(address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"},"internal":{"_approve(address,address,uint256)":"infinite","_beforeTokenTransfer(address,address,uint256)":"15","_burn(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_setupDecimals(uint8)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}, initializes {decimals} with a default value of 18. To select a different value for {decimals}, use {_setupDecimals}. All three of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":\"ERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-12-10\\n */\\n\\n// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGovernancePowerDelegationToken {\\n  enum DelegationType {VOTING_POWER, PROPOSITION_POWER}\\n\\n  /**\\n   * @dev emitted when a user delegates to another\\n   * @param delegator the delegator\\n   * @param delegatee the delegatee\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    DelegationType delegationType\\n  );\\n\\n  /**\\n   * @dev emitted when an action changes the delegated power of a user\\n   * @param user the user which delegated power has changed\\n   * @param amount the amount of delegated power for the user\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external virtual;\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (address);\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view virtual returns (uint256);\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view virtual returns (uint256);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string internal _name;\\n  string internal _symbol;\\n  uint8 private _decimals;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n   * a default value of 18.\\n   *\\n   * To select a different value for {decimals}, use {_setupDecimals}.\\n   *\\n   * All three of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name, string memory symbol) public {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = 18;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        'ERC20: decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n   *\\n   * This is internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Sets {decimals} to a value other than the default one of 18.\\n   *\\n   * WARNING: This function should only be called from the constructor. Most\\n   * applications that interact with token contracts will not expect\\n   * {decimals} to ever change, and may work incorrectly if it does.\\n   */\\n  function _setupDecimals(uint8 decimals_) internal {\\n    _decimals = decimals_;\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be to transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\\ninterface IStakedAave {\\n  function stake(address to, uint256 amount) external;\\n\\n  function redeem(address to, uint256 amount) external;\\n\\n  function cooldown() external;\\n\\n  function claimRewards(address to, uint256 amount) external;\\n}\\n\\ninterface ITransferHook {\\n  function onTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint128 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\\ninterface IAaveDistributionManager {\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external;\\n}\\n\\n/**\\n * @title AaveDistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract AaveDistributionManager is IAaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  struct AssetData {\\n    uint128 emissionPerSecond;\\n    uint128 lastUpdateTimestamp;\\n    uint256 index;\\n    mapping(address => uint256) users;\\n  }\\n\\n  uint256 public immutable DISTRIBUTION_END;\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n\\n  constructor(address emissionManager, uint256 distributionDuration) public {\\n    DISTRIBUTION_END = block.timestamp.add(distributionDuration);\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /**\\n   * @dev Configures the distribution of rewards for a list of assets\\n   * @param assetsConfigInput The list of configurations to apply\\n   **/\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external\\n    override\\n  {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address underlyingAsset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex =\\n      _getAssetIndex(oldIndex, assetConfig.emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n    if (newIndex != oldIndex) {\\n      assetConfig.index = newIndex;\\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\\n    }\\n\\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards = accruedRewards.add(\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        )\\n      );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex =\\n        _getAssetIndex(\\n          assetConfig.index,\\n          assetConfig.emissionPerSecond,\\n          assetConfig.lastUpdateTimestamp,\\n          stakes[i].totalStaked\\n        );\\n\\n      accruedRewards = accruedRewards.add(\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\\n      );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= DISTRIBUTION_END\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp =\\n      block.timestamp > DISTRIBUTION_END ? DISTRIBUTION_END : block.timestamp;\\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\\n    return\\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\\n        currentIndex\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n}\\n\\n/**\\n * @notice implementation of the AAVE token contract\\n * @author Aave\\n */\\nabstract contract GovernancePowerDelegationERC20 is ERC20, IGovernancePowerDelegationToken {\\n  using SafeMath for uint256;\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH =\\n    keccak256('DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)');\\n\\n  bytes32 public constant DELEGATE_TYPEHASH =\\n    keccak256('Delegate(address delegatee,uint256 nonce,uint256 expiry)');\\n\\n  /// @dev snapshot of a value on a specific block, used for votes\\n  struct Snapshot {\\n    uint128 blockNumber;\\n    uint128 value;\\n  }\\n\\n  /**\\n   * @dev delegates one specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external override {\\n    _delegateByType(msg.sender, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external override {\\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    return _getDelegatee(delegator, delegates);\\n  }\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\\n  }\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view override returns (uint256) {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\\n  }\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   * used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\\n   * In this initial implementation with no AAVE minting, simply returns the current supply\\n   * A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view override returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _delegateByType(\\n    address delegator,\\n    address delegatee,\\n    DelegationType delegationType\\n  ) internal {\\n    require(delegatee != address(0), 'INVALID_DELEGATEE');\\n\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    uint256 delegatorBalance = balanceOf(delegator);\\n\\n    address previousDelegatee = _getDelegatee(delegator, delegates);\\n\\n    delegates[delegator] = delegatee;\\n\\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\\n    emit DelegateChanged(delegator, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev moves delegated power from one user to another\\n   * @param from the user from which delegated power is moved\\n   * @param to the user that will receive the delegated power\\n   * @param amount the amount of delegated power to be moved\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _moveDelegatesByType(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    DelegationType delegationType\\n  ) internal {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    if (from != address(0)) {\\n      uint256 previous = 0;\\n      uint256 fromSnapshotsCount = snapshotsCounts[from];\\n\\n      if (fromSnapshotsCount != 0) {\\n        previous = snapshots[from][fromSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(from);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        from,\\n        uint128(previous),\\n        uint128(previous.sub(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(from, previous.sub(amount), delegationType);\\n    }\\n    if (to != address(0)) {\\n      uint256 previous = 0;\\n      uint256 toSnapshotsCount = snapshotsCounts[to];\\n      if (toSnapshotsCount != 0) {\\n        previous = snapshots[to][toSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(to);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        to,\\n        uint128(previous),\\n        uint128(previous.add(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(to, previous.add(amount), delegationType);\\n    }\\n  }\\n\\n  /**\\n   * @dev searches a snapshot by block number. Uses binary search.\\n   * @param snapshots the snapshots mapping\\n   * @param snapshotsCounts the number of snapshots\\n   * @param user the user for which the snapshot is being searched\\n   * @param blockNumber the block number being searched\\n   **/\\n  function _searchByBlockNumber(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address user,\\n    uint256 blockNumber\\n  ) internal view returns (uint256) {\\n    require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\\n\\n    uint256 snapshotsCount = snapshotsCounts[user];\\n\\n    if (snapshotsCount == 0) {\\n      return balanceOf(user);\\n    }\\n\\n    // First check most recent balance\\n    if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\\n      return snapshots[user][snapshotsCount - 1].value;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (snapshots[user][0].blockNumber > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint256 lower = 0;\\n    uint256 upper = snapshotsCount - 1;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Snapshot memory snapshot = snapshots[user][center];\\n      if (snapshot.blockNumber == blockNumber) {\\n        return snapshot.value;\\n      } else if (snapshot.blockNumber < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return snapshots[user][lower].value;\\n  }\\n\\n  /**\\n   * @dev returns the delegation data (snapshot, snapshotsCount, list of delegates) by delegation type\\n   * NOTE: Ideal implementation would have mapped this in a struct by delegation type. Unfortunately,\\n   * the AAVE token and StakeToken already include a mapping for the snapshots, so we require contracts\\n   * who inherit from this to provide access to the delegation data by overriding this method.\\n   * @param delegationType the type of delegation\\n   **/\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    virtual\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    );\\n\\n  /**\\n   * @dev Writes a snapshot for an owner of tokens\\n   * @param owner The owner of the tokens\\n   * @param oldValue The value before the operation that is gonna be executed after the snapshot\\n   * @param newValue The value after the operation\\n   */\\n  function _writeSnapshot(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address owner,\\n    uint128 oldValue,\\n    uint128 newValue\\n  ) internal {\\n    uint128 currentBlock = uint128(block.number);\\n\\n    uint256 ownerSnapshotsCount = snapshotsCounts[owner];\\n    mapping(uint256 => Snapshot) storage snapshotsOwner = snapshots[owner];\\n\\n    // Doing multiple operations in the same block\\n    if (\\n      ownerSnapshotsCount != 0 &&\\n      snapshotsOwner[ownerSnapshotsCount - 1].blockNumber == currentBlock\\n    ) {\\n      snapshotsOwner[ownerSnapshotsCount - 1].value = newValue;\\n    } else {\\n      snapshotsOwner[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\\n      snapshotsCounts[owner] = ownerSnapshotsCount + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the user delegatee. If a user never performed any delegation,\\n   * his delegated address will be 0x0. In that case we simply return the user itself\\n   * @param delegator the address of the user for which return the delegatee\\n   * @param delegates the array of delegates for a particular type of delegation\\n   **/\\n  function _getDelegatee(address delegator, mapping(address => address) storage delegates)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address previousDelegatee = delegates[delegator];\\n\\n    if (previousDelegatee == address(0)) {\\n      return delegator;\\n    }\\n\\n    return previousDelegatee;\\n  }\\n}\\n\\n/**\\n * @title ERC20WithSnapshot\\n * @notice ERC20 including snapshots of balances on transfer-related actions\\n * @author Aave\\n **/\\nabstract contract GovernancePowerWithSnapshot is GovernancePowerDelegationERC20 {\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @dev The following storage layout points to the prior StakedToken.sol implementation:\\n   * _snapshots => _votingSnapshots\\n   * _snapshotsCounts =>  _votingSnapshotsCounts\\n   * _aaveGovernance => _aaveGovernance\\n   */\\n  mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\\n  mapping(address => uint256) public _votingSnapshotsCounts;\\n\\n  /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\\n  /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\\n  /// to control all potential reentrancies by calling back the this contract\\n  ITransferHook public _aaveGovernance;\\n\\n  function _setAaveGovernance(ITransferHook aaveGovernance) internal virtual {\\n    _aaveGovernance = aaveGovernance;\\n  }\\n}\\n\\n/**\\n * @title StakedToken\\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\\n * @author Aave\\n **/\\ncontract StakedTokenV2Rev3 is\\n  IStakedAave,\\n  GovernancePowerWithSnapshot,\\n  VersionedInitializable,\\n  AaveDistributionManager\\n{\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev Start of Storage layout from StakedToken v1\\n  uint256 public constant REVISION = 3;\\n\\n  IERC20 public immutable STAKED_TOKEN;\\n  IERC20 public immutable REWARD_TOKEN;\\n  uint256 public immutable COOLDOWN_SECONDS;\\n\\n  /// @notice Seconds available to redeem once the cooldown period is fullfilled\\n  uint256 public immutable UNSTAKE_WINDOW;\\n\\n  /// @notice Address to pull from the rewards, needs to have approved this contract\\n  address public immutable REWARDS_VAULT;\\n\\n  mapping(address => uint256) public stakerRewardsToClaim;\\n  mapping(address => uint256) public stakersCooldowns;\\n\\n  /// @dev End of Storage layout from StakedToken v1\\n\\n  /// @dev To see the voting mappings, go to GovernancePowerWithSnapshot.sol\\n  mapping(address => address) internal _votingDelegates;\\n\\n  mapping(address => mapping(uint256 => Snapshot)) internal _propositionPowerSnapshots;\\n  mapping(address => uint256) internal _propositionPowerSnapshotsCounts;\\n  mapping(address => address) internal _propositionPowerDelegates;\\n\\n  bytes32 public DOMAIN_SEPARATOR;\\n  bytes public constant EIP712_REVISION = bytes('1');\\n  bytes32 internal constant EIP712_DOMAIN =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  /// @dev owner => next valid nonce to submit with permit()\\n  mapping(address => uint256) public _nonces;\\n\\n  event Staked(address indexed from, address indexed onBehalfOf, uint256 amount);\\n  event Redeem(address indexed from, address indexed to, uint256 amount);\\n\\n  event RewardsAccrued(address user, uint256 amount);\\n  event RewardsClaimed(address indexed from, address indexed to, uint256 amount);\\n\\n  event Cooldown(address indexed user);\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals,\\n    address governance\\n  ) public ERC20(name, symbol) AaveDistributionManager(emissionManager, distributionDuration) {\\n    STAKED_TOKEN = stakedToken;\\n    REWARD_TOKEN = rewardToken;\\n    COOLDOWN_SECONDS = cooldownSeconds;\\n    UNSTAKE_WINDOW = unstakeWindow;\\n    REWARDS_VAULT = rewardsVault;\\n    _aaveGovernance = ITransferHook(governance);\\n    ERC20._setupDecimals(decimals);\\n  }\\n\\n  /**\\n   * @dev Called by the proxy contract\\n   **/\\n  function initialize() external initializer {\\n    uint256 chainId;\\n\\n    //solium-disable-next-line\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN,\\n        keccak256(bytes(name())),\\n        keccak256(EIP712_REVISION),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n\\n    // Update lastUpdateTimestamp of stkAave to reward users since the end of the prior staking period\\n    AssetData storage assetData = assets[address(this)];\\n    assetData.lastUpdateTimestamp = 1620594720;\\n  }\\n\\n  function stake(address onBehalfOf, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    uint256 balanceOfUser = balanceOf(onBehalfOf);\\n\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(onBehalfOf, address(this), balanceOfUser, totalSupply());\\n    if (accruedRewards != 0) {\\n      emit RewardsAccrued(onBehalfOf, accruedRewards);\\n      stakerRewardsToClaim[onBehalfOf] = stakerRewardsToClaim[onBehalfOf].add(accruedRewards);\\n    }\\n\\n    stakersCooldowns[onBehalfOf] = getNextCooldownTimestamp(0, amount, onBehalfOf, balanceOfUser);\\n\\n    _mint(onBehalfOf, amount);\\n    IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit Staked(msg.sender, onBehalfOf, amount);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens, and stop earning rewards\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   **/\\n  function redeem(address to, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    //solium-disable-next-line\\n    uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\\n    require(\\n      block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\\n      'INSUFFICIENT_COOLDOWN'\\n    );\\n    require(\\n      block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n      'UNSTAKE_WINDOW_FINISHED'\\n    );\\n    uint256 balanceOfMessageSender = balanceOf(msg.sender);\\n\\n    uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\\n\\n    _updateCurrentUnclaimedRewards(msg.sender, balanceOfMessageSender, true);\\n\\n    _burn(msg.sender, amountToRedeem);\\n\\n    if (balanceOfMessageSender.sub(amountToRedeem) == 0) {\\n      stakersCooldowns[msg.sender] = 0;\\n    }\\n\\n    IERC20(STAKED_TOKEN).safeTransfer(to, amountToRedeem);\\n\\n    emit Redeem(msg.sender, to, amountToRedeem);\\n  }\\n\\n  /**\\n   * @dev Activates the cooldown period to unstake\\n   * - It can't be called if the user is not staking\\n   **/\\n  function cooldown() external override {\\n    require(balanceOf(msg.sender) != 0, 'INVALID_BALANCE_ON_COOLDOWN');\\n    //solium-disable-next-line\\n    stakersCooldowns[msg.sender] = block.timestamp;\\n\\n    emit Cooldown(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\\n   * @param to Address to stake for\\n   * @param amount Amount to stake\\n   **/\\n  function claimRewards(address to, uint256 amount) external override {\\n    uint256 newTotalRewards =\\n      _updateCurrentUnclaimedRewards(msg.sender, balanceOf(msg.sender), false);\\n    uint256 amountToClaim = (amount == type(uint256).max) ? newTotalRewards : amount;\\n\\n    stakerRewardsToClaim[msg.sender] = newTotalRewards.sub(amountToClaim, 'INVALID_AMOUNT');\\n\\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\\n\\n    emit RewardsClaimed(msg.sender, to, amountToClaim);\\n  }\\n\\n  /**\\n   * @dev Internal ERC20 _transfer of the tokenized staked tokens\\n   * @param from Address to transfer from\\n   * @param to Address to transfer to\\n   * @param amount Amount to transfer\\n   **/\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    uint256 balanceOfFrom = balanceOf(from);\\n    // Sender\\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\\n\\n    // Recipient\\n    if (from != to) {\\n      uint256 balanceOfTo = balanceOf(to);\\n      _updateCurrentUnclaimedRewards(to, balanceOfTo, true);\\n\\n      uint256 previousSenderCooldown = stakersCooldowns[from];\\n      stakersCooldowns[to] = getNextCooldownTimestamp(\\n        previousSenderCooldown,\\n        amount,\\n        to,\\n        balanceOfTo\\n      );\\n      // if cooldown was set and whole balance of sender was transferred - clear cooldown\\n      if (balanceOfFrom == amount && previousSenderCooldown != 0) {\\n        stakersCooldowns[from] = 0;\\n      }\\n    }\\n\\n    super._transfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Updates the user state related with his accrued rewards\\n   * @param user Address of the user\\n   * @param userBalance The current balance of the user\\n   * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\\n   * @return The unclaimed rewards that were added to the total accrued\\n   **/\\n  function _updateCurrentUnclaimedRewards(\\n    address user,\\n    uint256 userBalance,\\n    bool updateStorage\\n  ) internal returns (uint256) {\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(user, address(this), userBalance, totalSupply());\\n    uint256 unclaimedRewards = stakerRewardsToClaim[user].add(accruedRewards);\\n\\n    if (accruedRewards != 0) {\\n      if (updateStorage) {\\n        stakerRewardsToClaim[user] = unclaimedRewards;\\n      }\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n\\n    return unclaimedRewards;\\n  }\\n\\n  /**\\n   * @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\\n   *  - If the timestamp of the sender is \\\"better\\\" or the timestamp of the recipient is 0, we take the one of the recipient\\n   *  - Weighted average of from/to cooldown timestamps if:\\n   *    # The sender doesn't have the cooldown activated (timestamp 0).\\n   *    # The sender timestamp is expired\\n   *    # The sender has a \\\"worse\\\" timestamp\\n   *  - If the receiver's cooldown timestamp expired (too old), the next is 0\\n   * @param fromCooldownTimestamp Cooldown timestamp of the sender\\n   * @param amountToReceive Amount\\n   * @param toAddress Address of the recipient\\n   * @param toBalance Current balance of the receiver\\n   * @return The new cooldown timestamp\\n   **/\\n  function getNextCooldownTimestamp(\\n    uint256 fromCooldownTimestamp,\\n    uint256 amountToReceive,\\n    address toAddress,\\n    uint256 toBalance\\n  ) public view returns (uint256) {\\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\\n    if (toCooldownTimestamp == 0) {\\n      return 0;\\n    }\\n\\n    uint256 minimalValidCooldownTimestamp =\\n      block.timestamp.sub(COOLDOWN_SECONDS).sub(UNSTAKE_WINDOW);\\n\\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\\n      toCooldownTimestamp = 0;\\n    } else {\\n      uint256 fromCooldownTimestamp =\\n        (minimalValidCooldownTimestamp > fromCooldownTimestamp)\\n          ? block.timestamp\\n          : fromCooldownTimestamp;\\n\\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\\n        return toCooldownTimestamp;\\n      } else {\\n        toCooldownTimestamp = (\\n          amountToReceive.mul(fromCooldownTimestamp).add(toBalance.mul(toCooldownTimestamp))\\n        )\\n          .div(amountToReceive.add(toBalance));\\n      }\\n    }\\n    return toCooldownTimestamp;\\n  }\\n\\n  /**\\n   * @dev Return the total rewards pending to claim by an staker\\n   * @param staker The staker address\\n   * @return The rewards\\n   */\\n  function getTotalRewardsBalance(address staker) external view returns (uint256) {\\n    DistributionTypes.UserStakeInput[] memory userStakeInputs =\\n      new DistributionTypes.UserStakeInput[](1);\\n    userStakeInputs[0] = DistributionTypes.UserStakeInput({\\n      underlyingAsset: address(this),\\n      stakedByUser: balanceOf(staker),\\n      totalStaked: totalSupply()\\n    });\\n    return stakerRewardsToClaim[staker].add(_getUnclaimedRewards(staker, userStakeInputs));\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   * @return The revision\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner the owner of the funds\\n   * @param spender the spender\\n   * @param value the amount\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(owner != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    uint256 currentValidNonce = _nonces[owner];\\n    bytes32 digest =\\n      keccak256(\\n        abi.encodePacked(\\n          '\\\\x19\\\\x01',\\n          DOMAIN_SEPARATOR,\\n          keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n        )\\n      );\\n\\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _nonces[owner] = currentValidNonce.add(1);\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\\n   * - On _transfer, it writes snapshots for both \\\"from\\\" and \\\"to\\\"\\n   * - On _mint, only for _to\\n   * - On _burn, only for _from\\n   * @param from the from address\\n   * @param to the to address\\n   * @param amount the amount to transfer\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    address votingFromDelegatee = _votingDelegates[from];\\n    address votingToDelegatee = _votingDelegates[to];\\n\\n    if (votingFromDelegatee == address(0)) {\\n      votingFromDelegatee = from;\\n    }\\n    if (votingToDelegatee == address(0)) {\\n      votingToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      votingFromDelegatee,\\n      votingToDelegatee,\\n      amount,\\n      DelegationType.VOTING_POWER\\n    );\\n\\n    address propPowerFromDelegatee = _propositionPowerDelegates[from];\\n    address propPowerToDelegatee = _propositionPowerDelegates[to];\\n\\n    if (propPowerFromDelegatee == address(0)) {\\n      propPowerFromDelegatee = from;\\n    }\\n    if (propPowerToDelegatee == address(0)) {\\n      propPowerToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      propPowerFromDelegatee,\\n      propPowerToDelegatee,\\n      amount,\\n      DelegationType.PROPOSITION_POWER\\n    );\\n\\n    // caching the aave governance address to avoid multiple state loads\\n    ITransferHook aaveGovernance = _aaveGovernance;\\n    if (aaveGovernance != ITransferHook(0)) {\\n      aaveGovernance.onTransfer(from, to, amount);\\n    }\\n  }\\n\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    override\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    )\\n  {\\n    if (delegationType == DelegationType.VOTING_POWER) {\\n      return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\\n    } else {\\n      return (\\n        _propositionPowerSnapshots,\\n        _propositionPowerSnapshotsCounts,\\n        _propositionPowerDelegates\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateByTypeBySig(\\n    address delegatee,\\n    DelegationType delegationType,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash =\\n      keccak256(\\n        abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\\n      );\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(signatory, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n}\\n\",\"keccak256\":\"0x193e8dd33d55c137ea32793b1f2c2f06b4b8936ee5c625e38766062c4f89fb43\",\"license\":\"agpl-3.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":447,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:ERC20","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":453,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:ERC20","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":455,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:ERC20","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":457,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:ERC20","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":459,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:ERC20","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":461,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:ERC20","label":"_decimals","offset":0,"slot":"5","type":"t_uint8"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"GovernancePowerDelegationERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"delegator","type":"address"},{"indexed":true,"internalType":"address","name":"delegatee","type":"address"},{"indexed":false,"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"DelegateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"DelegatedPowerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DELEGATE_BY_TYPE_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DELEGATE_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"}],"name":"delegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"},{"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"delegateByType","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegator","type":"address"},{"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"getDelegateeByType","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"getPowerAtBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"getPowerCurrent","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"name":"totalSupplyAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Aave","kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"delegate(address)":{"details":"delegates all the powers to a specific user","params":{"delegatee":"the user to which the power will be delegated*"}},"delegateByType(address,uint8)":{"details":"delegates one specific power to a delegatee","params":{"delegatee":"the user which delegated power has changed","delegationType":"the type of delegation (VOTING_POWER, PROPOSITION_POWER)*"}},"getDelegateeByType(address,uint8)":{"details":"returns the delegatee of an user","params":{"delegator":"the address of the delegator*"}},"getPowerAtBlock(address,uint256,uint8)":{"details":"returns the delegated power of a user at a certain block","params":{"user":"the user*"}},"getPowerCurrent(address,uint8)":{"details":"returns the current delegated power of a user. The current power is the power delegated at the time of the last snapshot","params":{"user":"the user*"}},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"totalSupplyAt(uint256)":{"details":"returns the total supply at a certain block number used by the voting strategy contracts to calculate the total votes needed for threshold/quorum In this initial implementation with no AAVE minting, simply returns the current supply A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future*"},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DELEGATE_BY_TYPE_TYPEHASH()":"aa9fbe02","DELEGATE_TYPEHASH()":"41cbf54a","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","delegate(address)":"5c19a95c","delegateByType(address,uint8)":"dc937e1c","getDelegateeByType(address,uint8)":"6f50458d","getPowerAtBlock(address,uint256,uint8)":"c2ffbb91","getPowerCurrent(address,uint8)":"b2f4201d","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","totalSupplyAt(uint256)":"981b24d0","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"DelegatedPowerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATE_BY_TYPE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"delegateByType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getDelegateeByType\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getPowerAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getPowerCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aave\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"delegate(address)\":{\"details\":\"delegates all the powers to a specific user\",\"params\":{\"delegatee\":\"the user to which the power will be delegated*\"}},\"delegateByType(address,uint8)\":{\"details\":\"delegates one specific power to a delegatee\",\"params\":{\"delegatee\":\"the user which delegated power has changed\",\"delegationType\":\"the type of delegation (VOTING_POWER, PROPOSITION_POWER)*\"}},\"getDelegateeByType(address,uint8)\":{\"details\":\"returns the delegatee of an user\",\"params\":{\"delegator\":\"the address of the delegator*\"}},\"getPowerAtBlock(address,uint256,uint8)\":{\"details\":\"returns the delegated power of a user at a certain block\",\"params\":{\"user\":\"the user*\"}},\"getPowerCurrent(address,uint8)\":{\"details\":\"returns the current delegated power of a user. The current power is the power delegated at the time of the last snapshot\",\"params\":{\"user\":\"the user*\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"totalSupplyAt(uint256)\":{\"details\":\"returns the total supply at a certain block number used by the voting strategy contracts to calculate the total votes needed for threshold/quorum In this initial implementation with no AAVE minting, simply returns the current supply A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future*\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DELEGATE_BY_TYPE_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the delegation struct used by the contract\"}},\"notice\":\"implementation of the AAVE token contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":\"GovernancePowerDelegationERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-12-10\\n */\\n\\n// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGovernancePowerDelegationToken {\\n  enum DelegationType {VOTING_POWER, PROPOSITION_POWER}\\n\\n  /**\\n   * @dev emitted when a user delegates to another\\n   * @param delegator the delegator\\n   * @param delegatee the delegatee\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    DelegationType delegationType\\n  );\\n\\n  /**\\n   * @dev emitted when an action changes the delegated power of a user\\n   * @param user the user which delegated power has changed\\n   * @param amount the amount of delegated power for the user\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external virtual;\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (address);\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view virtual returns (uint256);\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view virtual returns (uint256);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string internal _name;\\n  string internal _symbol;\\n  uint8 private _decimals;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n   * a default value of 18.\\n   *\\n   * To select a different value for {decimals}, use {_setupDecimals}.\\n   *\\n   * All three of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name, string memory symbol) public {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = 18;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        'ERC20: decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n   *\\n   * This is internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Sets {decimals} to a value other than the default one of 18.\\n   *\\n   * WARNING: This function should only be called from the constructor. Most\\n   * applications that interact with token contracts will not expect\\n   * {decimals} to ever change, and may work incorrectly if it does.\\n   */\\n  function _setupDecimals(uint8 decimals_) internal {\\n    _decimals = decimals_;\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be to transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\\ninterface IStakedAave {\\n  function stake(address to, uint256 amount) external;\\n\\n  function redeem(address to, uint256 amount) external;\\n\\n  function cooldown() external;\\n\\n  function claimRewards(address to, uint256 amount) external;\\n}\\n\\ninterface ITransferHook {\\n  function onTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint128 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\\ninterface IAaveDistributionManager {\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external;\\n}\\n\\n/**\\n * @title AaveDistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract AaveDistributionManager is IAaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  struct AssetData {\\n    uint128 emissionPerSecond;\\n    uint128 lastUpdateTimestamp;\\n    uint256 index;\\n    mapping(address => uint256) users;\\n  }\\n\\n  uint256 public immutable DISTRIBUTION_END;\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n\\n  constructor(address emissionManager, uint256 distributionDuration) public {\\n    DISTRIBUTION_END = block.timestamp.add(distributionDuration);\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /**\\n   * @dev Configures the distribution of rewards for a list of assets\\n   * @param assetsConfigInput The list of configurations to apply\\n   **/\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external\\n    override\\n  {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address underlyingAsset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex =\\n      _getAssetIndex(oldIndex, assetConfig.emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n    if (newIndex != oldIndex) {\\n      assetConfig.index = newIndex;\\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\\n    }\\n\\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards = accruedRewards.add(\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        )\\n      );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex =\\n        _getAssetIndex(\\n          assetConfig.index,\\n          assetConfig.emissionPerSecond,\\n          assetConfig.lastUpdateTimestamp,\\n          stakes[i].totalStaked\\n        );\\n\\n      accruedRewards = accruedRewards.add(\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\\n      );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= DISTRIBUTION_END\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp =\\n      block.timestamp > DISTRIBUTION_END ? DISTRIBUTION_END : block.timestamp;\\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\\n    return\\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\\n        currentIndex\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n}\\n\\n/**\\n * @notice implementation of the AAVE token contract\\n * @author Aave\\n */\\nabstract contract GovernancePowerDelegationERC20 is ERC20, IGovernancePowerDelegationToken {\\n  using SafeMath for uint256;\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH =\\n    keccak256('DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)');\\n\\n  bytes32 public constant DELEGATE_TYPEHASH =\\n    keccak256('Delegate(address delegatee,uint256 nonce,uint256 expiry)');\\n\\n  /// @dev snapshot of a value on a specific block, used for votes\\n  struct Snapshot {\\n    uint128 blockNumber;\\n    uint128 value;\\n  }\\n\\n  /**\\n   * @dev delegates one specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external override {\\n    _delegateByType(msg.sender, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external override {\\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    return _getDelegatee(delegator, delegates);\\n  }\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\\n  }\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view override returns (uint256) {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\\n  }\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   * used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\\n   * In this initial implementation with no AAVE minting, simply returns the current supply\\n   * A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view override returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _delegateByType(\\n    address delegator,\\n    address delegatee,\\n    DelegationType delegationType\\n  ) internal {\\n    require(delegatee != address(0), 'INVALID_DELEGATEE');\\n\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    uint256 delegatorBalance = balanceOf(delegator);\\n\\n    address previousDelegatee = _getDelegatee(delegator, delegates);\\n\\n    delegates[delegator] = delegatee;\\n\\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\\n    emit DelegateChanged(delegator, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev moves delegated power from one user to another\\n   * @param from the user from which delegated power is moved\\n   * @param to the user that will receive the delegated power\\n   * @param amount the amount of delegated power to be moved\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _moveDelegatesByType(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    DelegationType delegationType\\n  ) internal {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    if (from != address(0)) {\\n      uint256 previous = 0;\\n      uint256 fromSnapshotsCount = snapshotsCounts[from];\\n\\n      if (fromSnapshotsCount != 0) {\\n        previous = snapshots[from][fromSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(from);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        from,\\n        uint128(previous),\\n        uint128(previous.sub(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(from, previous.sub(amount), delegationType);\\n    }\\n    if (to != address(0)) {\\n      uint256 previous = 0;\\n      uint256 toSnapshotsCount = snapshotsCounts[to];\\n      if (toSnapshotsCount != 0) {\\n        previous = snapshots[to][toSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(to);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        to,\\n        uint128(previous),\\n        uint128(previous.add(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(to, previous.add(amount), delegationType);\\n    }\\n  }\\n\\n  /**\\n   * @dev searches a snapshot by block number. Uses binary search.\\n   * @param snapshots the snapshots mapping\\n   * @param snapshotsCounts the number of snapshots\\n   * @param user the user for which the snapshot is being searched\\n   * @param blockNumber the block number being searched\\n   **/\\n  function _searchByBlockNumber(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address user,\\n    uint256 blockNumber\\n  ) internal view returns (uint256) {\\n    require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\\n\\n    uint256 snapshotsCount = snapshotsCounts[user];\\n\\n    if (snapshotsCount == 0) {\\n      return balanceOf(user);\\n    }\\n\\n    // First check most recent balance\\n    if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\\n      return snapshots[user][snapshotsCount - 1].value;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (snapshots[user][0].blockNumber > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint256 lower = 0;\\n    uint256 upper = snapshotsCount - 1;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Snapshot memory snapshot = snapshots[user][center];\\n      if (snapshot.blockNumber == blockNumber) {\\n        return snapshot.value;\\n      } else if (snapshot.blockNumber < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return snapshots[user][lower].value;\\n  }\\n\\n  /**\\n   * @dev returns the delegation data (snapshot, snapshotsCount, list of delegates) by delegation type\\n   * NOTE: Ideal implementation would have mapped this in a struct by delegation type. Unfortunately,\\n   * the AAVE token and StakeToken already include a mapping for the snapshots, so we require contracts\\n   * who inherit from this to provide access to the delegation data by overriding this method.\\n   * @param delegationType the type of delegation\\n   **/\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    virtual\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    );\\n\\n  /**\\n   * @dev Writes a snapshot for an owner of tokens\\n   * @param owner The owner of the tokens\\n   * @param oldValue The value before the operation that is gonna be executed after the snapshot\\n   * @param newValue The value after the operation\\n   */\\n  function _writeSnapshot(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address owner,\\n    uint128 oldValue,\\n    uint128 newValue\\n  ) internal {\\n    uint128 currentBlock = uint128(block.number);\\n\\n    uint256 ownerSnapshotsCount = snapshotsCounts[owner];\\n    mapping(uint256 => Snapshot) storage snapshotsOwner = snapshots[owner];\\n\\n    // Doing multiple operations in the same block\\n    if (\\n      ownerSnapshotsCount != 0 &&\\n      snapshotsOwner[ownerSnapshotsCount - 1].blockNumber == currentBlock\\n    ) {\\n      snapshotsOwner[ownerSnapshotsCount - 1].value = newValue;\\n    } else {\\n      snapshotsOwner[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\\n      snapshotsCounts[owner] = ownerSnapshotsCount + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the user delegatee. If a user never performed any delegation,\\n   * his delegated address will be 0x0. In that case we simply return the user itself\\n   * @param delegator the address of the user for which return the delegatee\\n   * @param delegates the array of delegates for a particular type of delegation\\n   **/\\n  function _getDelegatee(address delegator, mapping(address => address) storage delegates)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address previousDelegatee = delegates[delegator];\\n\\n    if (previousDelegatee == address(0)) {\\n      return delegator;\\n    }\\n\\n    return previousDelegatee;\\n  }\\n}\\n\\n/**\\n * @title ERC20WithSnapshot\\n * @notice ERC20 including snapshots of balances on transfer-related actions\\n * @author Aave\\n **/\\nabstract contract GovernancePowerWithSnapshot is GovernancePowerDelegationERC20 {\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @dev The following storage layout points to the prior StakedToken.sol implementation:\\n   * _snapshots => _votingSnapshots\\n   * _snapshotsCounts =>  _votingSnapshotsCounts\\n   * _aaveGovernance => _aaveGovernance\\n   */\\n  mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\\n  mapping(address => uint256) public _votingSnapshotsCounts;\\n\\n  /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\\n  /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\\n  /// to control all potential reentrancies by calling back the this contract\\n  ITransferHook public _aaveGovernance;\\n\\n  function _setAaveGovernance(ITransferHook aaveGovernance) internal virtual {\\n    _aaveGovernance = aaveGovernance;\\n  }\\n}\\n\\n/**\\n * @title StakedToken\\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\\n * @author Aave\\n **/\\ncontract StakedTokenV2Rev3 is\\n  IStakedAave,\\n  GovernancePowerWithSnapshot,\\n  VersionedInitializable,\\n  AaveDistributionManager\\n{\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev Start of Storage layout from StakedToken v1\\n  uint256 public constant REVISION = 3;\\n\\n  IERC20 public immutable STAKED_TOKEN;\\n  IERC20 public immutable REWARD_TOKEN;\\n  uint256 public immutable COOLDOWN_SECONDS;\\n\\n  /// @notice Seconds available to redeem once the cooldown period is fullfilled\\n  uint256 public immutable UNSTAKE_WINDOW;\\n\\n  /// @notice Address to pull from the rewards, needs to have approved this contract\\n  address public immutable REWARDS_VAULT;\\n\\n  mapping(address => uint256) public stakerRewardsToClaim;\\n  mapping(address => uint256) public stakersCooldowns;\\n\\n  /// @dev End of Storage layout from StakedToken v1\\n\\n  /// @dev To see the voting mappings, go to GovernancePowerWithSnapshot.sol\\n  mapping(address => address) internal _votingDelegates;\\n\\n  mapping(address => mapping(uint256 => Snapshot)) internal _propositionPowerSnapshots;\\n  mapping(address => uint256) internal _propositionPowerSnapshotsCounts;\\n  mapping(address => address) internal _propositionPowerDelegates;\\n\\n  bytes32 public DOMAIN_SEPARATOR;\\n  bytes public constant EIP712_REVISION = bytes('1');\\n  bytes32 internal constant EIP712_DOMAIN =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  /// @dev owner => next valid nonce to submit with permit()\\n  mapping(address => uint256) public _nonces;\\n\\n  event Staked(address indexed from, address indexed onBehalfOf, uint256 amount);\\n  event Redeem(address indexed from, address indexed to, uint256 amount);\\n\\n  event RewardsAccrued(address user, uint256 amount);\\n  event RewardsClaimed(address indexed from, address indexed to, uint256 amount);\\n\\n  event Cooldown(address indexed user);\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals,\\n    address governance\\n  ) public ERC20(name, symbol) AaveDistributionManager(emissionManager, distributionDuration) {\\n    STAKED_TOKEN = stakedToken;\\n    REWARD_TOKEN = rewardToken;\\n    COOLDOWN_SECONDS = cooldownSeconds;\\n    UNSTAKE_WINDOW = unstakeWindow;\\n    REWARDS_VAULT = rewardsVault;\\n    _aaveGovernance = ITransferHook(governance);\\n    ERC20._setupDecimals(decimals);\\n  }\\n\\n  /**\\n   * @dev Called by the proxy contract\\n   **/\\n  function initialize() external initializer {\\n    uint256 chainId;\\n\\n    //solium-disable-next-line\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN,\\n        keccak256(bytes(name())),\\n        keccak256(EIP712_REVISION),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n\\n    // Update lastUpdateTimestamp of stkAave to reward users since the end of the prior staking period\\n    AssetData storage assetData = assets[address(this)];\\n    assetData.lastUpdateTimestamp = 1620594720;\\n  }\\n\\n  function stake(address onBehalfOf, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    uint256 balanceOfUser = balanceOf(onBehalfOf);\\n\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(onBehalfOf, address(this), balanceOfUser, totalSupply());\\n    if (accruedRewards != 0) {\\n      emit RewardsAccrued(onBehalfOf, accruedRewards);\\n      stakerRewardsToClaim[onBehalfOf] = stakerRewardsToClaim[onBehalfOf].add(accruedRewards);\\n    }\\n\\n    stakersCooldowns[onBehalfOf] = getNextCooldownTimestamp(0, amount, onBehalfOf, balanceOfUser);\\n\\n    _mint(onBehalfOf, amount);\\n    IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit Staked(msg.sender, onBehalfOf, amount);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens, and stop earning rewards\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   **/\\n  function redeem(address to, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    //solium-disable-next-line\\n    uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\\n    require(\\n      block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\\n      'INSUFFICIENT_COOLDOWN'\\n    );\\n    require(\\n      block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n      'UNSTAKE_WINDOW_FINISHED'\\n    );\\n    uint256 balanceOfMessageSender = balanceOf(msg.sender);\\n\\n    uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\\n\\n    _updateCurrentUnclaimedRewards(msg.sender, balanceOfMessageSender, true);\\n\\n    _burn(msg.sender, amountToRedeem);\\n\\n    if (balanceOfMessageSender.sub(amountToRedeem) == 0) {\\n      stakersCooldowns[msg.sender] = 0;\\n    }\\n\\n    IERC20(STAKED_TOKEN).safeTransfer(to, amountToRedeem);\\n\\n    emit Redeem(msg.sender, to, amountToRedeem);\\n  }\\n\\n  /**\\n   * @dev Activates the cooldown period to unstake\\n   * - It can't be called if the user is not staking\\n   **/\\n  function cooldown() external override {\\n    require(balanceOf(msg.sender) != 0, 'INVALID_BALANCE_ON_COOLDOWN');\\n    //solium-disable-next-line\\n    stakersCooldowns[msg.sender] = block.timestamp;\\n\\n    emit Cooldown(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\\n   * @param to Address to stake for\\n   * @param amount Amount to stake\\n   **/\\n  function claimRewards(address to, uint256 amount) external override {\\n    uint256 newTotalRewards =\\n      _updateCurrentUnclaimedRewards(msg.sender, balanceOf(msg.sender), false);\\n    uint256 amountToClaim = (amount == type(uint256).max) ? newTotalRewards : amount;\\n\\n    stakerRewardsToClaim[msg.sender] = newTotalRewards.sub(amountToClaim, 'INVALID_AMOUNT');\\n\\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\\n\\n    emit RewardsClaimed(msg.sender, to, amountToClaim);\\n  }\\n\\n  /**\\n   * @dev Internal ERC20 _transfer of the tokenized staked tokens\\n   * @param from Address to transfer from\\n   * @param to Address to transfer to\\n   * @param amount Amount to transfer\\n   **/\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    uint256 balanceOfFrom = balanceOf(from);\\n    // Sender\\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\\n\\n    // Recipient\\n    if (from != to) {\\n      uint256 balanceOfTo = balanceOf(to);\\n      _updateCurrentUnclaimedRewards(to, balanceOfTo, true);\\n\\n      uint256 previousSenderCooldown = stakersCooldowns[from];\\n      stakersCooldowns[to] = getNextCooldownTimestamp(\\n        previousSenderCooldown,\\n        amount,\\n        to,\\n        balanceOfTo\\n      );\\n      // if cooldown was set and whole balance of sender was transferred - clear cooldown\\n      if (balanceOfFrom == amount && previousSenderCooldown != 0) {\\n        stakersCooldowns[from] = 0;\\n      }\\n    }\\n\\n    super._transfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Updates the user state related with his accrued rewards\\n   * @param user Address of the user\\n   * @param userBalance The current balance of the user\\n   * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\\n   * @return The unclaimed rewards that were added to the total accrued\\n   **/\\n  function _updateCurrentUnclaimedRewards(\\n    address user,\\n    uint256 userBalance,\\n    bool updateStorage\\n  ) internal returns (uint256) {\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(user, address(this), userBalance, totalSupply());\\n    uint256 unclaimedRewards = stakerRewardsToClaim[user].add(accruedRewards);\\n\\n    if (accruedRewards != 0) {\\n      if (updateStorage) {\\n        stakerRewardsToClaim[user] = unclaimedRewards;\\n      }\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n\\n    return unclaimedRewards;\\n  }\\n\\n  /**\\n   * @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\\n   *  - If the timestamp of the sender is \\\"better\\\" or the timestamp of the recipient is 0, we take the one of the recipient\\n   *  - Weighted average of from/to cooldown timestamps if:\\n   *    # The sender doesn't have the cooldown activated (timestamp 0).\\n   *    # The sender timestamp is expired\\n   *    # The sender has a \\\"worse\\\" timestamp\\n   *  - If the receiver's cooldown timestamp expired (too old), the next is 0\\n   * @param fromCooldownTimestamp Cooldown timestamp of the sender\\n   * @param amountToReceive Amount\\n   * @param toAddress Address of the recipient\\n   * @param toBalance Current balance of the receiver\\n   * @return The new cooldown timestamp\\n   **/\\n  function getNextCooldownTimestamp(\\n    uint256 fromCooldownTimestamp,\\n    uint256 amountToReceive,\\n    address toAddress,\\n    uint256 toBalance\\n  ) public view returns (uint256) {\\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\\n    if (toCooldownTimestamp == 0) {\\n      return 0;\\n    }\\n\\n    uint256 minimalValidCooldownTimestamp =\\n      block.timestamp.sub(COOLDOWN_SECONDS).sub(UNSTAKE_WINDOW);\\n\\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\\n      toCooldownTimestamp = 0;\\n    } else {\\n      uint256 fromCooldownTimestamp =\\n        (minimalValidCooldownTimestamp > fromCooldownTimestamp)\\n          ? block.timestamp\\n          : fromCooldownTimestamp;\\n\\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\\n        return toCooldownTimestamp;\\n      } else {\\n        toCooldownTimestamp = (\\n          amountToReceive.mul(fromCooldownTimestamp).add(toBalance.mul(toCooldownTimestamp))\\n        )\\n          .div(amountToReceive.add(toBalance));\\n      }\\n    }\\n    return toCooldownTimestamp;\\n  }\\n\\n  /**\\n   * @dev Return the total rewards pending to claim by an staker\\n   * @param staker The staker address\\n   * @return The rewards\\n   */\\n  function getTotalRewardsBalance(address staker) external view returns (uint256) {\\n    DistributionTypes.UserStakeInput[] memory userStakeInputs =\\n      new DistributionTypes.UserStakeInput[](1);\\n    userStakeInputs[0] = DistributionTypes.UserStakeInput({\\n      underlyingAsset: address(this),\\n      stakedByUser: balanceOf(staker),\\n      totalStaked: totalSupply()\\n    });\\n    return stakerRewardsToClaim[staker].add(_getUnclaimedRewards(staker, userStakeInputs));\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   * @return The revision\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner the owner of the funds\\n   * @param spender the spender\\n   * @param value the amount\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(owner != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    uint256 currentValidNonce = _nonces[owner];\\n    bytes32 digest =\\n      keccak256(\\n        abi.encodePacked(\\n          '\\\\x19\\\\x01',\\n          DOMAIN_SEPARATOR,\\n          keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n        )\\n      );\\n\\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _nonces[owner] = currentValidNonce.add(1);\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\\n   * - On _transfer, it writes snapshots for both \\\"from\\\" and \\\"to\\\"\\n   * - On _mint, only for _to\\n   * - On _burn, only for _from\\n   * @param from the from address\\n   * @param to the to address\\n   * @param amount the amount to transfer\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    address votingFromDelegatee = _votingDelegates[from];\\n    address votingToDelegatee = _votingDelegates[to];\\n\\n    if (votingFromDelegatee == address(0)) {\\n      votingFromDelegatee = from;\\n    }\\n    if (votingToDelegatee == address(0)) {\\n      votingToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      votingFromDelegatee,\\n      votingToDelegatee,\\n      amount,\\n      DelegationType.VOTING_POWER\\n    );\\n\\n    address propPowerFromDelegatee = _propositionPowerDelegates[from];\\n    address propPowerToDelegatee = _propositionPowerDelegates[to];\\n\\n    if (propPowerFromDelegatee == address(0)) {\\n      propPowerFromDelegatee = from;\\n    }\\n    if (propPowerToDelegatee == address(0)) {\\n      propPowerToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      propPowerFromDelegatee,\\n      propPowerToDelegatee,\\n      amount,\\n      DelegationType.PROPOSITION_POWER\\n    );\\n\\n    // caching the aave governance address to avoid multiple state loads\\n    ITransferHook aaveGovernance = _aaveGovernance;\\n    if (aaveGovernance != ITransferHook(0)) {\\n      aaveGovernance.onTransfer(from, to, amount);\\n    }\\n  }\\n\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    override\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    )\\n  {\\n    if (delegationType == DelegationType.VOTING_POWER) {\\n      return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\\n    } else {\\n      return (\\n        _propositionPowerSnapshots,\\n        _propositionPowerSnapshotsCounts,\\n        _propositionPowerDelegates\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateByTypeBySig(\\n    address delegatee,\\n    DelegationType delegationType,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash =\\n      keccak256(\\n        abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\\n      );\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(signatory, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n}\\n\",\"keccak256\":\"0x193e8dd33d55c137ea32793b1f2c2f06b4b8936ee5c625e38766062c4f89fb43\",\"license\":\"agpl-3.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":447,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:GovernancePowerDelegationERC20","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":453,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:GovernancePowerDelegationERC20","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":455,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:GovernancePowerDelegationERC20","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":457,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:GovernancePowerDelegationERC20","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":459,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:GovernancePowerDelegationERC20","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":461,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:GovernancePowerDelegationERC20","label":"_decimals","offset":0,"slot":"5","type":"t_uint8"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"DELEGATE_BY_TYPE_TYPEHASH()":{"notice":"The EIP-712 typehash for the delegation struct used by the contract"}},"notice":"implementation of the AAVE token contract","version":1}},"GovernancePowerWithSnapshot":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"delegator","type":"address"},{"indexed":true,"internalType":"address","name":"delegatee","type":"address"},{"indexed":false,"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"DelegateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"DelegatedPowerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DELEGATE_BY_TYPE_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DELEGATE_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_aaveGovernance","outputs":[{"internalType":"contract ITransferHook","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"_votingSnapshots","outputs":[{"internalType":"uint128","name":"blockNumber","type":"uint128"},{"internalType":"uint128","name":"value","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"_votingSnapshotsCounts","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"}],"name":"delegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"},{"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"delegateByType","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegator","type":"address"},{"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"getDelegateeByType","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"getPowerAtBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"getPowerCurrent","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"name":"totalSupplyAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Aave*","kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"delegate(address)":{"details":"delegates all the powers to a specific user","params":{"delegatee":"the user to which the power will be delegated*"}},"delegateByType(address,uint8)":{"details":"delegates one specific power to a delegatee","params":{"delegatee":"the user which delegated power has changed","delegationType":"the type of delegation (VOTING_POWER, PROPOSITION_POWER)*"}},"getDelegateeByType(address,uint8)":{"details":"returns the delegatee of an user","params":{"delegator":"the address of the delegator*"}},"getPowerAtBlock(address,uint256,uint8)":{"details":"returns the delegated power of a user at a certain block","params":{"user":"the user*"}},"getPowerCurrent(address,uint8)":{"details":"returns the current delegated power of a user. The current power is the power delegated at the time of the last snapshot","params":{"user":"the user*"}},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"totalSupplyAt(uint256)":{"details":"returns the total supply at a certain block number used by the voting strategy contracts to calculate the total votes needed for threshold/quorum In this initial implementation with no AAVE minting, simply returns the current supply A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future*"},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}},"stateVariables":{"_aaveGovernance":{"details":"reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility to control all potential reentrancies by calling back the this contract"},"_votingSnapshots":{"details":"The following storage layout points to the prior StakedToken.sol implementation: _snapshots => _votingSnapshots _snapshotsCounts =>  _votingSnapshotsCounts _aaveGovernance => _aaveGovernance"}},"title":"ERC20WithSnapshot","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DELEGATE_BY_TYPE_TYPEHASH()":"aa9fbe02","DELEGATE_TYPEHASH()":"41cbf54a","_aaveGovernance()":"c3863ada","_votingSnapshots(address,uint256)":"5b3cc0cf","_votingSnapshotsCounts(address)":"7bb73c97","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","delegate(address)":"5c19a95c","delegateByType(address,uint8)":"dc937e1c","getDelegateeByType(address,uint8)":"6f50458d","getPowerAtBlock(address,uint256,uint8)":"c2ffbb91","getPowerCurrent(address,uint8)":"b2f4201d","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","totalSupplyAt(uint256)":"981b24d0","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"DelegatedPowerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATE_BY_TYPE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_aaveGovernance\",\"outputs\":[{\"internalType\":\"contract ITransferHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_votingSnapshots\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"blockNumber\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_votingSnapshotsCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"delegateByType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getDelegateeByType\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getPowerAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getPowerCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aave*\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"delegate(address)\":{\"details\":\"delegates all the powers to a specific user\",\"params\":{\"delegatee\":\"the user to which the power will be delegated*\"}},\"delegateByType(address,uint8)\":{\"details\":\"delegates one specific power to a delegatee\",\"params\":{\"delegatee\":\"the user which delegated power has changed\",\"delegationType\":\"the type of delegation (VOTING_POWER, PROPOSITION_POWER)*\"}},\"getDelegateeByType(address,uint8)\":{\"details\":\"returns the delegatee of an user\",\"params\":{\"delegator\":\"the address of the delegator*\"}},\"getPowerAtBlock(address,uint256,uint8)\":{\"details\":\"returns the delegated power of a user at a certain block\",\"params\":{\"user\":\"the user*\"}},\"getPowerCurrent(address,uint8)\":{\"details\":\"returns the current delegated power of a user. The current power is the power delegated at the time of the last snapshot\",\"params\":{\"user\":\"the user*\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"totalSupplyAt(uint256)\":{\"details\":\"returns the total supply at a certain block number used by the voting strategy contracts to calculate the total votes needed for threshold/quorum In this initial implementation with no AAVE minting, simply returns the current supply A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future*\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"_aaveGovernance\":{\"details\":\"reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility to control all potential reentrancies by calling back the this contract\"},\"_votingSnapshots\":{\"details\":\"The following storage layout points to the prior StakedToken.sol implementation: _snapshots => _votingSnapshots _snapshotsCounts =>  _votingSnapshotsCounts _aaveGovernance => _aaveGovernance\"}},\"title\":\"ERC20WithSnapshot\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DELEGATE_BY_TYPE_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the delegation struct used by the contract\"}},\"notice\":\"ERC20 including snapshots of balances on transfer-related actions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":\"GovernancePowerWithSnapshot\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-12-10\\n */\\n\\n// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGovernancePowerDelegationToken {\\n  enum DelegationType {VOTING_POWER, PROPOSITION_POWER}\\n\\n  /**\\n   * @dev emitted when a user delegates to another\\n   * @param delegator the delegator\\n   * @param delegatee the delegatee\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    DelegationType delegationType\\n  );\\n\\n  /**\\n   * @dev emitted when an action changes the delegated power of a user\\n   * @param user the user which delegated power has changed\\n   * @param amount the amount of delegated power for the user\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external virtual;\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (address);\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view virtual returns (uint256);\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view virtual returns (uint256);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string internal _name;\\n  string internal _symbol;\\n  uint8 private _decimals;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n   * a default value of 18.\\n   *\\n   * To select a different value for {decimals}, use {_setupDecimals}.\\n   *\\n   * All three of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name, string memory symbol) public {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = 18;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        'ERC20: decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n   *\\n   * This is internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Sets {decimals} to a value other than the default one of 18.\\n   *\\n   * WARNING: This function should only be called from the constructor. Most\\n   * applications that interact with token contracts will not expect\\n   * {decimals} to ever change, and may work incorrectly if it does.\\n   */\\n  function _setupDecimals(uint8 decimals_) internal {\\n    _decimals = decimals_;\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be to transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\\ninterface IStakedAave {\\n  function stake(address to, uint256 amount) external;\\n\\n  function redeem(address to, uint256 amount) external;\\n\\n  function cooldown() external;\\n\\n  function claimRewards(address to, uint256 amount) external;\\n}\\n\\ninterface ITransferHook {\\n  function onTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint128 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\\ninterface IAaveDistributionManager {\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external;\\n}\\n\\n/**\\n * @title AaveDistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract AaveDistributionManager is IAaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  struct AssetData {\\n    uint128 emissionPerSecond;\\n    uint128 lastUpdateTimestamp;\\n    uint256 index;\\n    mapping(address => uint256) users;\\n  }\\n\\n  uint256 public immutable DISTRIBUTION_END;\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n\\n  constructor(address emissionManager, uint256 distributionDuration) public {\\n    DISTRIBUTION_END = block.timestamp.add(distributionDuration);\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /**\\n   * @dev Configures the distribution of rewards for a list of assets\\n   * @param assetsConfigInput The list of configurations to apply\\n   **/\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external\\n    override\\n  {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address underlyingAsset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex =\\n      _getAssetIndex(oldIndex, assetConfig.emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n    if (newIndex != oldIndex) {\\n      assetConfig.index = newIndex;\\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\\n    }\\n\\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards = accruedRewards.add(\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        )\\n      );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex =\\n        _getAssetIndex(\\n          assetConfig.index,\\n          assetConfig.emissionPerSecond,\\n          assetConfig.lastUpdateTimestamp,\\n          stakes[i].totalStaked\\n        );\\n\\n      accruedRewards = accruedRewards.add(\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\\n      );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= DISTRIBUTION_END\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp =\\n      block.timestamp > DISTRIBUTION_END ? DISTRIBUTION_END : block.timestamp;\\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\\n    return\\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\\n        currentIndex\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n}\\n\\n/**\\n * @notice implementation of the AAVE token contract\\n * @author Aave\\n */\\nabstract contract GovernancePowerDelegationERC20 is ERC20, IGovernancePowerDelegationToken {\\n  using SafeMath for uint256;\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH =\\n    keccak256('DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)');\\n\\n  bytes32 public constant DELEGATE_TYPEHASH =\\n    keccak256('Delegate(address delegatee,uint256 nonce,uint256 expiry)');\\n\\n  /// @dev snapshot of a value on a specific block, used for votes\\n  struct Snapshot {\\n    uint128 blockNumber;\\n    uint128 value;\\n  }\\n\\n  /**\\n   * @dev delegates one specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external override {\\n    _delegateByType(msg.sender, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external override {\\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    return _getDelegatee(delegator, delegates);\\n  }\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\\n  }\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view override returns (uint256) {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\\n  }\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   * used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\\n   * In this initial implementation with no AAVE minting, simply returns the current supply\\n   * A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view override returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _delegateByType(\\n    address delegator,\\n    address delegatee,\\n    DelegationType delegationType\\n  ) internal {\\n    require(delegatee != address(0), 'INVALID_DELEGATEE');\\n\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    uint256 delegatorBalance = balanceOf(delegator);\\n\\n    address previousDelegatee = _getDelegatee(delegator, delegates);\\n\\n    delegates[delegator] = delegatee;\\n\\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\\n    emit DelegateChanged(delegator, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev moves delegated power from one user to another\\n   * @param from the user from which delegated power is moved\\n   * @param to the user that will receive the delegated power\\n   * @param amount the amount of delegated power to be moved\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _moveDelegatesByType(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    DelegationType delegationType\\n  ) internal {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    if (from != address(0)) {\\n      uint256 previous = 0;\\n      uint256 fromSnapshotsCount = snapshotsCounts[from];\\n\\n      if (fromSnapshotsCount != 0) {\\n        previous = snapshots[from][fromSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(from);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        from,\\n        uint128(previous),\\n        uint128(previous.sub(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(from, previous.sub(amount), delegationType);\\n    }\\n    if (to != address(0)) {\\n      uint256 previous = 0;\\n      uint256 toSnapshotsCount = snapshotsCounts[to];\\n      if (toSnapshotsCount != 0) {\\n        previous = snapshots[to][toSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(to);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        to,\\n        uint128(previous),\\n        uint128(previous.add(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(to, previous.add(amount), delegationType);\\n    }\\n  }\\n\\n  /**\\n   * @dev searches a snapshot by block number. Uses binary search.\\n   * @param snapshots the snapshots mapping\\n   * @param snapshotsCounts the number of snapshots\\n   * @param user the user for which the snapshot is being searched\\n   * @param blockNumber the block number being searched\\n   **/\\n  function _searchByBlockNumber(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address user,\\n    uint256 blockNumber\\n  ) internal view returns (uint256) {\\n    require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\\n\\n    uint256 snapshotsCount = snapshotsCounts[user];\\n\\n    if (snapshotsCount == 0) {\\n      return balanceOf(user);\\n    }\\n\\n    // First check most recent balance\\n    if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\\n      return snapshots[user][snapshotsCount - 1].value;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (snapshots[user][0].blockNumber > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint256 lower = 0;\\n    uint256 upper = snapshotsCount - 1;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Snapshot memory snapshot = snapshots[user][center];\\n      if (snapshot.blockNumber == blockNumber) {\\n        return snapshot.value;\\n      } else if (snapshot.blockNumber < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return snapshots[user][lower].value;\\n  }\\n\\n  /**\\n   * @dev returns the delegation data (snapshot, snapshotsCount, list of delegates) by delegation type\\n   * NOTE: Ideal implementation would have mapped this in a struct by delegation type. Unfortunately,\\n   * the AAVE token and StakeToken already include a mapping for the snapshots, so we require contracts\\n   * who inherit from this to provide access to the delegation data by overriding this method.\\n   * @param delegationType the type of delegation\\n   **/\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    virtual\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    );\\n\\n  /**\\n   * @dev Writes a snapshot for an owner of tokens\\n   * @param owner The owner of the tokens\\n   * @param oldValue The value before the operation that is gonna be executed after the snapshot\\n   * @param newValue The value after the operation\\n   */\\n  function _writeSnapshot(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address owner,\\n    uint128 oldValue,\\n    uint128 newValue\\n  ) internal {\\n    uint128 currentBlock = uint128(block.number);\\n\\n    uint256 ownerSnapshotsCount = snapshotsCounts[owner];\\n    mapping(uint256 => Snapshot) storage snapshotsOwner = snapshots[owner];\\n\\n    // Doing multiple operations in the same block\\n    if (\\n      ownerSnapshotsCount != 0 &&\\n      snapshotsOwner[ownerSnapshotsCount - 1].blockNumber == currentBlock\\n    ) {\\n      snapshotsOwner[ownerSnapshotsCount - 1].value = newValue;\\n    } else {\\n      snapshotsOwner[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\\n      snapshotsCounts[owner] = ownerSnapshotsCount + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the user delegatee. If a user never performed any delegation,\\n   * his delegated address will be 0x0. In that case we simply return the user itself\\n   * @param delegator the address of the user for which return the delegatee\\n   * @param delegates the array of delegates for a particular type of delegation\\n   **/\\n  function _getDelegatee(address delegator, mapping(address => address) storage delegates)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address previousDelegatee = delegates[delegator];\\n\\n    if (previousDelegatee == address(0)) {\\n      return delegator;\\n    }\\n\\n    return previousDelegatee;\\n  }\\n}\\n\\n/**\\n * @title ERC20WithSnapshot\\n * @notice ERC20 including snapshots of balances on transfer-related actions\\n * @author Aave\\n **/\\nabstract contract GovernancePowerWithSnapshot is GovernancePowerDelegationERC20 {\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @dev The following storage layout points to the prior StakedToken.sol implementation:\\n   * _snapshots => _votingSnapshots\\n   * _snapshotsCounts =>  _votingSnapshotsCounts\\n   * _aaveGovernance => _aaveGovernance\\n   */\\n  mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\\n  mapping(address => uint256) public _votingSnapshotsCounts;\\n\\n  /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\\n  /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\\n  /// to control all potential reentrancies by calling back the this contract\\n  ITransferHook public _aaveGovernance;\\n\\n  function _setAaveGovernance(ITransferHook aaveGovernance) internal virtual {\\n    _aaveGovernance = aaveGovernance;\\n  }\\n}\\n\\n/**\\n * @title StakedToken\\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\\n * @author Aave\\n **/\\ncontract StakedTokenV2Rev3 is\\n  IStakedAave,\\n  GovernancePowerWithSnapshot,\\n  VersionedInitializable,\\n  AaveDistributionManager\\n{\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev Start of Storage layout from StakedToken v1\\n  uint256 public constant REVISION = 3;\\n\\n  IERC20 public immutable STAKED_TOKEN;\\n  IERC20 public immutable REWARD_TOKEN;\\n  uint256 public immutable COOLDOWN_SECONDS;\\n\\n  /// @notice Seconds available to redeem once the cooldown period is fullfilled\\n  uint256 public immutable UNSTAKE_WINDOW;\\n\\n  /// @notice Address to pull from the rewards, needs to have approved this contract\\n  address public immutable REWARDS_VAULT;\\n\\n  mapping(address => uint256) public stakerRewardsToClaim;\\n  mapping(address => uint256) public stakersCooldowns;\\n\\n  /// @dev End of Storage layout from StakedToken v1\\n\\n  /// @dev To see the voting mappings, go to GovernancePowerWithSnapshot.sol\\n  mapping(address => address) internal _votingDelegates;\\n\\n  mapping(address => mapping(uint256 => Snapshot)) internal _propositionPowerSnapshots;\\n  mapping(address => uint256) internal _propositionPowerSnapshotsCounts;\\n  mapping(address => address) internal _propositionPowerDelegates;\\n\\n  bytes32 public DOMAIN_SEPARATOR;\\n  bytes public constant EIP712_REVISION = bytes('1');\\n  bytes32 internal constant EIP712_DOMAIN =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  /// @dev owner => next valid nonce to submit with permit()\\n  mapping(address => uint256) public _nonces;\\n\\n  event Staked(address indexed from, address indexed onBehalfOf, uint256 amount);\\n  event Redeem(address indexed from, address indexed to, uint256 amount);\\n\\n  event RewardsAccrued(address user, uint256 amount);\\n  event RewardsClaimed(address indexed from, address indexed to, uint256 amount);\\n\\n  event Cooldown(address indexed user);\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals,\\n    address governance\\n  ) public ERC20(name, symbol) AaveDistributionManager(emissionManager, distributionDuration) {\\n    STAKED_TOKEN = stakedToken;\\n    REWARD_TOKEN = rewardToken;\\n    COOLDOWN_SECONDS = cooldownSeconds;\\n    UNSTAKE_WINDOW = unstakeWindow;\\n    REWARDS_VAULT = rewardsVault;\\n    _aaveGovernance = ITransferHook(governance);\\n    ERC20._setupDecimals(decimals);\\n  }\\n\\n  /**\\n   * @dev Called by the proxy contract\\n   **/\\n  function initialize() external initializer {\\n    uint256 chainId;\\n\\n    //solium-disable-next-line\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN,\\n        keccak256(bytes(name())),\\n        keccak256(EIP712_REVISION),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n\\n    // Update lastUpdateTimestamp of stkAave to reward users since the end of the prior staking period\\n    AssetData storage assetData = assets[address(this)];\\n    assetData.lastUpdateTimestamp = 1620594720;\\n  }\\n\\n  function stake(address onBehalfOf, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    uint256 balanceOfUser = balanceOf(onBehalfOf);\\n\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(onBehalfOf, address(this), balanceOfUser, totalSupply());\\n    if (accruedRewards != 0) {\\n      emit RewardsAccrued(onBehalfOf, accruedRewards);\\n      stakerRewardsToClaim[onBehalfOf] = stakerRewardsToClaim[onBehalfOf].add(accruedRewards);\\n    }\\n\\n    stakersCooldowns[onBehalfOf] = getNextCooldownTimestamp(0, amount, onBehalfOf, balanceOfUser);\\n\\n    _mint(onBehalfOf, amount);\\n    IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit Staked(msg.sender, onBehalfOf, amount);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens, and stop earning rewards\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   **/\\n  function redeem(address to, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    //solium-disable-next-line\\n    uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\\n    require(\\n      block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\\n      'INSUFFICIENT_COOLDOWN'\\n    );\\n    require(\\n      block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n      'UNSTAKE_WINDOW_FINISHED'\\n    );\\n    uint256 balanceOfMessageSender = balanceOf(msg.sender);\\n\\n    uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\\n\\n    _updateCurrentUnclaimedRewards(msg.sender, balanceOfMessageSender, true);\\n\\n    _burn(msg.sender, amountToRedeem);\\n\\n    if (balanceOfMessageSender.sub(amountToRedeem) == 0) {\\n      stakersCooldowns[msg.sender] = 0;\\n    }\\n\\n    IERC20(STAKED_TOKEN).safeTransfer(to, amountToRedeem);\\n\\n    emit Redeem(msg.sender, to, amountToRedeem);\\n  }\\n\\n  /**\\n   * @dev Activates the cooldown period to unstake\\n   * - It can't be called if the user is not staking\\n   **/\\n  function cooldown() external override {\\n    require(balanceOf(msg.sender) != 0, 'INVALID_BALANCE_ON_COOLDOWN');\\n    //solium-disable-next-line\\n    stakersCooldowns[msg.sender] = block.timestamp;\\n\\n    emit Cooldown(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\\n   * @param to Address to stake for\\n   * @param amount Amount to stake\\n   **/\\n  function claimRewards(address to, uint256 amount) external override {\\n    uint256 newTotalRewards =\\n      _updateCurrentUnclaimedRewards(msg.sender, balanceOf(msg.sender), false);\\n    uint256 amountToClaim = (amount == type(uint256).max) ? newTotalRewards : amount;\\n\\n    stakerRewardsToClaim[msg.sender] = newTotalRewards.sub(amountToClaim, 'INVALID_AMOUNT');\\n\\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\\n\\n    emit RewardsClaimed(msg.sender, to, amountToClaim);\\n  }\\n\\n  /**\\n   * @dev Internal ERC20 _transfer of the tokenized staked tokens\\n   * @param from Address to transfer from\\n   * @param to Address to transfer to\\n   * @param amount Amount to transfer\\n   **/\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    uint256 balanceOfFrom = balanceOf(from);\\n    // Sender\\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\\n\\n    // Recipient\\n    if (from != to) {\\n      uint256 balanceOfTo = balanceOf(to);\\n      _updateCurrentUnclaimedRewards(to, balanceOfTo, true);\\n\\n      uint256 previousSenderCooldown = stakersCooldowns[from];\\n      stakersCooldowns[to] = getNextCooldownTimestamp(\\n        previousSenderCooldown,\\n        amount,\\n        to,\\n        balanceOfTo\\n      );\\n      // if cooldown was set and whole balance of sender was transferred - clear cooldown\\n      if (balanceOfFrom == amount && previousSenderCooldown != 0) {\\n        stakersCooldowns[from] = 0;\\n      }\\n    }\\n\\n    super._transfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Updates the user state related with his accrued rewards\\n   * @param user Address of the user\\n   * @param userBalance The current balance of the user\\n   * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\\n   * @return The unclaimed rewards that were added to the total accrued\\n   **/\\n  function _updateCurrentUnclaimedRewards(\\n    address user,\\n    uint256 userBalance,\\n    bool updateStorage\\n  ) internal returns (uint256) {\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(user, address(this), userBalance, totalSupply());\\n    uint256 unclaimedRewards = stakerRewardsToClaim[user].add(accruedRewards);\\n\\n    if (accruedRewards != 0) {\\n      if (updateStorage) {\\n        stakerRewardsToClaim[user] = unclaimedRewards;\\n      }\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n\\n    return unclaimedRewards;\\n  }\\n\\n  /**\\n   * @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\\n   *  - If the timestamp of the sender is \\\"better\\\" or the timestamp of the recipient is 0, we take the one of the recipient\\n   *  - Weighted average of from/to cooldown timestamps if:\\n   *    # The sender doesn't have the cooldown activated (timestamp 0).\\n   *    # The sender timestamp is expired\\n   *    # The sender has a \\\"worse\\\" timestamp\\n   *  - If the receiver's cooldown timestamp expired (too old), the next is 0\\n   * @param fromCooldownTimestamp Cooldown timestamp of the sender\\n   * @param amountToReceive Amount\\n   * @param toAddress Address of the recipient\\n   * @param toBalance Current balance of the receiver\\n   * @return The new cooldown timestamp\\n   **/\\n  function getNextCooldownTimestamp(\\n    uint256 fromCooldownTimestamp,\\n    uint256 amountToReceive,\\n    address toAddress,\\n    uint256 toBalance\\n  ) public view returns (uint256) {\\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\\n    if (toCooldownTimestamp == 0) {\\n      return 0;\\n    }\\n\\n    uint256 minimalValidCooldownTimestamp =\\n      block.timestamp.sub(COOLDOWN_SECONDS).sub(UNSTAKE_WINDOW);\\n\\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\\n      toCooldownTimestamp = 0;\\n    } else {\\n      uint256 fromCooldownTimestamp =\\n        (minimalValidCooldownTimestamp > fromCooldownTimestamp)\\n          ? block.timestamp\\n          : fromCooldownTimestamp;\\n\\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\\n        return toCooldownTimestamp;\\n      } else {\\n        toCooldownTimestamp = (\\n          amountToReceive.mul(fromCooldownTimestamp).add(toBalance.mul(toCooldownTimestamp))\\n        )\\n          .div(amountToReceive.add(toBalance));\\n      }\\n    }\\n    return toCooldownTimestamp;\\n  }\\n\\n  /**\\n   * @dev Return the total rewards pending to claim by an staker\\n   * @param staker The staker address\\n   * @return The rewards\\n   */\\n  function getTotalRewardsBalance(address staker) external view returns (uint256) {\\n    DistributionTypes.UserStakeInput[] memory userStakeInputs =\\n      new DistributionTypes.UserStakeInput[](1);\\n    userStakeInputs[0] = DistributionTypes.UserStakeInput({\\n      underlyingAsset: address(this),\\n      stakedByUser: balanceOf(staker),\\n      totalStaked: totalSupply()\\n    });\\n    return stakerRewardsToClaim[staker].add(_getUnclaimedRewards(staker, userStakeInputs));\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   * @return The revision\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner the owner of the funds\\n   * @param spender the spender\\n   * @param value the amount\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(owner != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    uint256 currentValidNonce = _nonces[owner];\\n    bytes32 digest =\\n      keccak256(\\n        abi.encodePacked(\\n          '\\\\x19\\\\x01',\\n          DOMAIN_SEPARATOR,\\n          keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n        )\\n      );\\n\\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _nonces[owner] = currentValidNonce.add(1);\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\\n   * - On _transfer, it writes snapshots for both \\\"from\\\" and \\\"to\\\"\\n   * - On _mint, only for _to\\n   * - On _burn, only for _from\\n   * @param from the from address\\n   * @param to the to address\\n   * @param amount the amount to transfer\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    address votingFromDelegatee = _votingDelegates[from];\\n    address votingToDelegatee = _votingDelegates[to];\\n\\n    if (votingFromDelegatee == address(0)) {\\n      votingFromDelegatee = from;\\n    }\\n    if (votingToDelegatee == address(0)) {\\n      votingToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      votingFromDelegatee,\\n      votingToDelegatee,\\n      amount,\\n      DelegationType.VOTING_POWER\\n    );\\n\\n    address propPowerFromDelegatee = _propositionPowerDelegates[from];\\n    address propPowerToDelegatee = _propositionPowerDelegates[to];\\n\\n    if (propPowerFromDelegatee == address(0)) {\\n      propPowerFromDelegatee = from;\\n    }\\n    if (propPowerToDelegatee == address(0)) {\\n      propPowerToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      propPowerFromDelegatee,\\n      propPowerToDelegatee,\\n      amount,\\n      DelegationType.PROPOSITION_POWER\\n    );\\n\\n    // caching the aave governance address to avoid multiple state loads\\n    ITransferHook aaveGovernance = _aaveGovernance;\\n    if (aaveGovernance != ITransferHook(0)) {\\n      aaveGovernance.onTransfer(from, to, amount);\\n    }\\n  }\\n\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    override\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    )\\n  {\\n    if (delegationType == DelegationType.VOTING_POWER) {\\n      return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\\n    } else {\\n      return (\\n        _propositionPowerSnapshots,\\n        _propositionPowerSnapshotsCounts,\\n        _propositionPowerDelegates\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateByTypeBySig(\\n    address delegatee,\\n    DelegationType delegationType,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash =\\n      keccak256(\\n        abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\\n      );\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(signatory, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n}\\n\",\"keccak256\":\"0x193e8dd33d55c137ea32793b1f2c2f06b4b8936ee5c625e38766062c4f89fb43\",\"license\":\"agpl-3.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":447,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:GovernancePowerWithSnapshot","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":453,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:GovernancePowerWithSnapshot","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":455,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:GovernancePowerWithSnapshot","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":457,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:GovernancePowerWithSnapshot","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":459,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:GovernancePowerWithSnapshot","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":461,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:GovernancePowerWithSnapshot","label":"_decimals","offset":0,"slot":"5","type":"t_uint8"},{"astId":2396,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:GovernancePowerWithSnapshot","label":"_votingSnapshots","offset":0,"slot":"6","type":"t_mapping(t_address,t_mapping(t_uint256,t_struct(Snapshot)1726_storage))"},{"astId":2400,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:GovernancePowerWithSnapshot","label":"_votingSnapshotsCounts","offset":0,"slot":"7","type":"t_mapping(t_address,t_uint256)"},{"astId":2403,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:GovernancePowerWithSnapshot","label":"_aaveGovernance","offset":0,"slot":"8","type":"t_contract(ITransferHook)968"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_contract(ITransferHook)968":{"encoding":"inplace","label":"contract ITransferHook","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_mapping(t_uint256,t_struct(Snapshot)1726_storage))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_struct(Snapshot)1726_storage)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_struct(Snapshot)1726_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot)","numberOfBytes":"32","value":"t_struct(Snapshot)1726_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Snapshot)1726_storage":{"encoding":"inplace","label":"struct GovernancePowerDelegationERC20.Snapshot","members":[{"astId":1723,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:GovernancePowerWithSnapshot","label":"blockNumber","offset":0,"slot":"0","type":"t_uint128"},{"astId":1725,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:GovernancePowerWithSnapshot","label":"value","offset":16,"slot":"0","type":"t_uint128"}],"numberOfBytes":"32"},"t_uint128":{"encoding":"inplace","label":"uint128","numberOfBytes":"16"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"DELEGATE_BY_TYPE_TYPEHASH()":{"notice":"The EIP-712 typehash for the delegation struct used by the contract"}},"notice":"ERC20 including snapshots of balances on transfer-related actions","version":1}},"IAaveDistributionManager":{"abi":[{"inputs":[{"components":[{"internalType":"uint128","name":"emissionPerSecond","type":"uint128"},{"internalType":"uint256","name":"totalStaked","type":"uint256"},{"internalType":"address","name":"underlyingAsset","type":"address"}],"internalType":"struct DistributionTypes.AssetConfigInput[]","name":"assetsConfigInput","type":"tuple[]"}],"name":"configureAssets","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"configureAssets((uint128,uint256,address)[])":"b2a5dbfa"}},"metadata":"{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"emissionPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"}],\"internalType\":\"struct DistributionTypes.AssetConfigInput[]\",\"name\":\"assetsConfigInput\",\"type\":\"tuple[]\"}],\"name\":\"configureAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":\"IAaveDistributionManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-12-10\\n */\\n\\n// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGovernancePowerDelegationToken {\\n  enum DelegationType {VOTING_POWER, PROPOSITION_POWER}\\n\\n  /**\\n   * @dev emitted when a user delegates to another\\n   * @param delegator the delegator\\n   * @param delegatee the delegatee\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    DelegationType delegationType\\n  );\\n\\n  /**\\n   * @dev emitted when an action changes the delegated power of a user\\n   * @param user the user which delegated power has changed\\n   * @param amount the amount of delegated power for the user\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external virtual;\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (address);\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view virtual returns (uint256);\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view virtual returns (uint256);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string internal _name;\\n  string internal _symbol;\\n  uint8 private _decimals;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n   * a default value of 18.\\n   *\\n   * To select a different value for {decimals}, use {_setupDecimals}.\\n   *\\n   * All three of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name, string memory symbol) public {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = 18;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        'ERC20: decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n   *\\n   * This is internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Sets {decimals} to a value other than the default one of 18.\\n   *\\n   * WARNING: This function should only be called from the constructor. Most\\n   * applications that interact with token contracts will not expect\\n   * {decimals} to ever change, and may work incorrectly if it does.\\n   */\\n  function _setupDecimals(uint8 decimals_) internal {\\n    _decimals = decimals_;\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be to transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\\ninterface IStakedAave {\\n  function stake(address to, uint256 amount) external;\\n\\n  function redeem(address to, uint256 amount) external;\\n\\n  function cooldown() external;\\n\\n  function claimRewards(address to, uint256 amount) external;\\n}\\n\\ninterface ITransferHook {\\n  function onTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint128 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\\ninterface IAaveDistributionManager {\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external;\\n}\\n\\n/**\\n * @title AaveDistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract AaveDistributionManager is IAaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  struct AssetData {\\n    uint128 emissionPerSecond;\\n    uint128 lastUpdateTimestamp;\\n    uint256 index;\\n    mapping(address => uint256) users;\\n  }\\n\\n  uint256 public immutable DISTRIBUTION_END;\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n\\n  constructor(address emissionManager, uint256 distributionDuration) public {\\n    DISTRIBUTION_END = block.timestamp.add(distributionDuration);\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /**\\n   * @dev Configures the distribution of rewards for a list of assets\\n   * @param assetsConfigInput The list of configurations to apply\\n   **/\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external\\n    override\\n  {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address underlyingAsset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex =\\n      _getAssetIndex(oldIndex, assetConfig.emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n    if (newIndex != oldIndex) {\\n      assetConfig.index = newIndex;\\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\\n    }\\n\\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards = accruedRewards.add(\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        )\\n      );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex =\\n        _getAssetIndex(\\n          assetConfig.index,\\n          assetConfig.emissionPerSecond,\\n          assetConfig.lastUpdateTimestamp,\\n          stakes[i].totalStaked\\n        );\\n\\n      accruedRewards = accruedRewards.add(\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\\n      );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= DISTRIBUTION_END\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp =\\n      block.timestamp > DISTRIBUTION_END ? DISTRIBUTION_END : block.timestamp;\\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\\n    return\\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\\n        currentIndex\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n}\\n\\n/**\\n * @notice implementation of the AAVE token contract\\n * @author Aave\\n */\\nabstract contract GovernancePowerDelegationERC20 is ERC20, IGovernancePowerDelegationToken {\\n  using SafeMath for uint256;\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH =\\n    keccak256('DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)');\\n\\n  bytes32 public constant DELEGATE_TYPEHASH =\\n    keccak256('Delegate(address delegatee,uint256 nonce,uint256 expiry)');\\n\\n  /// @dev snapshot of a value on a specific block, used for votes\\n  struct Snapshot {\\n    uint128 blockNumber;\\n    uint128 value;\\n  }\\n\\n  /**\\n   * @dev delegates one specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external override {\\n    _delegateByType(msg.sender, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external override {\\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    return _getDelegatee(delegator, delegates);\\n  }\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\\n  }\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view override returns (uint256) {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\\n  }\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   * used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\\n   * In this initial implementation with no AAVE minting, simply returns the current supply\\n   * A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view override returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _delegateByType(\\n    address delegator,\\n    address delegatee,\\n    DelegationType delegationType\\n  ) internal {\\n    require(delegatee != address(0), 'INVALID_DELEGATEE');\\n\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    uint256 delegatorBalance = balanceOf(delegator);\\n\\n    address previousDelegatee = _getDelegatee(delegator, delegates);\\n\\n    delegates[delegator] = delegatee;\\n\\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\\n    emit DelegateChanged(delegator, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev moves delegated power from one user to another\\n   * @param from the user from which delegated power is moved\\n   * @param to the user that will receive the delegated power\\n   * @param amount the amount of delegated power to be moved\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _moveDelegatesByType(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    DelegationType delegationType\\n  ) internal {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    if (from != address(0)) {\\n      uint256 previous = 0;\\n      uint256 fromSnapshotsCount = snapshotsCounts[from];\\n\\n      if (fromSnapshotsCount != 0) {\\n        previous = snapshots[from][fromSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(from);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        from,\\n        uint128(previous),\\n        uint128(previous.sub(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(from, previous.sub(amount), delegationType);\\n    }\\n    if (to != address(0)) {\\n      uint256 previous = 0;\\n      uint256 toSnapshotsCount = snapshotsCounts[to];\\n      if (toSnapshotsCount != 0) {\\n        previous = snapshots[to][toSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(to);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        to,\\n        uint128(previous),\\n        uint128(previous.add(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(to, previous.add(amount), delegationType);\\n    }\\n  }\\n\\n  /**\\n   * @dev searches a snapshot by block number. Uses binary search.\\n   * @param snapshots the snapshots mapping\\n   * @param snapshotsCounts the number of snapshots\\n   * @param user the user for which the snapshot is being searched\\n   * @param blockNumber the block number being searched\\n   **/\\n  function _searchByBlockNumber(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address user,\\n    uint256 blockNumber\\n  ) internal view returns (uint256) {\\n    require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\\n\\n    uint256 snapshotsCount = snapshotsCounts[user];\\n\\n    if (snapshotsCount == 0) {\\n      return balanceOf(user);\\n    }\\n\\n    // First check most recent balance\\n    if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\\n      return snapshots[user][snapshotsCount - 1].value;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (snapshots[user][0].blockNumber > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint256 lower = 0;\\n    uint256 upper = snapshotsCount - 1;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Snapshot memory snapshot = snapshots[user][center];\\n      if (snapshot.blockNumber == blockNumber) {\\n        return snapshot.value;\\n      } else if (snapshot.blockNumber < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return snapshots[user][lower].value;\\n  }\\n\\n  /**\\n   * @dev returns the delegation data (snapshot, snapshotsCount, list of delegates) by delegation type\\n   * NOTE: Ideal implementation would have mapped this in a struct by delegation type. Unfortunately,\\n   * the AAVE token and StakeToken already include a mapping for the snapshots, so we require contracts\\n   * who inherit from this to provide access to the delegation data by overriding this method.\\n   * @param delegationType the type of delegation\\n   **/\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    virtual\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    );\\n\\n  /**\\n   * @dev Writes a snapshot for an owner of tokens\\n   * @param owner The owner of the tokens\\n   * @param oldValue The value before the operation that is gonna be executed after the snapshot\\n   * @param newValue The value after the operation\\n   */\\n  function _writeSnapshot(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address owner,\\n    uint128 oldValue,\\n    uint128 newValue\\n  ) internal {\\n    uint128 currentBlock = uint128(block.number);\\n\\n    uint256 ownerSnapshotsCount = snapshotsCounts[owner];\\n    mapping(uint256 => Snapshot) storage snapshotsOwner = snapshots[owner];\\n\\n    // Doing multiple operations in the same block\\n    if (\\n      ownerSnapshotsCount != 0 &&\\n      snapshotsOwner[ownerSnapshotsCount - 1].blockNumber == currentBlock\\n    ) {\\n      snapshotsOwner[ownerSnapshotsCount - 1].value = newValue;\\n    } else {\\n      snapshotsOwner[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\\n      snapshotsCounts[owner] = ownerSnapshotsCount + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the user delegatee. If a user never performed any delegation,\\n   * his delegated address will be 0x0. In that case we simply return the user itself\\n   * @param delegator the address of the user for which return the delegatee\\n   * @param delegates the array of delegates for a particular type of delegation\\n   **/\\n  function _getDelegatee(address delegator, mapping(address => address) storage delegates)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address previousDelegatee = delegates[delegator];\\n\\n    if (previousDelegatee == address(0)) {\\n      return delegator;\\n    }\\n\\n    return previousDelegatee;\\n  }\\n}\\n\\n/**\\n * @title ERC20WithSnapshot\\n * @notice ERC20 including snapshots of balances on transfer-related actions\\n * @author Aave\\n **/\\nabstract contract GovernancePowerWithSnapshot is GovernancePowerDelegationERC20 {\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @dev The following storage layout points to the prior StakedToken.sol implementation:\\n   * _snapshots => _votingSnapshots\\n   * _snapshotsCounts =>  _votingSnapshotsCounts\\n   * _aaveGovernance => _aaveGovernance\\n   */\\n  mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\\n  mapping(address => uint256) public _votingSnapshotsCounts;\\n\\n  /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\\n  /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\\n  /// to control all potential reentrancies by calling back the this contract\\n  ITransferHook public _aaveGovernance;\\n\\n  function _setAaveGovernance(ITransferHook aaveGovernance) internal virtual {\\n    _aaveGovernance = aaveGovernance;\\n  }\\n}\\n\\n/**\\n * @title StakedToken\\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\\n * @author Aave\\n **/\\ncontract StakedTokenV2Rev3 is\\n  IStakedAave,\\n  GovernancePowerWithSnapshot,\\n  VersionedInitializable,\\n  AaveDistributionManager\\n{\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev Start of Storage layout from StakedToken v1\\n  uint256 public constant REVISION = 3;\\n\\n  IERC20 public immutable STAKED_TOKEN;\\n  IERC20 public immutable REWARD_TOKEN;\\n  uint256 public immutable COOLDOWN_SECONDS;\\n\\n  /// @notice Seconds available to redeem once the cooldown period is fullfilled\\n  uint256 public immutable UNSTAKE_WINDOW;\\n\\n  /// @notice Address to pull from the rewards, needs to have approved this contract\\n  address public immutable REWARDS_VAULT;\\n\\n  mapping(address => uint256) public stakerRewardsToClaim;\\n  mapping(address => uint256) public stakersCooldowns;\\n\\n  /// @dev End of Storage layout from StakedToken v1\\n\\n  /// @dev To see the voting mappings, go to GovernancePowerWithSnapshot.sol\\n  mapping(address => address) internal _votingDelegates;\\n\\n  mapping(address => mapping(uint256 => Snapshot)) internal _propositionPowerSnapshots;\\n  mapping(address => uint256) internal _propositionPowerSnapshotsCounts;\\n  mapping(address => address) internal _propositionPowerDelegates;\\n\\n  bytes32 public DOMAIN_SEPARATOR;\\n  bytes public constant EIP712_REVISION = bytes('1');\\n  bytes32 internal constant EIP712_DOMAIN =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  /// @dev owner => next valid nonce to submit with permit()\\n  mapping(address => uint256) public _nonces;\\n\\n  event Staked(address indexed from, address indexed onBehalfOf, uint256 amount);\\n  event Redeem(address indexed from, address indexed to, uint256 amount);\\n\\n  event RewardsAccrued(address user, uint256 amount);\\n  event RewardsClaimed(address indexed from, address indexed to, uint256 amount);\\n\\n  event Cooldown(address indexed user);\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals,\\n    address governance\\n  ) public ERC20(name, symbol) AaveDistributionManager(emissionManager, distributionDuration) {\\n    STAKED_TOKEN = stakedToken;\\n    REWARD_TOKEN = rewardToken;\\n    COOLDOWN_SECONDS = cooldownSeconds;\\n    UNSTAKE_WINDOW = unstakeWindow;\\n    REWARDS_VAULT = rewardsVault;\\n    _aaveGovernance = ITransferHook(governance);\\n    ERC20._setupDecimals(decimals);\\n  }\\n\\n  /**\\n   * @dev Called by the proxy contract\\n   **/\\n  function initialize() external initializer {\\n    uint256 chainId;\\n\\n    //solium-disable-next-line\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN,\\n        keccak256(bytes(name())),\\n        keccak256(EIP712_REVISION),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n\\n    // Update lastUpdateTimestamp of stkAave to reward users since the end of the prior staking period\\n    AssetData storage assetData = assets[address(this)];\\n    assetData.lastUpdateTimestamp = 1620594720;\\n  }\\n\\n  function stake(address onBehalfOf, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    uint256 balanceOfUser = balanceOf(onBehalfOf);\\n\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(onBehalfOf, address(this), balanceOfUser, totalSupply());\\n    if (accruedRewards != 0) {\\n      emit RewardsAccrued(onBehalfOf, accruedRewards);\\n      stakerRewardsToClaim[onBehalfOf] = stakerRewardsToClaim[onBehalfOf].add(accruedRewards);\\n    }\\n\\n    stakersCooldowns[onBehalfOf] = getNextCooldownTimestamp(0, amount, onBehalfOf, balanceOfUser);\\n\\n    _mint(onBehalfOf, amount);\\n    IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit Staked(msg.sender, onBehalfOf, amount);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens, and stop earning rewards\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   **/\\n  function redeem(address to, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    //solium-disable-next-line\\n    uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\\n    require(\\n      block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\\n      'INSUFFICIENT_COOLDOWN'\\n    );\\n    require(\\n      block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n      'UNSTAKE_WINDOW_FINISHED'\\n    );\\n    uint256 balanceOfMessageSender = balanceOf(msg.sender);\\n\\n    uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\\n\\n    _updateCurrentUnclaimedRewards(msg.sender, balanceOfMessageSender, true);\\n\\n    _burn(msg.sender, amountToRedeem);\\n\\n    if (balanceOfMessageSender.sub(amountToRedeem) == 0) {\\n      stakersCooldowns[msg.sender] = 0;\\n    }\\n\\n    IERC20(STAKED_TOKEN).safeTransfer(to, amountToRedeem);\\n\\n    emit Redeem(msg.sender, to, amountToRedeem);\\n  }\\n\\n  /**\\n   * @dev Activates the cooldown period to unstake\\n   * - It can't be called if the user is not staking\\n   **/\\n  function cooldown() external override {\\n    require(balanceOf(msg.sender) != 0, 'INVALID_BALANCE_ON_COOLDOWN');\\n    //solium-disable-next-line\\n    stakersCooldowns[msg.sender] = block.timestamp;\\n\\n    emit Cooldown(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\\n   * @param to Address to stake for\\n   * @param amount Amount to stake\\n   **/\\n  function claimRewards(address to, uint256 amount) external override {\\n    uint256 newTotalRewards =\\n      _updateCurrentUnclaimedRewards(msg.sender, balanceOf(msg.sender), false);\\n    uint256 amountToClaim = (amount == type(uint256).max) ? newTotalRewards : amount;\\n\\n    stakerRewardsToClaim[msg.sender] = newTotalRewards.sub(amountToClaim, 'INVALID_AMOUNT');\\n\\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\\n\\n    emit RewardsClaimed(msg.sender, to, amountToClaim);\\n  }\\n\\n  /**\\n   * @dev Internal ERC20 _transfer of the tokenized staked tokens\\n   * @param from Address to transfer from\\n   * @param to Address to transfer to\\n   * @param amount Amount to transfer\\n   **/\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    uint256 balanceOfFrom = balanceOf(from);\\n    // Sender\\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\\n\\n    // Recipient\\n    if (from != to) {\\n      uint256 balanceOfTo = balanceOf(to);\\n      _updateCurrentUnclaimedRewards(to, balanceOfTo, true);\\n\\n      uint256 previousSenderCooldown = stakersCooldowns[from];\\n      stakersCooldowns[to] = getNextCooldownTimestamp(\\n        previousSenderCooldown,\\n        amount,\\n        to,\\n        balanceOfTo\\n      );\\n      // if cooldown was set and whole balance of sender was transferred - clear cooldown\\n      if (balanceOfFrom == amount && previousSenderCooldown != 0) {\\n        stakersCooldowns[from] = 0;\\n      }\\n    }\\n\\n    super._transfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Updates the user state related with his accrued rewards\\n   * @param user Address of the user\\n   * @param userBalance The current balance of the user\\n   * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\\n   * @return The unclaimed rewards that were added to the total accrued\\n   **/\\n  function _updateCurrentUnclaimedRewards(\\n    address user,\\n    uint256 userBalance,\\n    bool updateStorage\\n  ) internal returns (uint256) {\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(user, address(this), userBalance, totalSupply());\\n    uint256 unclaimedRewards = stakerRewardsToClaim[user].add(accruedRewards);\\n\\n    if (accruedRewards != 0) {\\n      if (updateStorage) {\\n        stakerRewardsToClaim[user] = unclaimedRewards;\\n      }\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n\\n    return unclaimedRewards;\\n  }\\n\\n  /**\\n   * @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\\n   *  - If the timestamp of the sender is \\\"better\\\" or the timestamp of the recipient is 0, we take the one of the recipient\\n   *  - Weighted average of from/to cooldown timestamps if:\\n   *    # The sender doesn't have the cooldown activated (timestamp 0).\\n   *    # The sender timestamp is expired\\n   *    # The sender has a \\\"worse\\\" timestamp\\n   *  - If the receiver's cooldown timestamp expired (too old), the next is 0\\n   * @param fromCooldownTimestamp Cooldown timestamp of the sender\\n   * @param amountToReceive Amount\\n   * @param toAddress Address of the recipient\\n   * @param toBalance Current balance of the receiver\\n   * @return The new cooldown timestamp\\n   **/\\n  function getNextCooldownTimestamp(\\n    uint256 fromCooldownTimestamp,\\n    uint256 amountToReceive,\\n    address toAddress,\\n    uint256 toBalance\\n  ) public view returns (uint256) {\\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\\n    if (toCooldownTimestamp == 0) {\\n      return 0;\\n    }\\n\\n    uint256 minimalValidCooldownTimestamp =\\n      block.timestamp.sub(COOLDOWN_SECONDS).sub(UNSTAKE_WINDOW);\\n\\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\\n      toCooldownTimestamp = 0;\\n    } else {\\n      uint256 fromCooldownTimestamp =\\n        (minimalValidCooldownTimestamp > fromCooldownTimestamp)\\n          ? block.timestamp\\n          : fromCooldownTimestamp;\\n\\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\\n        return toCooldownTimestamp;\\n      } else {\\n        toCooldownTimestamp = (\\n          amountToReceive.mul(fromCooldownTimestamp).add(toBalance.mul(toCooldownTimestamp))\\n        )\\n          .div(amountToReceive.add(toBalance));\\n      }\\n    }\\n    return toCooldownTimestamp;\\n  }\\n\\n  /**\\n   * @dev Return the total rewards pending to claim by an staker\\n   * @param staker The staker address\\n   * @return The rewards\\n   */\\n  function getTotalRewardsBalance(address staker) external view returns (uint256) {\\n    DistributionTypes.UserStakeInput[] memory userStakeInputs =\\n      new DistributionTypes.UserStakeInput[](1);\\n    userStakeInputs[0] = DistributionTypes.UserStakeInput({\\n      underlyingAsset: address(this),\\n      stakedByUser: balanceOf(staker),\\n      totalStaked: totalSupply()\\n    });\\n    return stakerRewardsToClaim[staker].add(_getUnclaimedRewards(staker, userStakeInputs));\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   * @return The revision\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner the owner of the funds\\n   * @param spender the spender\\n   * @param value the amount\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(owner != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    uint256 currentValidNonce = _nonces[owner];\\n    bytes32 digest =\\n      keccak256(\\n        abi.encodePacked(\\n          '\\\\x19\\\\x01',\\n          DOMAIN_SEPARATOR,\\n          keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n        )\\n      );\\n\\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _nonces[owner] = currentValidNonce.add(1);\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\\n   * - On _transfer, it writes snapshots for both \\\"from\\\" and \\\"to\\\"\\n   * - On _mint, only for _to\\n   * - On _burn, only for _from\\n   * @param from the from address\\n   * @param to the to address\\n   * @param amount the amount to transfer\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    address votingFromDelegatee = _votingDelegates[from];\\n    address votingToDelegatee = _votingDelegates[to];\\n\\n    if (votingFromDelegatee == address(0)) {\\n      votingFromDelegatee = from;\\n    }\\n    if (votingToDelegatee == address(0)) {\\n      votingToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      votingFromDelegatee,\\n      votingToDelegatee,\\n      amount,\\n      DelegationType.VOTING_POWER\\n    );\\n\\n    address propPowerFromDelegatee = _propositionPowerDelegates[from];\\n    address propPowerToDelegatee = _propositionPowerDelegates[to];\\n\\n    if (propPowerFromDelegatee == address(0)) {\\n      propPowerFromDelegatee = from;\\n    }\\n    if (propPowerToDelegatee == address(0)) {\\n      propPowerToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      propPowerFromDelegatee,\\n      propPowerToDelegatee,\\n      amount,\\n      DelegationType.PROPOSITION_POWER\\n    );\\n\\n    // caching the aave governance address to avoid multiple state loads\\n    ITransferHook aaveGovernance = _aaveGovernance;\\n    if (aaveGovernance != ITransferHook(0)) {\\n      aaveGovernance.onTransfer(from, to, amount);\\n    }\\n  }\\n\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    override\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    )\\n  {\\n    if (delegationType == DelegationType.VOTING_POWER) {\\n      return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\\n    } else {\\n      return (\\n        _propositionPowerSnapshots,\\n        _propositionPowerSnapshotsCounts,\\n        _propositionPowerDelegates\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateByTypeBySig(\\n    address delegatee,\\n    DelegationType delegationType,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash =\\n      keccak256(\\n        abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\\n      );\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(signatory, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n}\\n\",\"keccak256\":\"0x193e8dd33d55c137ea32793b1f2c2f06b4b8936ee5c625e38766062c4f89fb43\",\"license\":\"agpl-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP. From https://github.com/OpenZeppelin/openzeppelin-contracts","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP. From https://github.com/OpenZeppelin/openzeppelin-contracts\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-12-10\\n */\\n\\n// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGovernancePowerDelegationToken {\\n  enum DelegationType {VOTING_POWER, PROPOSITION_POWER}\\n\\n  /**\\n   * @dev emitted when a user delegates to another\\n   * @param delegator the delegator\\n   * @param delegatee the delegatee\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    DelegationType delegationType\\n  );\\n\\n  /**\\n   * @dev emitted when an action changes the delegated power of a user\\n   * @param user the user which delegated power has changed\\n   * @param amount the amount of delegated power for the user\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external virtual;\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (address);\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view virtual returns (uint256);\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view virtual returns (uint256);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string internal _name;\\n  string internal _symbol;\\n  uint8 private _decimals;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n   * a default value of 18.\\n   *\\n   * To select a different value for {decimals}, use {_setupDecimals}.\\n   *\\n   * All three of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name, string memory symbol) public {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = 18;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        'ERC20: decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n   *\\n   * This is internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Sets {decimals} to a value other than the default one of 18.\\n   *\\n   * WARNING: This function should only be called from the constructor. Most\\n   * applications that interact with token contracts will not expect\\n   * {decimals} to ever change, and may work incorrectly if it does.\\n   */\\n  function _setupDecimals(uint8 decimals_) internal {\\n    _decimals = decimals_;\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be to transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\\ninterface IStakedAave {\\n  function stake(address to, uint256 amount) external;\\n\\n  function redeem(address to, uint256 amount) external;\\n\\n  function cooldown() external;\\n\\n  function claimRewards(address to, uint256 amount) external;\\n}\\n\\ninterface ITransferHook {\\n  function onTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint128 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\\ninterface IAaveDistributionManager {\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external;\\n}\\n\\n/**\\n * @title AaveDistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract AaveDistributionManager is IAaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  struct AssetData {\\n    uint128 emissionPerSecond;\\n    uint128 lastUpdateTimestamp;\\n    uint256 index;\\n    mapping(address => uint256) users;\\n  }\\n\\n  uint256 public immutable DISTRIBUTION_END;\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n\\n  constructor(address emissionManager, uint256 distributionDuration) public {\\n    DISTRIBUTION_END = block.timestamp.add(distributionDuration);\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /**\\n   * @dev Configures the distribution of rewards for a list of assets\\n   * @param assetsConfigInput The list of configurations to apply\\n   **/\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external\\n    override\\n  {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address underlyingAsset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex =\\n      _getAssetIndex(oldIndex, assetConfig.emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n    if (newIndex != oldIndex) {\\n      assetConfig.index = newIndex;\\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\\n    }\\n\\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards = accruedRewards.add(\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        )\\n      );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex =\\n        _getAssetIndex(\\n          assetConfig.index,\\n          assetConfig.emissionPerSecond,\\n          assetConfig.lastUpdateTimestamp,\\n          stakes[i].totalStaked\\n        );\\n\\n      accruedRewards = accruedRewards.add(\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\\n      );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= DISTRIBUTION_END\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp =\\n      block.timestamp > DISTRIBUTION_END ? DISTRIBUTION_END : block.timestamp;\\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\\n    return\\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\\n        currentIndex\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n}\\n\\n/**\\n * @notice implementation of the AAVE token contract\\n * @author Aave\\n */\\nabstract contract GovernancePowerDelegationERC20 is ERC20, IGovernancePowerDelegationToken {\\n  using SafeMath for uint256;\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH =\\n    keccak256('DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)');\\n\\n  bytes32 public constant DELEGATE_TYPEHASH =\\n    keccak256('Delegate(address delegatee,uint256 nonce,uint256 expiry)');\\n\\n  /// @dev snapshot of a value on a specific block, used for votes\\n  struct Snapshot {\\n    uint128 blockNumber;\\n    uint128 value;\\n  }\\n\\n  /**\\n   * @dev delegates one specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external override {\\n    _delegateByType(msg.sender, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external override {\\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    return _getDelegatee(delegator, delegates);\\n  }\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\\n  }\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view override returns (uint256) {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\\n  }\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   * used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\\n   * In this initial implementation with no AAVE minting, simply returns the current supply\\n   * A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view override returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _delegateByType(\\n    address delegator,\\n    address delegatee,\\n    DelegationType delegationType\\n  ) internal {\\n    require(delegatee != address(0), 'INVALID_DELEGATEE');\\n\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    uint256 delegatorBalance = balanceOf(delegator);\\n\\n    address previousDelegatee = _getDelegatee(delegator, delegates);\\n\\n    delegates[delegator] = delegatee;\\n\\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\\n    emit DelegateChanged(delegator, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev moves delegated power from one user to another\\n   * @param from the user from which delegated power is moved\\n   * @param to the user that will receive the delegated power\\n   * @param amount the amount of delegated power to be moved\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _moveDelegatesByType(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    DelegationType delegationType\\n  ) internal {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    if (from != address(0)) {\\n      uint256 previous = 0;\\n      uint256 fromSnapshotsCount = snapshotsCounts[from];\\n\\n      if (fromSnapshotsCount != 0) {\\n        previous = snapshots[from][fromSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(from);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        from,\\n        uint128(previous),\\n        uint128(previous.sub(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(from, previous.sub(amount), delegationType);\\n    }\\n    if (to != address(0)) {\\n      uint256 previous = 0;\\n      uint256 toSnapshotsCount = snapshotsCounts[to];\\n      if (toSnapshotsCount != 0) {\\n        previous = snapshots[to][toSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(to);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        to,\\n        uint128(previous),\\n        uint128(previous.add(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(to, previous.add(amount), delegationType);\\n    }\\n  }\\n\\n  /**\\n   * @dev searches a snapshot by block number. Uses binary search.\\n   * @param snapshots the snapshots mapping\\n   * @param snapshotsCounts the number of snapshots\\n   * @param user the user for which the snapshot is being searched\\n   * @param blockNumber the block number being searched\\n   **/\\n  function _searchByBlockNumber(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address user,\\n    uint256 blockNumber\\n  ) internal view returns (uint256) {\\n    require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\\n\\n    uint256 snapshotsCount = snapshotsCounts[user];\\n\\n    if (snapshotsCount == 0) {\\n      return balanceOf(user);\\n    }\\n\\n    // First check most recent balance\\n    if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\\n      return snapshots[user][snapshotsCount - 1].value;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (snapshots[user][0].blockNumber > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint256 lower = 0;\\n    uint256 upper = snapshotsCount - 1;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Snapshot memory snapshot = snapshots[user][center];\\n      if (snapshot.blockNumber == blockNumber) {\\n        return snapshot.value;\\n      } else if (snapshot.blockNumber < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return snapshots[user][lower].value;\\n  }\\n\\n  /**\\n   * @dev returns the delegation data (snapshot, snapshotsCount, list of delegates) by delegation type\\n   * NOTE: Ideal implementation would have mapped this in a struct by delegation type. Unfortunately,\\n   * the AAVE token and StakeToken already include a mapping for the snapshots, so we require contracts\\n   * who inherit from this to provide access to the delegation data by overriding this method.\\n   * @param delegationType the type of delegation\\n   **/\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    virtual\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    );\\n\\n  /**\\n   * @dev Writes a snapshot for an owner of tokens\\n   * @param owner The owner of the tokens\\n   * @param oldValue The value before the operation that is gonna be executed after the snapshot\\n   * @param newValue The value after the operation\\n   */\\n  function _writeSnapshot(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address owner,\\n    uint128 oldValue,\\n    uint128 newValue\\n  ) internal {\\n    uint128 currentBlock = uint128(block.number);\\n\\n    uint256 ownerSnapshotsCount = snapshotsCounts[owner];\\n    mapping(uint256 => Snapshot) storage snapshotsOwner = snapshots[owner];\\n\\n    // Doing multiple operations in the same block\\n    if (\\n      ownerSnapshotsCount != 0 &&\\n      snapshotsOwner[ownerSnapshotsCount - 1].blockNumber == currentBlock\\n    ) {\\n      snapshotsOwner[ownerSnapshotsCount - 1].value = newValue;\\n    } else {\\n      snapshotsOwner[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\\n      snapshotsCounts[owner] = ownerSnapshotsCount + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the user delegatee. If a user never performed any delegation,\\n   * his delegated address will be 0x0. In that case we simply return the user itself\\n   * @param delegator the address of the user for which return the delegatee\\n   * @param delegates the array of delegates for a particular type of delegation\\n   **/\\n  function _getDelegatee(address delegator, mapping(address => address) storage delegates)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address previousDelegatee = delegates[delegator];\\n\\n    if (previousDelegatee == address(0)) {\\n      return delegator;\\n    }\\n\\n    return previousDelegatee;\\n  }\\n}\\n\\n/**\\n * @title ERC20WithSnapshot\\n * @notice ERC20 including snapshots of balances on transfer-related actions\\n * @author Aave\\n **/\\nabstract contract GovernancePowerWithSnapshot is GovernancePowerDelegationERC20 {\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @dev The following storage layout points to the prior StakedToken.sol implementation:\\n   * _snapshots => _votingSnapshots\\n   * _snapshotsCounts =>  _votingSnapshotsCounts\\n   * _aaveGovernance => _aaveGovernance\\n   */\\n  mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\\n  mapping(address => uint256) public _votingSnapshotsCounts;\\n\\n  /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\\n  /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\\n  /// to control all potential reentrancies by calling back the this contract\\n  ITransferHook public _aaveGovernance;\\n\\n  function _setAaveGovernance(ITransferHook aaveGovernance) internal virtual {\\n    _aaveGovernance = aaveGovernance;\\n  }\\n}\\n\\n/**\\n * @title StakedToken\\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\\n * @author Aave\\n **/\\ncontract StakedTokenV2Rev3 is\\n  IStakedAave,\\n  GovernancePowerWithSnapshot,\\n  VersionedInitializable,\\n  AaveDistributionManager\\n{\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev Start of Storage layout from StakedToken v1\\n  uint256 public constant REVISION = 3;\\n\\n  IERC20 public immutable STAKED_TOKEN;\\n  IERC20 public immutable REWARD_TOKEN;\\n  uint256 public immutable COOLDOWN_SECONDS;\\n\\n  /// @notice Seconds available to redeem once the cooldown period is fullfilled\\n  uint256 public immutable UNSTAKE_WINDOW;\\n\\n  /// @notice Address to pull from the rewards, needs to have approved this contract\\n  address public immutable REWARDS_VAULT;\\n\\n  mapping(address => uint256) public stakerRewardsToClaim;\\n  mapping(address => uint256) public stakersCooldowns;\\n\\n  /// @dev End of Storage layout from StakedToken v1\\n\\n  /// @dev To see the voting mappings, go to GovernancePowerWithSnapshot.sol\\n  mapping(address => address) internal _votingDelegates;\\n\\n  mapping(address => mapping(uint256 => Snapshot)) internal _propositionPowerSnapshots;\\n  mapping(address => uint256) internal _propositionPowerSnapshotsCounts;\\n  mapping(address => address) internal _propositionPowerDelegates;\\n\\n  bytes32 public DOMAIN_SEPARATOR;\\n  bytes public constant EIP712_REVISION = bytes('1');\\n  bytes32 internal constant EIP712_DOMAIN =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  /// @dev owner => next valid nonce to submit with permit()\\n  mapping(address => uint256) public _nonces;\\n\\n  event Staked(address indexed from, address indexed onBehalfOf, uint256 amount);\\n  event Redeem(address indexed from, address indexed to, uint256 amount);\\n\\n  event RewardsAccrued(address user, uint256 amount);\\n  event RewardsClaimed(address indexed from, address indexed to, uint256 amount);\\n\\n  event Cooldown(address indexed user);\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals,\\n    address governance\\n  ) public ERC20(name, symbol) AaveDistributionManager(emissionManager, distributionDuration) {\\n    STAKED_TOKEN = stakedToken;\\n    REWARD_TOKEN = rewardToken;\\n    COOLDOWN_SECONDS = cooldownSeconds;\\n    UNSTAKE_WINDOW = unstakeWindow;\\n    REWARDS_VAULT = rewardsVault;\\n    _aaveGovernance = ITransferHook(governance);\\n    ERC20._setupDecimals(decimals);\\n  }\\n\\n  /**\\n   * @dev Called by the proxy contract\\n   **/\\n  function initialize() external initializer {\\n    uint256 chainId;\\n\\n    //solium-disable-next-line\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN,\\n        keccak256(bytes(name())),\\n        keccak256(EIP712_REVISION),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n\\n    // Update lastUpdateTimestamp of stkAave to reward users since the end of the prior staking period\\n    AssetData storage assetData = assets[address(this)];\\n    assetData.lastUpdateTimestamp = 1620594720;\\n  }\\n\\n  function stake(address onBehalfOf, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    uint256 balanceOfUser = balanceOf(onBehalfOf);\\n\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(onBehalfOf, address(this), balanceOfUser, totalSupply());\\n    if (accruedRewards != 0) {\\n      emit RewardsAccrued(onBehalfOf, accruedRewards);\\n      stakerRewardsToClaim[onBehalfOf] = stakerRewardsToClaim[onBehalfOf].add(accruedRewards);\\n    }\\n\\n    stakersCooldowns[onBehalfOf] = getNextCooldownTimestamp(0, amount, onBehalfOf, balanceOfUser);\\n\\n    _mint(onBehalfOf, amount);\\n    IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit Staked(msg.sender, onBehalfOf, amount);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens, and stop earning rewards\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   **/\\n  function redeem(address to, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    //solium-disable-next-line\\n    uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\\n    require(\\n      block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\\n      'INSUFFICIENT_COOLDOWN'\\n    );\\n    require(\\n      block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n      'UNSTAKE_WINDOW_FINISHED'\\n    );\\n    uint256 balanceOfMessageSender = balanceOf(msg.sender);\\n\\n    uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\\n\\n    _updateCurrentUnclaimedRewards(msg.sender, balanceOfMessageSender, true);\\n\\n    _burn(msg.sender, amountToRedeem);\\n\\n    if (balanceOfMessageSender.sub(amountToRedeem) == 0) {\\n      stakersCooldowns[msg.sender] = 0;\\n    }\\n\\n    IERC20(STAKED_TOKEN).safeTransfer(to, amountToRedeem);\\n\\n    emit Redeem(msg.sender, to, amountToRedeem);\\n  }\\n\\n  /**\\n   * @dev Activates the cooldown period to unstake\\n   * - It can't be called if the user is not staking\\n   **/\\n  function cooldown() external override {\\n    require(balanceOf(msg.sender) != 0, 'INVALID_BALANCE_ON_COOLDOWN');\\n    //solium-disable-next-line\\n    stakersCooldowns[msg.sender] = block.timestamp;\\n\\n    emit Cooldown(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\\n   * @param to Address to stake for\\n   * @param amount Amount to stake\\n   **/\\n  function claimRewards(address to, uint256 amount) external override {\\n    uint256 newTotalRewards =\\n      _updateCurrentUnclaimedRewards(msg.sender, balanceOf(msg.sender), false);\\n    uint256 amountToClaim = (amount == type(uint256).max) ? newTotalRewards : amount;\\n\\n    stakerRewardsToClaim[msg.sender] = newTotalRewards.sub(amountToClaim, 'INVALID_AMOUNT');\\n\\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\\n\\n    emit RewardsClaimed(msg.sender, to, amountToClaim);\\n  }\\n\\n  /**\\n   * @dev Internal ERC20 _transfer of the tokenized staked tokens\\n   * @param from Address to transfer from\\n   * @param to Address to transfer to\\n   * @param amount Amount to transfer\\n   **/\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    uint256 balanceOfFrom = balanceOf(from);\\n    // Sender\\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\\n\\n    // Recipient\\n    if (from != to) {\\n      uint256 balanceOfTo = balanceOf(to);\\n      _updateCurrentUnclaimedRewards(to, balanceOfTo, true);\\n\\n      uint256 previousSenderCooldown = stakersCooldowns[from];\\n      stakersCooldowns[to] = getNextCooldownTimestamp(\\n        previousSenderCooldown,\\n        amount,\\n        to,\\n        balanceOfTo\\n      );\\n      // if cooldown was set and whole balance of sender was transferred - clear cooldown\\n      if (balanceOfFrom == amount && previousSenderCooldown != 0) {\\n        stakersCooldowns[from] = 0;\\n      }\\n    }\\n\\n    super._transfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Updates the user state related with his accrued rewards\\n   * @param user Address of the user\\n   * @param userBalance The current balance of the user\\n   * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\\n   * @return The unclaimed rewards that were added to the total accrued\\n   **/\\n  function _updateCurrentUnclaimedRewards(\\n    address user,\\n    uint256 userBalance,\\n    bool updateStorage\\n  ) internal returns (uint256) {\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(user, address(this), userBalance, totalSupply());\\n    uint256 unclaimedRewards = stakerRewardsToClaim[user].add(accruedRewards);\\n\\n    if (accruedRewards != 0) {\\n      if (updateStorage) {\\n        stakerRewardsToClaim[user] = unclaimedRewards;\\n      }\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n\\n    return unclaimedRewards;\\n  }\\n\\n  /**\\n   * @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\\n   *  - If the timestamp of the sender is \\\"better\\\" or the timestamp of the recipient is 0, we take the one of the recipient\\n   *  - Weighted average of from/to cooldown timestamps if:\\n   *    # The sender doesn't have the cooldown activated (timestamp 0).\\n   *    # The sender timestamp is expired\\n   *    # The sender has a \\\"worse\\\" timestamp\\n   *  - If the receiver's cooldown timestamp expired (too old), the next is 0\\n   * @param fromCooldownTimestamp Cooldown timestamp of the sender\\n   * @param amountToReceive Amount\\n   * @param toAddress Address of the recipient\\n   * @param toBalance Current balance of the receiver\\n   * @return The new cooldown timestamp\\n   **/\\n  function getNextCooldownTimestamp(\\n    uint256 fromCooldownTimestamp,\\n    uint256 amountToReceive,\\n    address toAddress,\\n    uint256 toBalance\\n  ) public view returns (uint256) {\\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\\n    if (toCooldownTimestamp == 0) {\\n      return 0;\\n    }\\n\\n    uint256 minimalValidCooldownTimestamp =\\n      block.timestamp.sub(COOLDOWN_SECONDS).sub(UNSTAKE_WINDOW);\\n\\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\\n      toCooldownTimestamp = 0;\\n    } else {\\n      uint256 fromCooldownTimestamp =\\n        (minimalValidCooldownTimestamp > fromCooldownTimestamp)\\n          ? block.timestamp\\n          : fromCooldownTimestamp;\\n\\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\\n        return toCooldownTimestamp;\\n      } else {\\n        toCooldownTimestamp = (\\n          amountToReceive.mul(fromCooldownTimestamp).add(toBalance.mul(toCooldownTimestamp))\\n        )\\n          .div(amountToReceive.add(toBalance));\\n      }\\n    }\\n    return toCooldownTimestamp;\\n  }\\n\\n  /**\\n   * @dev Return the total rewards pending to claim by an staker\\n   * @param staker The staker address\\n   * @return The rewards\\n   */\\n  function getTotalRewardsBalance(address staker) external view returns (uint256) {\\n    DistributionTypes.UserStakeInput[] memory userStakeInputs =\\n      new DistributionTypes.UserStakeInput[](1);\\n    userStakeInputs[0] = DistributionTypes.UserStakeInput({\\n      underlyingAsset: address(this),\\n      stakedByUser: balanceOf(staker),\\n      totalStaked: totalSupply()\\n    });\\n    return stakerRewardsToClaim[staker].add(_getUnclaimedRewards(staker, userStakeInputs));\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   * @return The revision\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner the owner of the funds\\n   * @param spender the spender\\n   * @param value the amount\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(owner != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    uint256 currentValidNonce = _nonces[owner];\\n    bytes32 digest =\\n      keccak256(\\n        abi.encodePacked(\\n          '\\\\x19\\\\x01',\\n          DOMAIN_SEPARATOR,\\n          keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n        )\\n      );\\n\\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _nonces[owner] = currentValidNonce.add(1);\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\\n   * - On _transfer, it writes snapshots for both \\\"from\\\" and \\\"to\\\"\\n   * - On _mint, only for _to\\n   * - On _burn, only for _from\\n   * @param from the from address\\n   * @param to the to address\\n   * @param amount the amount to transfer\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    address votingFromDelegatee = _votingDelegates[from];\\n    address votingToDelegatee = _votingDelegates[to];\\n\\n    if (votingFromDelegatee == address(0)) {\\n      votingFromDelegatee = from;\\n    }\\n    if (votingToDelegatee == address(0)) {\\n      votingToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      votingFromDelegatee,\\n      votingToDelegatee,\\n      amount,\\n      DelegationType.VOTING_POWER\\n    );\\n\\n    address propPowerFromDelegatee = _propositionPowerDelegates[from];\\n    address propPowerToDelegatee = _propositionPowerDelegates[to];\\n\\n    if (propPowerFromDelegatee == address(0)) {\\n      propPowerFromDelegatee = from;\\n    }\\n    if (propPowerToDelegatee == address(0)) {\\n      propPowerToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      propPowerFromDelegatee,\\n      propPowerToDelegatee,\\n      amount,\\n      DelegationType.PROPOSITION_POWER\\n    );\\n\\n    // caching the aave governance address to avoid multiple state loads\\n    ITransferHook aaveGovernance = _aaveGovernance;\\n    if (aaveGovernance != ITransferHook(0)) {\\n      aaveGovernance.onTransfer(from, to, amount);\\n    }\\n  }\\n\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    override\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    )\\n  {\\n    if (delegationType == DelegationType.VOTING_POWER) {\\n      return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\\n    } else {\\n      return (\\n        _propositionPowerSnapshots,\\n        _propositionPowerSnapshotsCounts,\\n        _propositionPowerDelegates\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateByTypeBySig(\\n    address delegatee,\\n    DelegationType delegationType,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash =\\n      keccak256(\\n        abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\\n      );\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(signatory, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n}\\n\",\"keccak256\":\"0x193e8dd33d55c137ea32793b1f2c2f06b4b8936ee5c625e38766062c4f89fb43\",\"license\":\"agpl-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IGovernancePowerDelegationToken":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"delegator","type":"address"},{"indexed":true,"internalType":"address","name":"delegatee","type":"address"},{"indexed":false,"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"DelegateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"DelegatedPowerChanged","type":"event"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"}],"name":"delegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"},{"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"delegateByType","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegator","type":"address"},{"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"getDelegateeByType","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"getPowerAtBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"getPowerCurrent","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"name":"totalSupplyAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"DelegateChanged(address,address,uint8)":{"details":"emitted when a user delegates to another","params":{"delegatee":"the delegatee","delegationType":"the type of delegation (VOTING_POWER, PROPOSITION_POWER)*","delegator":"the delegator"}},"DelegatedPowerChanged(address,uint256,uint8)":{"details":"emitted when an action changes the delegated power of a user","params":{"amount":"the amount of delegated power for the user","delegationType":"the type of delegation (VOTING_POWER, PROPOSITION_POWER)*","user":"the user which delegated power has changed"}}},"kind":"dev","methods":{"delegate(address)":{"details":"delegates all the powers to a specific user","params":{"delegatee":"the user to which the power will be delegated*"}},"delegateByType(address,uint8)":{"details":"delegates the specific power to a delegatee","params":{"delegatee":"the user which delegated power has changed","delegationType":"the type of delegation (VOTING_POWER, PROPOSITION_POWER)*"}},"getDelegateeByType(address,uint8)":{"details":"returns the delegatee of an user","params":{"delegator":"the address of the delegator*"}},"getPowerAtBlock(address,uint256,uint8)":{"details":"returns the delegated power of a user at a certain block","params":{"user":"the user*"}},"getPowerCurrent(address,uint8)":{"details":"returns the current delegated power of a user. The current power is the power delegated at the time of the last snapshot","params":{"user":"the user*"}},"totalSupplyAt(uint256)":{"details":"returns the total supply at a certain block number*"}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"delegate(address)":"5c19a95c","delegateByType(address,uint8)":"dc937e1c","getDelegateeByType(address,uint8)":"6f50458d","getPowerAtBlock(address,uint256,uint8)":"c2ffbb91","getPowerCurrent(address,uint8)":"b2f4201d","totalSupplyAt(uint256)":"981b24d0"}},"metadata":"{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"DelegatedPowerChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"delegateByType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getDelegateeByType\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getPowerAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getPowerCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DelegateChanged(address,address,uint8)\":{\"details\":\"emitted when a user delegates to another\",\"params\":{\"delegatee\":\"the delegatee\",\"delegationType\":\"the type of delegation (VOTING_POWER, PROPOSITION_POWER)*\",\"delegator\":\"the delegator\"}},\"DelegatedPowerChanged(address,uint256,uint8)\":{\"details\":\"emitted when an action changes the delegated power of a user\",\"params\":{\"amount\":\"the amount of delegated power for the user\",\"delegationType\":\"the type of delegation (VOTING_POWER, PROPOSITION_POWER)*\",\"user\":\"the user which delegated power has changed\"}}},\"kind\":\"dev\",\"methods\":{\"delegate(address)\":{\"details\":\"delegates all the powers to a specific user\",\"params\":{\"delegatee\":\"the user to which the power will be delegated*\"}},\"delegateByType(address,uint8)\":{\"details\":\"delegates the specific power to a delegatee\",\"params\":{\"delegatee\":\"the user which delegated power has changed\",\"delegationType\":\"the type of delegation (VOTING_POWER, PROPOSITION_POWER)*\"}},\"getDelegateeByType(address,uint8)\":{\"details\":\"returns the delegatee of an user\",\"params\":{\"delegator\":\"the address of the delegator*\"}},\"getPowerAtBlock(address,uint256,uint8)\":{\"details\":\"returns the delegated power of a user at a certain block\",\"params\":{\"user\":\"the user*\"}},\"getPowerCurrent(address,uint8)\":{\"details\":\"returns the current delegated power of a user. The current power is the power delegated at the time of the last snapshot\",\"params\":{\"user\":\"the user*\"}},\"totalSupplyAt(uint256)\":{\"details\":\"returns the total supply at a certain block number*\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":\"IGovernancePowerDelegationToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-12-10\\n */\\n\\n// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGovernancePowerDelegationToken {\\n  enum DelegationType {VOTING_POWER, PROPOSITION_POWER}\\n\\n  /**\\n   * @dev emitted when a user delegates to another\\n   * @param delegator the delegator\\n   * @param delegatee the delegatee\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    DelegationType delegationType\\n  );\\n\\n  /**\\n   * @dev emitted when an action changes the delegated power of a user\\n   * @param user the user which delegated power has changed\\n   * @param amount the amount of delegated power for the user\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external virtual;\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (address);\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view virtual returns (uint256);\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view virtual returns (uint256);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string internal _name;\\n  string internal _symbol;\\n  uint8 private _decimals;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n   * a default value of 18.\\n   *\\n   * To select a different value for {decimals}, use {_setupDecimals}.\\n   *\\n   * All three of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name, string memory symbol) public {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = 18;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        'ERC20: decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n   *\\n   * This is internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Sets {decimals} to a value other than the default one of 18.\\n   *\\n   * WARNING: This function should only be called from the constructor. Most\\n   * applications that interact with token contracts will not expect\\n   * {decimals} to ever change, and may work incorrectly if it does.\\n   */\\n  function _setupDecimals(uint8 decimals_) internal {\\n    _decimals = decimals_;\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be to transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\\ninterface IStakedAave {\\n  function stake(address to, uint256 amount) external;\\n\\n  function redeem(address to, uint256 amount) external;\\n\\n  function cooldown() external;\\n\\n  function claimRewards(address to, uint256 amount) external;\\n}\\n\\ninterface ITransferHook {\\n  function onTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint128 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\\ninterface IAaveDistributionManager {\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external;\\n}\\n\\n/**\\n * @title AaveDistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract AaveDistributionManager is IAaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  struct AssetData {\\n    uint128 emissionPerSecond;\\n    uint128 lastUpdateTimestamp;\\n    uint256 index;\\n    mapping(address => uint256) users;\\n  }\\n\\n  uint256 public immutable DISTRIBUTION_END;\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n\\n  constructor(address emissionManager, uint256 distributionDuration) public {\\n    DISTRIBUTION_END = block.timestamp.add(distributionDuration);\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /**\\n   * @dev Configures the distribution of rewards for a list of assets\\n   * @param assetsConfigInput The list of configurations to apply\\n   **/\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external\\n    override\\n  {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address underlyingAsset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex =\\n      _getAssetIndex(oldIndex, assetConfig.emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n    if (newIndex != oldIndex) {\\n      assetConfig.index = newIndex;\\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\\n    }\\n\\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards = accruedRewards.add(\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        )\\n      );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex =\\n        _getAssetIndex(\\n          assetConfig.index,\\n          assetConfig.emissionPerSecond,\\n          assetConfig.lastUpdateTimestamp,\\n          stakes[i].totalStaked\\n        );\\n\\n      accruedRewards = accruedRewards.add(\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\\n      );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= DISTRIBUTION_END\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp =\\n      block.timestamp > DISTRIBUTION_END ? DISTRIBUTION_END : block.timestamp;\\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\\n    return\\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\\n        currentIndex\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n}\\n\\n/**\\n * @notice implementation of the AAVE token contract\\n * @author Aave\\n */\\nabstract contract GovernancePowerDelegationERC20 is ERC20, IGovernancePowerDelegationToken {\\n  using SafeMath for uint256;\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH =\\n    keccak256('DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)');\\n\\n  bytes32 public constant DELEGATE_TYPEHASH =\\n    keccak256('Delegate(address delegatee,uint256 nonce,uint256 expiry)');\\n\\n  /// @dev snapshot of a value on a specific block, used for votes\\n  struct Snapshot {\\n    uint128 blockNumber;\\n    uint128 value;\\n  }\\n\\n  /**\\n   * @dev delegates one specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external override {\\n    _delegateByType(msg.sender, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external override {\\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    return _getDelegatee(delegator, delegates);\\n  }\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\\n  }\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view override returns (uint256) {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\\n  }\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   * used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\\n   * In this initial implementation with no AAVE minting, simply returns the current supply\\n   * A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view override returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _delegateByType(\\n    address delegator,\\n    address delegatee,\\n    DelegationType delegationType\\n  ) internal {\\n    require(delegatee != address(0), 'INVALID_DELEGATEE');\\n\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    uint256 delegatorBalance = balanceOf(delegator);\\n\\n    address previousDelegatee = _getDelegatee(delegator, delegates);\\n\\n    delegates[delegator] = delegatee;\\n\\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\\n    emit DelegateChanged(delegator, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev moves delegated power from one user to another\\n   * @param from the user from which delegated power is moved\\n   * @param to the user that will receive the delegated power\\n   * @param amount the amount of delegated power to be moved\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _moveDelegatesByType(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    DelegationType delegationType\\n  ) internal {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    if (from != address(0)) {\\n      uint256 previous = 0;\\n      uint256 fromSnapshotsCount = snapshotsCounts[from];\\n\\n      if (fromSnapshotsCount != 0) {\\n        previous = snapshots[from][fromSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(from);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        from,\\n        uint128(previous),\\n        uint128(previous.sub(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(from, previous.sub(amount), delegationType);\\n    }\\n    if (to != address(0)) {\\n      uint256 previous = 0;\\n      uint256 toSnapshotsCount = snapshotsCounts[to];\\n      if (toSnapshotsCount != 0) {\\n        previous = snapshots[to][toSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(to);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        to,\\n        uint128(previous),\\n        uint128(previous.add(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(to, previous.add(amount), delegationType);\\n    }\\n  }\\n\\n  /**\\n   * @dev searches a snapshot by block number. Uses binary search.\\n   * @param snapshots the snapshots mapping\\n   * @param snapshotsCounts the number of snapshots\\n   * @param user the user for which the snapshot is being searched\\n   * @param blockNumber the block number being searched\\n   **/\\n  function _searchByBlockNumber(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address user,\\n    uint256 blockNumber\\n  ) internal view returns (uint256) {\\n    require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\\n\\n    uint256 snapshotsCount = snapshotsCounts[user];\\n\\n    if (snapshotsCount == 0) {\\n      return balanceOf(user);\\n    }\\n\\n    // First check most recent balance\\n    if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\\n      return snapshots[user][snapshotsCount - 1].value;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (snapshots[user][0].blockNumber > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint256 lower = 0;\\n    uint256 upper = snapshotsCount - 1;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Snapshot memory snapshot = snapshots[user][center];\\n      if (snapshot.blockNumber == blockNumber) {\\n        return snapshot.value;\\n      } else if (snapshot.blockNumber < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return snapshots[user][lower].value;\\n  }\\n\\n  /**\\n   * @dev returns the delegation data (snapshot, snapshotsCount, list of delegates) by delegation type\\n   * NOTE: Ideal implementation would have mapped this in a struct by delegation type. Unfortunately,\\n   * the AAVE token and StakeToken already include a mapping for the snapshots, so we require contracts\\n   * who inherit from this to provide access to the delegation data by overriding this method.\\n   * @param delegationType the type of delegation\\n   **/\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    virtual\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    );\\n\\n  /**\\n   * @dev Writes a snapshot for an owner of tokens\\n   * @param owner The owner of the tokens\\n   * @param oldValue The value before the operation that is gonna be executed after the snapshot\\n   * @param newValue The value after the operation\\n   */\\n  function _writeSnapshot(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address owner,\\n    uint128 oldValue,\\n    uint128 newValue\\n  ) internal {\\n    uint128 currentBlock = uint128(block.number);\\n\\n    uint256 ownerSnapshotsCount = snapshotsCounts[owner];\\n    mapping(uint256 => Snapshot) storage snapshotsOwner = snapshots[owner];\\n\\n    // Doing multiple operations in the same block\\n    if (\\n      ownerSnapshotsCount != 0 &&\\n      snapshotsOwner[ownerSnapshotsCount - 1].blockNumber == currentBlock\\n    ) {\\n      snapshotsOwner[ownerSnapshotsCount - 1].value = newValue;\\n    } else {\\n      snapshotsOwner[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\\n      snapshotsCounts[owner] = ownerSnapshotsCount + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the user delegatee. If a user never performed any delegation,\\n   * his delegated address will be 0x0. In that case we simply return the user itself\\n   * @param delegator the address of the user for which return the delegatee\\n   * @param delegates the array of delegates for a particular type of delegation\\n   **/\\n  function _getDelegatee(address delegator, mapping(address => address) storage delegates)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address previousDelegatee = delegates[delegator];\\n\\n    if (previousDelegatee == address(0)) {\\n      return delegator;\\n    }\\n\\n    return previousDelegatee;\\n  }\\n}\\n\\n/**\\n * @title ERC20WithSnapshot\\n * @notice ERC20 including snapshots of balances on transfer-related actions\\n * @author Aave\\n **/\\nabstract contract GovernancePowerWithSnapshot is GovernancePowerDelegationERC20 {\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @dev The following storage layout points to the prior StakedToken.sol implementation:\\n   * _snapshots => _votingSnapshots\\n   * _snapshotsCounts =>  _votingSnapshotsCounts\\n   * _aaveGovernance => _aaveGovernance\\n   */\\n  mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\\n  mapping(address => uint256) public _votingSnapshotsCounts;\\n\\n  /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\\n  /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\\n  /// to control all potential reentrancies by calling back the this contract\\n  ITransferHook public _aaveGovernance;\\n\\n  function _setAaveGovernance(ITransferHook aaveGovernance) internal virtual {\\n    _aaveGovernance = aaveGovernance;\\n  }\\n}\\n\\n/**\\n * @title StakedToken\\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\\n * @author Aave\\n **/\\ncontract StakedTokenV2Rev3 is\\n  IStakedAave,\\n  GovernancePowerWithSnapshot,\\n  VersionedInitializable,\\n  AaveDistributionManager\\n{\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev Start of Storage layout from StakedToken v1\\n  uint256 public constant REVISION = 3;\\n\\n  IERC20 public immutable STAKED_TOKEN;\\n  IERC20 public immutable REWARD_TOKEN;\\n  uint256 public immutable COOLDOWN_SECONDS;\\n\\n  /// @notice Seconds available to redeem once the cooldown period is fullfilled\\n  uint256 public immutable UNSTAKE_WINDOW;\\n\\n  /// @notice Address to pull from the rewards, needs to have approved this contract\\n  address public immutable REWARDS_VAULT;\\n\\n  mapping(address => uint256) public stakerRewardsToClaim;\\n  mapping(address => uint256) public stakersCooldowns;\\n\\n  /// @dev End of Storage layout from StakedToken v1\\n\\n  /// @dev To see the voting mappings, go to GovernancePowerWithSnapshot.sol\\n  mapping(address => address) internal _votingDelegates;\\n\\n  mapping(address => mapping(uint256 => Snapshot)) internal _propositionPowerSnapshots;\\n  mapping(address => uint256) internal _propositionPowerSnapshotsCounts;\\n  mapping(address => address) internal _propositionPowerDelegates;\\n\\n  bytes32 public DOMAIN_SEPARATOR;\\n  bytes public constant EIP712_REVISION = bytes('1');\\n  bytes32 internal constant EIP712_DOMAIN =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  /// @dev owner => next valid nonce to submit with permit()\\n  mapping(address => uint256) public _nonces;\\n\\n  event Staked(address indexed from, address indexed onBehalfOf, uint256 amount);\\n  event Redeem(address indexed from, address indexed to, uint256 amount);\\n\\n  event RewardsAccrued(address user, uint256 amount);\\n  event RewardsClaimed(address indexed from, address indexed to, uint256 amount);\\n\\n  event Cooldown(address indexed user);\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals,\\n    address governance\\n  ) public ERC20(name, symbol) AaveDistributionManager(emissionManager, distributionDuration) {\\n    STAKED_TOKEN = stakedToken;\\n    REWARD_TOKEN = rewardToken;\\n    COOLDOWN_SECONDS = cooldownSeconds;\\n    UNSTAKE_WINDOW = unstakeWindow;\\n    REWARDS_VAULT = rewardsVault;\\n    _aaveGovernance = ITransferHook(governance);\\n    ERC20._setupDecimals(decimals);\\n  }\\n\\n  /**\\n   * @dev Called by the proxy contract\\n   **/\\n  function initialize() external initializer {\\n    uint256 chainId;\\n\\n    //solium-disable-next-line\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN,\\n        keccak256(bytes(name())),\\n        keccak256(EIP712_REVISION),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n\\n    // Update lastUpdateTimestamp of stkAave to reward users since the end of the prior staking period\\n    AssetData storage assetData = assets[address(this)];\\n    assetData.lastUpdateTimestamp = 1620594720;\\n  }\\n\\n  function stake(address onBehalfOf, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    uint256 balanceOfUser = balanceOf(onBehalfOf);\\n\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(onBehalfOf, address(this), balanceOfUser, totalSupply());\\n    if (accruedRewards != 0) {\\n      emit RewardsAccrued(onBehalfOf, accruedRewards);\\n      stakerRewardsToClaim[onBehalfOf] = stakerRewardsToClaim[onBehalfOf].add(accruedRewards);\\n    }\\n\\n    stakersCooldowns[onBehalfOf] = getNextCooldownTimestamp(0, amount, onBehalfOf, balanceOfUser);\\n\\n    _mint(onBehalfOf, amount);\\n    IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit Staked(msg.sender, onBehalfOf, amount);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens, and stop earning rewards\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   **/\\n  function redeem(address to, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    //solium-disable-next-line\\n    uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\\n    require(\\n      block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\\n      'INSUFFICIENT_COOLDOWN'\\n    );\\n    require(\\n      block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n      'UNSTAKE_WINDOW_FINISHED'\\n    );\\n    uint256 balanceOfMessageSender = balanceOf(msg.sender);\\n\\n    uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\\n\\n    _updateCurrentUnclaimedRewards(msg.sender, balanceOfMessageSender, true);\\n\\n    _burn(msg.sender, amountToRedeem);\\n\\n    if (balanceOfMessageSender.sub(amountToRedeem) == 0) {\\n      stakersCooldowns[msg.sender] = 0;\\n    }\\n\\n    IERC20(STAKED_TOKEN).safeTransfer(to, amountToRedeem);\\n\\n    emit Redeem(msg.sender, to, amountToRedeem);\\n  }\\n\\n  /**\\n   * @dev Activates the cooldown period to unstake\\n   * - It can't be called if the user is not staking\\n   **/\\n  function cooldown() external override {\\n    require(balanceOf(msg.sender) != 0, 'INVALID_BALANCE_ON_COOLDOWN');\\n    //solium-disable-next-line\\n    stakersCooldowns[msg.sender] = block.timestamp;\\n\\n    emit Cooldown(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\\n   * @param to Address to stake for\\n   * @param amount Amount to stake\\n   **/\\n  function claimRewards(address to, uint256 amount) external override {\\n    uint256 newTotalRewards =\\n      _updateCurrentUnclaimedRewards(msg.sender, balanceOf(msg.sender), false);\\n    uint256 amountToClaim = (amount == type(uint256).max) ? newTotalRewards : amount;\\n\\n    stakerRewardsToClaim[msg.sender] = newTotalRewards.sub(amountToClaim, 'INVALID_AMOUNT');\\n\\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\\n\\n    emit RewardsClaimed(msg.sender, to, amountToClaim);\\n  }\\n\\n  /**\\n   * @dev Internal ERC20 _transfer of the tokenized staked tokens\\n   * @param from Address to transfer from\\n   * @param to Address to transfer to\\n   * @param amount Amount to transfer\\n   **/\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    uint256 balanceOfFrom = balanceOf(from);\\n    // Sender\\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\\n\\n    // Recipient\\n    if (from != to) {\\n      uint256 balanceOfTo = balanceOf(to);\\n      _updateCurrentUnclaimedRewards(to, balanceOfTo, true);\\n\\n      uint256 previousSenderCooldown = stakersCooldowns[from];\\n      stakersCooldowns[to] = getNextCooldownTimestamp(\\n        previousSenderCooldown,\\n        amount,\\n        to,\\n        balanceOfTo\\n      );\\n      // if cooldown was set and whole balance of sender was transferred - clear cooldown\\n      if (balanceOfFrom == amount && previousSenderCooldown != 0) {\\n        stakersCooldowns[from] = 0;\\n      }\\n    }\\n\\n    super._transfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Updates the user state related with his accrued rewards\\n   * @param user Address of the user\\n   * @param userBalance The current balance of the user\\n   * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\\n   * @return The unclaimed rewards that were added to the total accrued\\n   **/\\n  function _updateCurrentUnclaimedRewards(\\n    address user,\\n    uint256 userBalance,\\n    bool updateStorage\\n  ) internal returns (uint256) {\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(user, address(this), userBalance, totalSupply());\\n    uint256 unclaimedRewards = stakerRewardsToClaim[user].add(accruedRewards);\\n\\n    if (accruedRewards != 0) {\\n      if (updateStorage) {\\n        stakerRewardsToClaim[user] = unclaimedRewards;\\n      }\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n\\n    return unclaimedRewards;\\n  }\\n\\n  /**\\n   * @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\\n   *  - If the timestamp of the sender is \\\"better\\\" or the timestamp of the recipient is 0, we take the one of the recipient\\n   *  - Weighted average of from/to cooldown timestamps if:\\n   *    # The sender doesn't have the cooldown activated (timestamp 0).\\n   *    # The sender timestamp is expired\\n   *    # The sender has a \\\"worse\\\" timestamp\\n   *  - If the receiver's cooldown timestamp expired (too old), the next is 0\\n   * @param fromCooldownTimestamp Cooldown timestamp of the sender\\n   * @param amountToReceive Amount\\n   * @param toAddress Address of the recipient\\n   * @param toBalance Current balance of the receiver\\n   * @return The new cooldown timestamp\\n   **/\\n  function getNextCooldownTimestamp(\\n    uint256 fromCooldownTimestamp,\\n    uint256 amountToReceive,\\n    address toAddress,\\n    uint256 toBalance\\n  ) public view returns (uint256) {\\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\\n    if (toCooldownTimestamp == 0) {\\n      return 0;\\n    }\\n\\n    uint256 minimalValidCooldownTimestamp =\\n      block.timestamp.sub(COOLDOWN_SECONDS).sub(UNSTAKE_WINDOW);\\n\\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\\n      toCooldownTimestamp = 0;\\n    } else {\\n      uint256 fromCooldownTimestamp =\\n        (minimalValidCooldownTimestamp > fromCooldownTimestamp)\\n          ? block.timestamp\\n          : fromCooldownTimestamp;\\n\\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\\n        return toCooldownTimestamp;\\n      } else {\\n        toCooldownTimestamp = (\\n          amountToReceive.mul(fromCooldownTimestamp).add(toBalance.mul(toCooldownTimestamp))\\n        )\\n          .div(amountToReceive.add(toBalance));\\n      }\\n    }\\n    return toCooldownTimestamp;\\n  }\\n\\n  /**\\n   * @dev Return the total rewards pending to claim by an staker\\n   * @param staker The staker address\\n   * @return The rewards\\n   */\\n  function getTotalRewardsBalance(address staker) external view returns (uint256) {\\n    DistributionTypes.UserStakeInput[] memory userStakeInputs =\\n      new DistributionTypes.UserStakeInput[](1);\\n    userStakeInputs[0] = DistributionTypes.UserStakeInput({\\n      underlyingAsset: address(this),\\n      stakedByUser: balanceOf(staker),\\n      totalStaked: totalSupply()\\n    });\\n    return stakerRewardsToClaim[staker].add(_getUnclaimedRewards(staker, userStakeInputs));\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   * @return The revision\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner the owner of the funds\\n   * @param spender the spender\\n   * @param value the amount\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(owner != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    uint256 currentValidNonce = _nonces[owner];\\n    bytes32 digest =\\n      keccak256(\\n        abi.encodePacked(\\n          '\\\\x19\\\\x01',\\n          DOMAIN_SEPARATOR,\\n          keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n        )\\n      );\\n\\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _nonces[owner] = currentValidNonce.add(1);\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\\n   * - On _transfer, it writes snapshots for both \\\"from\\\" and \\\"to\\\"\\n   * - On _mint, only for _to\\n   * - On _burn, only for _from\\n   * @param from the from address\\n   * @param to the to address\\n   * @param amount the amount to transfer\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    address votingFromDelegatee = _votingDelegates[from];\\n    address votingToDelegatee = _votingDelegates[to];\\n\\n    if (votingFromDelegatee == address(0)) {\\n      votingFromDelegatee = from;\\n    }\\n    if (votingToDelegatee == address(0)) {\\n      votingToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      votingFromDelegatee,\\n      votingToDelegatee,\\n      amount,\\n      DelegationType.VOTING_POWER\\n    );\\n\\n    address propPowerFromDelegatee = _propositionPowerDelegates[from];\\n    address propPowerToDelegatee = _propositionPowerDelegates[to];\\n\\n    if (propPowerFromDelegatee == address(0)) {\\n      propPowerFromDelegatee = from;\\n    }\\n    if (propPowerToDelegatee == address(0)) {\\n      propPowerToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      propPowerFromDelegatee,\\n      propPowerToDelegatee,\\n      amount,\\n      DelegationType.PROPOSITION_POWER\\n    );\\n\\n    // caching the aave governance address to avoid multiple state loads\\n    ITransferHook aaveGovernance = _aaveGovernance;\\n    if (aaveGovernance != ITransferHook(0)) {\\n      aaveGovernance.onTransfer(from, to, amount);\\n    }\\n  }\\n\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    override\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    )\\n  {\\n    if (delegationType == DelegationType.VOTING_POWER) {\\n      return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\\n    } else {\\n      return (\\n        _propositionPowerSnapshots,\\n        _propositionPowerSnapshotsCounts,\\n        _propositionPowerDelegates\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateByTypeBySig(\\n    address delegatee,\\n    DelegationType delegationType,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash =\\n      keccak256(\\n        abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\\n      );\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(signatory, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n}\\n\",\"keccak256\":\"0x193e8dd33d55c137ea32793b1f2c2f06b4b8936ee5c625e38766062c4f89fb43\",\"license\":\"agpl-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IStakedAave":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"claimRewards","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"cooldown","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"redeem","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"stake","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"claimRewards(address,uint256)":"9a99b4f0","cooldown()":"787a08a6","redeem(address,uint256)":"1e9a6950","stake(address,uint256)":"adc9772e"}},"metadata":"{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":\"IStakedAave\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-12-10\\n */\\n\\n// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGovernancePowerDelegationToken {\\n  enum DelegationType {VOTING_POWER, PROPOSITION_POWER}\\n\\n  /**\\n   * @dev emitted when a user delegates to another\\n   * @param delegator the delegator\\n   * @param delegatee the delegatee\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    DelegationType delegationType\\n  );\\n\\n  /**\\n   * @dev emitted when an action changes the delegated power of a user\\n   * @param user the user which delegated power has changed\\n   * @param amount the amount of delegated power for the user\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external virtual;\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (address);\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view virtual returns (uint256);\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view virtual returns (uint256);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string internal _name;\\n  string internal _symbol;\\n  uint8 private _decimals;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n   * a default value of 18.\\n   *\\n   * To select a different value for {decimals}, use {_setupDecimals}.\\n   *\\n   * All three of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name, string memory symbol) public {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = 18;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        'ERC20: decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n   *\\n   * This is internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Sets {decimals} to a value other than the default one of 18.\\n   *\\n   * WARNING: This function should only be called from the constructor. Most\\n   * applications that interact with token contracts will not expect\\n   * {decimals} to ever change, and may work incorrectly if it does.\\n   */\\n  function _setupDecimals(uint8 decimals_) internal {\\n    _decimals = decimals_;\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be to transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\\ninterface IStakedAave {\\n  function stake(address to, uint256 amount) external;\\n\\n  function redeem(address to, uint256 amount) external;\\n\\n  function cooldown() external;\\n\\n  function claimRewards(address to, uint256 amount) external;\\n}\\n\\ninterface ITransferHook {\\n  function onTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint128 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\\ninterface IAaveDistributionManager {\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external;\\n}\\n\\n/**\\n * @title AaveDistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract AaveDistributionManager is IAaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  struct AssetData {\\n    uint128 emissionPerSecond;\\n    uint128 lastUpdateTimestamp;\\n    uint256 index;\\n    mapping(address => uint256) users;\\n  }\\n\\n  uint256 public immutable DISTRIBUTION_END;\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n\\n  constructor(address emissionManager, uint256 distributionDuration) public {\\n    DISTRIBUTION_END = block.timestamp.add(distributionDuration);\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /**\\n   * @dev Configures the distribution of rewards for a list of assets\\n   * @param assetsConfigInput The list of configurations to apply\\n   **/\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external\\n    override\\n  {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address underlyingAsset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex =\\n      _getAssetIndex(oldIndex, assetConfig.emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n    if (newIndex != oldIndex) {\\n      assetConfig.index = newIndex;\\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\\n    }\\n\\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards = accruedRewards.add(\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        )\\n      );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex =\\n        _getAssetIndex(\\n          assetConfig.index,\\n          assetConfig.emissionPerSecond,\\n          assetConfig.lastUpdateTimestamp,\\n          stakes[i].totalStaked\\n        );\\n\\n      accruedRewards = accruedRewards.add(\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\\n      );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= DISTRIBUTION_END\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp =\\n      block.timestamp > DISTRIBUTION_END ? DISTRIBUTION_END : block.timestamp;\\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\\n    return\\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\\n        currentIndex\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n}\\n\\n/**\\n * @notice implementation of the AAVE token contract\\n * @author Aave\\n */\\nabstract contract GovernancePowerDelegationERC20 is ERC20, IGovernancePowerDelegationToken {\\n  using SafeMath for uint256;\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH =\\n    keccak256('DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)');\\n\\n  bytes32 public constant DELEGATE_TYPEHASH =\\n    keccak256('Delegate(address delegatee,uint256 nonce,uint256 expiry)');\\n\\n  /// @dev snapshot of a value on a specific block, used for votes\\n  struct Snapshot {\\n    uint128 blockNumber;\\n    uint128 value;\\n  }\\n\\n  /**\\n   * @dev delegates one specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external override {\\n    _delegateByType(msg.sender, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external override {\\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    return _getDelegatee(delegator, delegates);\\n  }\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\\n  }\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view override returns (uint256) {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\\n  }\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   * used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\\n   * In this initial implementation with no AAVE minting, simply returns the current supply\\n   * A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view override returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _delegateByType(\\n    address delegator,\\n    address delegatee,\\n    DelegationType delegationType\\n  ) internal {\\n    require(delegatee != address(0), 'INVALID_DELEGATEE');\\n\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    uint256 delegatorBalance = balanceOf(delegator);\\n\\n    address previousDelegatee = _getDelegatee(delegator, delegates);\\n\\n    delegates[delegator] = delegatee;\\n\\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\\n    emit DelegateChanged(delegator, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev moves delegated power from one user to another\\n   * @param from the user from which delegated power is moved\\n   * @param to the user that will receive the delegated power\\n   * @param amount the amount of delegated power to be moved\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _moveDelegatesByType(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    DelegationType delegationType\\n  ) internal {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    if (from != address(0)) {\\n      uint256 previous = 0;\\n      uint256 fromSnapshotsCount = snapshotsCounts[from];\\n\\n      if (fromSnapshotsCount != 0) {\\n        previous = snapshots[from][fromSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(from);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        from,\\n        uint128(previous),\\n        uint128(previous.sub(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(from, previous.sub(amount), delegationType);\\n    }\\n    if (to != address(0)) {\\n      uint256 previous = 0;\\n      uint256 toSnapshotsCount = snapshotsCounts[to];\\n      if (toSnapshotsCount != 0) {\\n        previous = snapshots[to][toSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(to);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        to,\\n        uint128(previous),\\n        uint128(previous.add(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(to, previous.add(amount), delegationType);\\n    }\\n  }\\n\\n  /**\\n   * @dev searches a snapshot by block number. Uses binary search.\\n   * @param snapshots the snapshots mapping\\n   * @param snapshotsCounts the number of snapshots\\n   * @param user the user for which the snapshot is being searched\\n   * @param blockNumber the block number being searched\\n   **/\\n  function _searchByBlockNumber(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address user,\\n    uint256 blockNumber\\n  ) internal view returns (uint256) {\\n    require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\\n\\n    uint256 snapshotsCount = snapshotsCounts[user];\\n\\n    if (snapshotsCount == 0) {\\n      return balanceOf(user);\\n    }\\n\\n    // First check most recent balance\\n    if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\\n      return snapshots[user][snapshotsCount - 1].value;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (snapshots[user][0].blockNumber > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint256 lower = 0;\\n    uint256 upper = snapshotsCount - 1;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Snapshot memory snapshot = snapshots[user][center];\\n      if (snapshot.blockNumber == blockNumber) {\\n        return snapshot.value;\\n      } else if (snapshot.blockNumber < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return snapshots[user][lower].value;\\n  }\\n\\n  /**\\n   * @dev returns the delegation data (snapshot, snapshotsCount, list of delegates) by delegation type\\n   * NOTE: Ideal implementation would have mapped this in a struct by delegation type. Unfortunately,\\n   * the AAVE token and StakeToken already include a mapping for the snapshots, so we require contracts\\n   * who inherit from this to provide access to the delegation data by overriding this method.\\n   * @param delegationType the type of delegation\\n   **/\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    virtual\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    );\\n\\n  /**\\n   * @dev Writes a snapshot for an owner of tokens\\n   * @param owner The owner of the tokens\\n   * @param oldValue The value before the operation that is gonna be executed after the snapshot\\n   * @param newValue The value after the operation\\n   */\\n  function _writeSnapshot(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address owner,\\n    uint128 oldValue,\\n    uint128 newValue\\n  ) internal {\\n    uint128 currentBlock = uint128(block.number);\\n\\n    uint256 ownerSnapshotsCount = snapshotsCounts[owner];\\n    mapping(uint256 => Snapshot) storage snapshotsOwner = snapshots[owner];\\n\\n    // Doing multiple operations in the same block\\n    if (\\n      ownerSnapshotsCount != 0 &&\\n      snapshotsOwner[ownerSnapshotsCount - 1].blockNumber == currentBlock\\n    ) {\\n      snapshotsOwner[ownerSnapshotsCount - 1].value = newValue;\\n    } else {\\n      snapshotsOwner[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\\n      snapshotsCounts[owner] = ownerSnapshotsCount + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the user delegatee. If a user never performed any delegation,\\n   * his delegated address will be 0x0. In that case we simply return the user itself\\n   * @param delegator the address of the user for which return the delegatee\\n   * @param delegates the array of delegates for a particular type of delegation\\n   **/\\n  function _getDelegatee(address delegator, mapping(address => address) storage delegates)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address previousDelegatee = delegates[delegator];\\n\\n    if (previousDelegatee == address(0)) {\\n      return delegator;\\n    }\\n\\n    return previousDelegatee;\\n  }\\n}\\n\\n/**\\n * @title ERC20WithSnapshot\\n * @notice ERC20 including snapshots of balances on transfer-related actions\\n * @author Aave\\n **/\\nabstract contract GovernancePowerWithSnapshot is GovernancePowerDelegationERC20 {\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @dev The following storage layout points to the prior StakedToken.sol implementation:\\n   * _snapshots => _votingSnapshots\\n   * _snapshotsCounts =>  _votingSnapshotsCounts\\n   * _aaveGovernance => _aaveGovernance\\n   */\\n  mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\\n  mapping(address => uint256) public _votingSnapshotsCounts;\\n\\n  /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\\n  /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\\n  /// to control all potential reentrancies by calling back the this contract\\n  ITransferHook public _aaveGovernance;\\n\\n  function _setAaveGovernance(ITransferHook aaveGovernance) internal virtual {\\n    _aaveGovernance = aaveGovernance;\\n  }\\n}\\n\\n/**\\n * @title StakedToken\\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\\n * @author Aave\\n **/\\ncontract StakedTokenV2Rev3 is\\n  IStakedAave,\\n  GovernancePowerWithSnapshot,\\n  VersionedInitializable,\\n  AaveDistributionManager\\n{\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev Start of Storage layout from StakedToken v1\\n  uint256 public constant REVISION = 3;\\n\\n  IERC20 public immutable STAKED_TOKEN;\\n  IERC20 public immutable REWARD_TOKEN;\\n  uint256 public immutable COOLDOWN_SECONDS;\\n\\n  /// @notice Seconds available to redeem once the cooldown period is fullfilled\\n  uint256 public immutable UNSTAKE_WINDOW;\\n\\n  /// @notice Address to pull from the rewards, needs to have approved this contract\\n  address public immutable REWARDS_VAULT;\\n\\n  mapping(address => uint256) public stakerRewardsToClaim;\\n  mapping(address => uint256) public stakersCooldowns;\\n\\n  /// @dev End of Storage layout from StakedToken v1\\n\\n  /// @dev To see the voting mappings, go to GovernancePowerWithSnapshot.sol\\n  mapping(address => address) internal _votingDelegates;\\n\\n  mapping(address => mapping(uint256 => Snapshot)) internal _propositionPowerSnapshots;\\n  mapping(address => uint256) internal _propositionPowerSnapshotsCounts;\\n  mapping(address => address) internal _propositionPowerDelegates;\\n\\n  bytes32 public DOMAIN_SEPARATOR;\\n  bytes public constant EIP712_REVISION = bytes('1');\\n  bytes32 internal constant EIP712_DOMAIN =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  /// @dev owner => next valid nonce to submit with permit()\\n  mapping(address => uint256) public _nonces;\\n\\n  event Staked(address indexed from, address indexed onBehalfOf, uint256 amount);\\n  event Redeem(address indexed from, address indexed to, uint256 amount);\\n\\n  event RewardsAccrued(address user, uint256 amount);\\n  event RewardsClaimed(address indexed from, address indexed to, uint256 amount);\\n\\n  event Cooldown(address indexed user);\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals,\\n    address governance\\n  ) public ERC20(name, symbol) AaveDistributionManager(emissionManager, distributionDuration) {\\n    STAKED_TOKEN = stakedToken;\\n    REWARD_TOKEN = rewardToken;\\n    COOLDOWN_SECONDS = cooldownSeconds;\\n    UNSTAKE_WINDOW = unstakeWindow;\\n    REWARDS_VAULT = rewardsVault;\\n    _aaveGovernance = ITransferHook(governance);\\n    ERC20._setupDecimals(decimals);\\n  }\\n\\n  /**\\n   * @dev Called by the proxy contract\\n   **/\\n  function initialize() external initializer {\\n    uint256 chainId;\\n\\n    //solium-disable-next-line\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN,\\n        keccak256(bytes(name())),\\n        keccak256(EIP712_REVISION),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n\\n    // Update lastUpdateTimestamp of stkAave to reward users since the end of the prior staking period\\n    AssetData storage assetData = assets[address(this)];\\n    assetData.lastUpdateTimestamp = 1620594720;\\n  }\\n\\n  function stake(address onBehalfOf, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    uint256 balanceOfUser = balanceOf(onBehalfOf);\\n\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(onBehalfOf, address(this), balanceOfUser, totalSupply());\\n    if (accruedRewards != 0) {\\n      emit RewardsAccrued(onBehalfOf, accruedRewards);\\n      stakerRewardsToClaim[onBehalfOf] = stakerRewardsToClaim[onBehalfOf].add(accruedRewards);\\n    }\\n\\n    stakersCooldowns[onBehalfOf] = getNextCooldownTimestamp(0, amount, onBehalfOf, balanceOfUser);\\n\\n    _mint(onBehalfOf, amount);\\n    IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit Staked(msg.sender, onBehalfOf, amount);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens, and stop earning rewards\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   **/\\n  function redeem(address to, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    //solium-disable-next-line\\n    uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\\n    require(\\n      block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\\n      'INSUFFICIENT_COOLDOWN'\\n    );\\n    require(\\n      block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n      'UNSTAKE_WINDOW_FINISHED'\\n    );\\n    uint256 balanceOfMessageSender = balanceOf(msg.sender);\\n\\n    uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\\n\\n    _updateCurrentUnclaimedRewards(msg.sender, balanceOfMessageSender, true);\\n\\n    _burn(msg.sender, amountToRedeem);\\n\\n    if (balanceOfMessageSender.sub(amountToRedeem) == 0) {\\n      stakersCooldowns[msg.sender] = 0;\\n    }\\n\\n    IERC20(STAKED_TOKEN).safeTransfer(to, amountToRedeem);\\n\\n    emit Redeem(msg.sender, to, amountToRedeem);\\n  }\\n\\n  /**\\n   * @dev Activates the cooldown period to unstake\\n   * - It can't be called if the user is not staking\\n   **/\\n  function cooldown() external override {\\n    require(balanceOf(msg.sender) != 0, 'INVALID_BALANCE_ON_COOLDOWN');\\n    //solium-disable-next-line\\n    stakersCooldowns[msg.sender] = block.timestamp;\\n\\n    emit Cooldown(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\\n   * @param to Address to stake for\\n   * @param amount Amount to stake\\n   **/\\n  function claimRewards(address to, uint256 amount) external override {\\n    uint256 newTotalRewards =\\n      _updateCurrentUnclaimedRewards(msg.sender, balanceOf(msg.sender), false);\\n    uint256 amountToClaim = (amount == type(uint256).max) ? newTotalRewards : amount;\\n\\n    stakerRewardsToClaim[msg.sender] = newTotalRewards.sub(amountToClaim, 'INVALID_AMOUNT');\\n\\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\\n\\n    emit RewardsClaimed(msg.sender, to, amountToClaim);\\n  }\\n\\n  /**\\n   * @dev Internal ERC20 _transfer of the tokenized staked tokens\\n   * @param from Address to transfer from\\n   * @param to Address to transfer to\\n   * @param amount Amount to transfer\\n   **/\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    uint256 balanceOfFrom = balanceOf(from);\\n    // Sender\\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\\n\\n    // Recipient\\n    if (from != to) {\\n      uint256 balanceOfTo = balanceOf(to);\\n      _updateCurrentUnclaimedRewards(to, balanceOfTo, true);\\n\\n      uint256 previousSenderCooldown = stakersCooldowns[from];\\n      stakersCooldowns[to] = getNextCooldownTimestamp(\\n        previousSenderCooldown,\\n        amount,\\n        to,\\n        balanceOfTo\\n      );\\n      // if cooldown was set and whole balance of sender was transferred - clear cooldown\\n      if (balanceOfFrom == amount && previousSenderCooldown != 0) {\\n        stakersCooldowns[from] = 0;\\n      }\\n    }\\n\\n    super._transfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Updates the user state related with his accrued rewards\\n   * @param user Address of the user\\n   * @param userBalance The current balance of the user\\n   * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\\n   * @return The unclaimed rewards that were added to the total accrued\\n   **/\\n  function _updateCurrentUnclaimedRewards(\\n    address user,\\n    uint256 userBalance,\\n    bool updateStorage\\n  ) internal returns (uint256) {\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(user, address(this), userBalance, totalSupply());\\n    uint256 unclaimedRewards = stakerRewardsToClaim[user].add(accruedRewards);\\n\\n    if (accruedRewards != 0) {\\n      if (updateStorage) {\\n        stakerRewardsToClaim[user] = unclaimedRewards;\\n      }\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n\\n    return unclaimedRewards;\\n  }\\n\\n  /**\\n   * @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\\n   *  - If the timestamp of the sender is \\\"better\\\" or the timestamp of the recipient is 0, we take the one of the recipient\\n   *  - Weighted average of from/to cooldown timestamps if:\\n   *    # The sender doesn't have the cooldown activated (timestamp 0).\\n   *    # The sender timestamp is expired\\n   *    # The sender has a \\\"worse\\\" timestamp\\n   *  - If the receiver's cooldown timestamp expired (too old), the next is 0\\n   * @param fromCooldownTimestamp Cooldown timestamp of the sender\\n   * @param amountToReceive Amount\\n   * @param toAddress Address of the recipient\\n   * @param toBalance Current balance of the receiver\\n   * @return The new cooldown timestamp\\n   **/\\n  function getNextCooldownTimestamp(\\n    uint256 fromCooldownTimestamp,\\n    uint256 amountToReceive,\\n    address toAddress,\\n    uint256 toBalance\\n  ) public view returns (uint256) {\\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\\n    if (toCooldownTimestamp == 0) {\\n      return 0;\\n    }\\n\\n    uint256 minimalValidCooldownTimestamp =\\n      block.timestamp.sub(COOLDOWN_SECONDS).sub(UNSTAKE_WINDOW);\\n\\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\\n      toCooldownTimestamp = 0;\\n    } else {\\n      uint256 fromCooldownTimestamp =\\n        (minimalValidCooldownTimestamp > fromCooldownTimestamp)\\n          ? block.timestamp\\n          : fromCooldownTimestamp;\\n\\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\\n        return toCooldownTimestamp;\\n      } else {\\n        toCooldownTimestamp = (\\n          amountToReceive.mul(fromCooldownTimestamp).add(toBalance.mul(toCooldownTimestamp))\\n        )\\n          .div(amountToReceive.add(toBalance));\\n      }\\n    }\\n    return toCooldownTimestamp;\\n  }\\n\\n  /**\\n   * @dev Return the total rewards pending to claim by an staker\\n   * @param staker The staker address\\n   * @return The rewards\\n   */\\n  function getTotalRewardsBalance(address staker) external view returns (uint256) {\\n    DistributionTypes.UserStakeInput[] memory userStakeInputs =\\n      new DistributionTypes.UserStakeInput[](1);\\n    userStakeInputs[0] = DistributionTypes.UserStakeInput({\\n      underlyingAsset: address(this),\\n      stakedByUser: balanceOf(staker),\\n      totalStaked: totalSupply()\\n    });\\n    return stakerRewardsToClaim[staker].add(_getUnclaimedRewards(staker, userStakeInputs));\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   * @return The revision\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner the owner of the funds\\n   * @param spender the spender\\n   * @param value the amount\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(owner != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    uint256 currentValidNonce = _nonces[owner];\\n    bytes32 digest =\\n      keccak256(\\n        abi.encodePacked(\\n          '\\\\x19\\\\x01',\\n          DOMAIN_SEPARATOR,\\n          keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n        )\\n      );\\n\\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _nonces[owner] = currentValidNonce.add(1);\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\\n   * - On _transfer, it writes snapshots for both \\\"from\\\" and \\\"to\\\"\\n   * - On _mint, only for _to\\n   * - On _burn, only for _from\\n   * @param from the from address\\n   * @param to the to address\\n   * @param amount the amount to transfer\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    address votingFromDelegatee = _votingDelegates[from];\\n    address votingToDelegatee = _votingDelegates[to];\\n\\n    if (votingFromDelegatee == address(0)) {\\n      votingFromDelegatee = from;\\n    }\\n    if (votingToDelegatee == address(0)) {\\n      votingToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      votingFromDelegatee,\\n      votingToDelegatee,\\n      amount,\\n      DelegationType.VOTING_POWER\\n    );\\n\\n    address propPowerFromDelegatee = _propositionPowerDelegates[from];\\n    address propPowerToDelegatee = _propositionPowerDelegates[to];\\n\\n    if (propPowerFromDelegatee == address(0)) {\\n      propPowerFromDelegatee = from;\\n    }\\n    if (propPowerToDelegatee == address(0)) {\\n      propPowerToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      propPowerFromDelegatee,\\n      propPowerToDelegatee,\\n      amount,\\n      DelegationType.PROPOSITION_POWER\\n    );\\n\\n    // caching the aave governance address to avoid multiple state loads\\n    ITransferHook aaveGovernance = _aaveGovernance;\\n    if (aaveGovernance != ITransferHook(0)) {\\n      aaveGovernance.onTransfer(from, to, amount);\\n    }\\n  }\\n\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    override\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    )\\n  {\\n    if (delegationType == DelegationType.VOTING_POWER) {\\n      return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\\n    } else {\\n      return (\\n        _propositionPowerSnapshots,\\n        _propositionPowerSnapshotsCounts,\\n        _propositionPowerDelegates\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateByTypeBySig(\\n    address delegatee,\\n    DelegationType delegationType,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash =\\n      keccak256(\\n        abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\\n      );\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(signatory, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n}\\n\",\"keccak256\":\"0x193e8dd33d55c137ea32793b1f2c2f06b4b8936ee5c625e38766062c4f89fb43\",\"license\":\"agpl-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"ITransferHook":{"abi":[{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"onTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onTransfer(address,address,uint256)":"4a393149"}},"metadata":"{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":\"ITransferHook\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-12-10\\n */\\n\\n// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGovernancePowerDelegationToken {\\n  enum DelegationType {VOTING_POWER, PROPOSITION_POWER}\\n\\n  /**\\n   * @dev emitted when a user delegates to another\\n   * @param delegator the delegator\\n   * @param delegatee the delegatee\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    DelegationType delegationType\\n  );\\n\\n  /**\\n   * @dev emitted when an action changes the delegated power of a user\\n   * @param user the user which delegated power has changed\\n   * @param amount the amount of delegated power for the user\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external virtual;\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (address);\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view virtual returns (uint256);\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view virtual returns (uint256);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string internal _name;\\n  string internal _symbol;\\n  uint8 private _decimals;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n   * a default value of 18.\\n   *\\n   * To select a different value for {decimals}, use {_setupDecimals}.\\n   *\\n   * All three of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name, string memory symbol) public {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = 18;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        'ERC20: decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n   *\\n   * This is internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Sets {decimals} to a value other than the default one of 18.\\n   *\\n   * WARNING: This function should only be called from the constructor. Most\\n   * applications that interact with token contracts will not expect\\n   * {decimals} to ever change, and may work incorrectly if it does.\\n   */\\n  function _setupDecimals(uint8 decimals_) internal {\\n    _decimals = decimals_;\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be to transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\\ninterface IStakedAave {\\n  function stake(address to, uint256 amount) external;\\n\\n  function redeem(address to, uint256 amount) external;\\n\\n  function cooldown() external;\\n\\n  function claimRewards(address to, uint256 amount) external;\\n}\\n\\ninterface ITransferHook {\\n  function onTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint128 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\\ninterface IAaveDistributionManager {\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external;\\n}\\n\\n/**\\n * @title AaveDistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract AaveDistributionManager is IAaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  struct AssetData {\\n    uint128 emissionPerSecond;\\n    uint128 lastUpdateTimestamp;\\n    uint256 index;\\n    mapping(address => uint256) users;\\n  }\\n\\n  uint256 public immutable DISTRIBUTION_END;\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n\\n  constructor(address emissionManager, uint256 distributionDuration) public {\\n    DISTRIBUTION_END = block.timestamp.add(distributionDuration);\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /**\\n   * @dev Configures the distribution of rewards for a list of assets\\n   * @param assetsConfigInput The list of configurations to apply\\n   **/\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external\\n    override\\n  {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address underlyingAsset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex =\\n      _getAssetIndex(oldIndex, assetConfig.emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n    if (newIndex != oldIndex) {\\n      assetConfig.index = newIndex;\\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\\n    }\\n\\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards = accruedRewards.add(\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        )\\n      );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex =\\n        _getAssetIndex(\\n          assetConfig.index,\\n          assetConfig.emissionPerSecond,\\n          assetConfig.lastUpdateTimestamp,\\n          stakes[i].totalStaked\\n        );\\n\\n      accruedRewards = accruedRewards.add(\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\\n      );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= DISTRIBUTION_END\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp =\\n      block.timestamp > DISTRIBUTION_END ? DISTRIBUTION_END : block.timestamp;\\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\\n    return\\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\\n        currentIndex\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n}\\n\\n/**\\n * @notice implementation of the AAVE token contract\\n * @author Aave\\n */\\nabstract contract GovernancePowerDelegationERC20 is ERC20, IGovernancePowerDelegationToken {\\n  using SafeMath for uint256;\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH =\\n    keccak256('DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)');\\n\\n  bytes32 public constant DELEGATE_TYPEHASH =\\n    keccak256('Delegate(address delegatee,uint256 nonce,uint256 expiry)');\\n\\n  /// @dev snapshot of a value on a specific block, used for votes\\n  struct Snapshot {\\n    uint128 blockNumber;\\n    uint128 value;\\n  }\\n\\n  /**\\n   * @dev delegates one specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external override {\\n    _delegateByType(msg.sender, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external override {\\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    return _getDelegatee(delegator, delegates);\\n  }\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\\n  }\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view override returns (uint256) {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\\n  }\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   * used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\\n   * In this initial implementation with no AAVE minting, simply returns the current supply\\n   * A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view override returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _delegateByType(\\n    address delegator,\\n    address delegatee,\\n    DelegationType delegationType\\n  ) internal {\\n    require(delegatee != address(0), 'INVALID_DELEGATEE');\\n\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    uint256 delegatorBalance = balanceOf(delegator);\\n\\n    address previousDelegatee = _getDelegatee(delegator, delegates);\\n\\n    delegates[delegator] = delegatee;\\n\\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\\n    emit DelegateChanged(delegator, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev moves delegated power from one user to another\\n   * @param from the user from which delegated power is moved\\n   * @param to the user that will receive the delegated power\\n   * @param amount the amount of delegated power to be moved\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _moveDelegatesByType(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    DelegationType delegationType\\n  ) internal {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    if (from != address(0)) {\\n      uint256 previous = 0;\\n      uint256 fromSnapshotsCount = snapshotsCounts[from];\\n\\n      if (fromSnapshotsCount != 0) {\\n        previous = snapshots[from][fromSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(from);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        from,\\n        uint128(previous),\\n        uint128(previous.sub(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(from, previous.sub(amount), delegationType);\\n    }\\n    if (to != address(0)) {\\n      uint256 previous = 0;\\n      uint256 toSnapshotsCount = snapshotsCounts[to];\\n      if (toSnapshotsCount != 0) {\\n        previous = snapshots[to][toSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(to);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        to,\\n        uint128(previous),\\n        uint128(previous.add(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(to, previous.add(amount), delegationType);\\n    }\\n  }\\n\\n  /**\\n   * @dev searches a snapshot by block number. Uses binary search.\\n   * @param snapshots the snapshots mapping\\n   * @param snapshotsCounts the number of snapshots\\n   * @param user the user for which the snapshot is being searched\\n   * @param blockNumber the block number being searched\\n   **/\\n  function _searchByBlockNumber(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address user,\\n    uint256 blockNumber\\n  ) internal view returns (uint256) {\\n    require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\\n\\n    uint256 snapshotsCount = snapshotsCounts[user];\\n\\n    if (snapshotsCount == 0) {\\n      return balanceOf(user);\\n    }\\n\\n    // First check most recent balance\\n    if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\\n      return snapshots[user][snapshotsCount - 1].value;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (snapshots[user][0].blockNumber > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint256 lower = 0;\\n    uint256 upper = snapshotsCount - 1;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Snapshot memory snapshot = snapshots[user][center];\\n      if (snapshot.blockNumber == blockNumber) {\\n        return snapshot.value;\\n      } else if (snapshot.blockNumber < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return snapshots[user][lower].value;\\n  }\\n\\n  /**\\n   * @dev returns the delegation data (snapshot, snapshotsCount, list of delegates) by delegation type\\n   * NOTE: Ideal implementation would have mapped this in a struct by delegation type. Unfortunately,\\n   * the AAVE token and StakeToken already include a mapping for the snapshots, so we require contracts\\n   * who inherit from this to provide access to the delegation data by overriding this method.\\n   * @param delegationType the type of delegation\\n   **/\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    virtual\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    );\\n\\n  /**\\n   * @dev Writes a snapshot for an owner of tokens\\n   * @param owner The owner of the tokens\\n   * @param oldValue The value before the operation that is gonna be executed after the snapshot\\n   * @param newValue The value after the operation\\n   */\\n  function _writeSnapshot(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address owner,\\n    uint128 oldValue,\\n    uint128 newValue\\n  ) internal {\\n    uint128 currentBlock = uint128(block.number);\\n\\n    uint256 ownerSnapshotsCount = snapshotsCounts[owner];\\n    mapping(uint256 => Snapshot) storage snapshotsOwner = snapshots[owner];\\n\\n    // Doing multiple operations in the same block\\n    if (\\n      ownerSnapshotsCount != 0 &&\\n      snapshotsOwner[ownerSnapshotsCount - 1].blockNumber == currentBlock\\n    ) {\\n      snapshotsOwner[ownerSnapshotsCount - 1].value = newValue;\\n    } else {\\n      snapshotsOwner[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\\n      snapshotsCounts[owner] = ownerSnapshotsCount + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the user delegatee. If a user never performed any delegation,\\n   * his delegated address will be 0x0. In that case we simply return the user itself\\n   * @param delegator the address of the user for which return the delegatee\\n   * @param delegates the array of delegates for a particular type of delegation\\n   **/\\n  function _getDelegatee(address delegator, mapping(address => address) storage delegates)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address previousDelegatee = delegates[delegator];\\n\\n    if (previousDelegatee == address(0)) {\\n      return delegator;\\n    }\\n\\n    return previousDelegatee;\\n  }\\n}\\n\\n/**\\n * @title ERC20WithSnapshot\\n * @notice ERC20 including snapshots of balances on transfer-related actions\\n * @author Aave\\n **/\\nabstract contract GovernancePowerWithSnapshot is GovernancePowerDelegationERC20 {\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @dev The following storage layout points to the prior StakedToken.sol implementation:\\n   * _snapshots => _votingSnapshots\\n   * _snapshotsCounts =>  _votingSnapshotsCounts\\n   * _aaveGovernance => _aaveGovernance\\n   */\\n  mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\\n  mapping(address => uint256) public _votingSnapshotsCounts;\\n\\n  /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\\n  /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\\n  /// to control all potential reentrancies by calling back the this contract\\n  ITransferHook public _aaveGovernance;\\n\\n  function _setAaveGovernance(ITransferHook aaveGovernance) internal virtual {\\n    _aaveGovernance = aaveGovernance;\\n  }\\n}\\n\\n/**\\n * @title StakedToken\\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\\n * @author Aave\\n **/\\ncontract StakedTokenV2Rev3 is\\n  IStakedAave,\\n  GovernancePowerWithSnapshot,\\n  VersionedInitializable,\\n  AaveDistributionManager\\n{\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev Start of Storage layout from StakedToken v1\\n  uint256 public constant REVISION = 3;\\n\\n  IERC20 public immutable STAKED_TOKEN;\\n  IERC20 public immutable REWARD_TOKEN;\\n  uint256 public immutable COOLDOWN_SECONDS;\\n\\n  /// @notice Seconds available to redeem once the cooldown period is fullfilled\\n  uint256 public immutable UNSTAKE_WINDOW;\\n\\n  /// @notice Address to pull from the rewards, needs to have approved this contract\\n  address public immutable REWARDS_VAULT;\\n\\n  mapping(address => uint256) public stakerRewardsToClaim;\\n  mapping(address => uint256) public stakersCooldowns;\\n\\n  /// @dev End of Storage layout from StakedToken v1\\n\\n  /// @dev To see the voting mappings, go to GovernancePowerWithSnapshot.sol\\n  mapping(address => address) internal _votingDelegates;\\n\\n  mapping(address => mapping(uint256 => Snapshot)) internal _propositionPowerSnapshots;\\n  mapping(address => uint256) internal _propositionPowerSnapshotsCounts;\\n  mapping(address => address) internal _propositionPowerDelegates;\\n\\n  bytes32 public DOMAIN_SEPARATOR;\\n  bytes public constant EIP712_REVISION = bytes('1');\\n  bytes32 internal constant EIP712_DOMAIN =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  /// @dev owner => next valid nonce to submit with permit()\\n  mapping(address => uint256) public _nonces;\\n\\n  event Staked(address indexed from, address indexed onBehalfOf, uint256 amount);\\n  event Redeem(address indexed from, address indexed to, uint256 amount);\\n\\n  event RewardsAccrued(address user, uint256 amount);\\n  event RewardsClaimed(address indexed from, address indexed to, uint256 amount);\\n\\n  event Cooldown(address indexed user);\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals,\\n    address governance\\n  ) public ERC20(name, symbol) AaveDistributionManager(emissionManager, distributionDuration) {\\n    STAKED_TOKEN = stakedToken;\\n    REWARD_TOKEN = rewardToken;\\n    COOLDOWN_SECONDS = cooldownSeconds;\\n    UNSTAKE_WINDOW = unstakeWindow;\\n    REWARDS_VAULT = rewardsVault;\\n    _aaveGovernance = ITransferHook(governance);\\n    ERC20._setupDecimals(decimals);\\n  }\\n\\n  /**\\n   * @dev Called by the proxy contract\\n   **/\\n  function initialize() external initializer {\\n    uint256 chainId;\\n\\n    //solium-disable-next-line\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN,\\n        keccak256(bytes(name())),\\n        keccak256(EIP712_REVISION),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n\\n    // Update lastUpdateTimestamp of stkAave to reward users since the end of the prior staking period\\n    AssetData storage assetData = assets[address(this)];\\n    assetData.lastUpdateTimestamp = 1620594720;\\n  }\\n\\n  function stake(address onBehalfOf, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    uint256 balanceOfUser = balanceOf(onBehalfOf);\\n\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(onBehalfOf, address(this), balanceOfUser, totalSupply());\\n    if (accruedRewards != 0) {\\n      emit RewardsAccrued(onBehalfOf, accruedRewards);\\n      stakerRewardsToClaim[onBehalfOf] = stakerRewardsToClaim[onBehalfOf].add(accruedRewards);\\n    }\\n\\n    stakersCooldowns[onBehalfOf] = getNextCooldownTimestamp(0, amount, onBehalfOf, balanceOfUser);\\n\\n    _mint(onBehalfOf, amount);\\n    IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit Staked(msg.sender, onBehalfOf, amount);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens, and stop earning rewards\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   **/\\n  function redeem(address to, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    //solium-disable-next-line\\n    uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\\n    require(\\n      block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\\n      'INSUFFICIENT_COOLDOWN'\\n    );\\n    require(\\n      block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n      'UNSTAKE_WINDOW_FINISHED'\\n    );\\n    uint256 balanceOfMessageSender = balanceOf(msg.sender);\\n\\n    uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\\n\\n    _updateCurrentUnclaimedRewards(msg.sender, balanceOfMessageSender, true);\\n\\n    _burn(msg.sender, amountToRedeem);\\n\\n    if (balanceOfMessageSender.sub(amountToRedeem) == 0) {\\n      stakersCooldowns[msg.sender] = 0;\\n    }\\n\\n    IERC20(STAKED_TOKEN).safeTransfer(to, amountToRedeem);\\n\\n    emit Redeem(msg.sender, to, amountToRedeem);\\n  }\\n\\n  /**\\n   * @dev Activates the cooldown period to unstake\\n   * - It can't be called if the user is not staking\\n   **/\\n  function cooldown() external override {\\n    require(balanceOf(msg.sender) != 0, 'INVALID_BALANCE_ON_COOLDOWN');\\n    //solium-disable-next-line\\n    stakersCooldowns[msg.sender] = block.timestamp;\\n\\n    emit Cooldown(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\\n   * @param to Address to stake for\\n   * @param amount Amount to stake\\n   **/\\n  function claimRewards(address to, uint256 amount) external override {\\n    uint256 newTotalRewards =\\n      _updateCurrentUnclaimedRewards(msg.sender, balanceOf(msg.sender), false);\\n    uint256 amountToClaim = (amount == type(uint256).max) ? newTotalRewards : amount;\\n\\n    stakerRewardsToClaim[msg.sender] = newTotalRewards.sub(amountToClaim, 'INVALID_AMOUNT');\\n\\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\\n\\n    emit RewardsClaimed(msg.sender, to, amountToClaim);\\n  }\\n\\n  /**\\n   * @dev Internal ERC20 _transfer of the tokenized staked tokens\\n   * @param from Address to transfer from\\n   * @param to Address to transfer to\\n   * @param amount Amount to transfer\\n   **/\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    uint256 balanceOfFrom = balanceOf(from);\\n    // Sender\\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\\n\\n    // Recipient\\n    if (from != to) {\\n      uint256 balanceOfTo = balanceOf(to);\\n      _updateCurrentUnclaimedRewards(to, balanceOfTo, true);\\n\\n      uint256 previousSenderCooldown = stakersCooldowns[from];\\n      stakersCooldowns[to] = getNextCooldownTimestamp(\\n        previousSenderCooldown,\\n        amount,\\n        to,\\n        balanceOfTo\\n      );\\n      // if cooldown was set and whole balance of sender was transferred - clear cooldown\\n      if (balanceOfFrom == amount && previousSenderCooldown != 0) {\\n        stakersCooldowns[from] = 0;\\n      }\\n    }\\n\\n    super._transfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Updates the user state related with his accrued rewards\\n   * @param user Address of the user\\n   * @param userBalance The current balance of the user\\n   * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\\n   * @return The unclaimed rewards that were added to the total accrued\\n   **/\\n  function _updateCurrentUnclaimedRewards(\\n    address user,\\n    uint256 userBalance,\\n    bool updateStorage\\n  ) internal returns (uint256) {\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(user, address(this), userBalance, totalSupply());\\n    uint256 unclaimedRewards = stakerRewardsToClaim[user].add(accruedRewards);\\n\\n    if (accruedRewards != 0) {\\n      if (updateStorage) {\\n        stakerRewardsToClaim[user] = unclaimedRewards;\\n      }\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n\\n    return unclaimedRewards;\\n  }\\n\\n  /**\\n   * @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\\n   *  - If the timestamp of the sender is \\\"better\\\" or the timestamp of the recipient is 0, we take the one of the recipient\\n   *  - Weighted average of from/to cooldown timestamps if:\\n   *    # The sender doesn't have the cooldown activated (timestamp 0).\\n   *    # The sender timestamp is expired\\n   *    # The sender has a \\\"worse\\\" timestamp\\n   *  - If the receiver's cooldown timestamp expired (too old), the next is 0\\n   * @param fromCooldownTimestamp Cooldown timestamp of the sender\\n   * @param amountToReceive Amount\\n   * @param toAddress Address of the recipient\\n   * @param toBalance Current balance of the receiver\\n   * @return The new cooldown timestamp\\n   **/\\n  function getNextCooldownTimestamp(\\n    uint256 fromCooldownTimestamp,\\n    uint256 amountToReceive,\\n    address toAddress,\\n    uint256 toBalance\\n  ) public view returns (uint256) {\\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\\n    if (toCooldownTimestamp == 0) {\\n      return 0;\\n    }\\n\\n    uint256 minimalValidCooldownTimestamp =\\n      block.timestamp.sub(COOLDOWN_SECONDS).sub(UNSTAKE_WINDOW);\\n\\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\\n      toCooldownTimestamp = 0;\\n    } else {\\n      uint256 fromCooldownTimestamp =\\n        (minimalValidCooldownTimestamp > fromCooldownTimestamp)\\n          ? block.timestamp\\n          : fromCooldownTimestamp;\\n\\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\\n        return toCooldownTimestamp;\\n      } else {\\n        toCooldownTimestamp = (\\n          amountToReceive.mul(fromCooldownTimestamp).add(toBalance.mul(toCooldownTimestamp))\\n        )\\n          .div(amountToReceive.add(toBalance));\\n      }\\n    }\\n    return toCooldownTimestamp;\\n  }\\n\\n  /**\\n   * @dev Return the total rewards pending to claim by an staker\\n   * @param staker The staker address\\n   * @return The rewards\\n   */\\n  function getTotalRewardsBalance(address staker) external view returns (uint256) {\\n    DistributionTypes.UserStakeInput[] memory userStakeInputs =\\n      new DistributionTypes.UserStakeInput[](1);\\n    userStakeInputs[0] = DistributionTypes.UserStakeInput({\\n      underlyingAsset: address(this),\\n      stakedByUser: balanceOf(staker),\\n      totalStaked: totalSupply()\\n    });\\n    return stakerRewardsToClaim[staker].add(_getUnclaimedRewards(staker, userStakeInputs));\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   * @return The revision\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner the owner of the funds\\n   * @param spender the spender\\n   * @param value the amount\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(owner != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    uint256 currentValidNonce = _nonces[owner];\\n    bytes32 digest =\\n      keccak256(\\n        abi.encodePacked(\\n          '\\\\x19\\\\x01',\\n          DOMAIN_SEPARATOR,\\n          keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n        )\\n      );\\n\\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _nonces[owner] = currentValidNonce.add(1);\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\\n   * - On _transfer, it writes snapshots for both \\\"from\\\" and \\\"to\\\"\\n   * - On _mint, only for _to\\n   * - On _burn, only for _from\\n   * @param from the from address\\n   * @param to the to address\\n   * @param amount the amount to transfer\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    address votingFromDelegatee = _votingDelegates[from];\\n    address votingToDelegatee = _votingDelegates[to];\\n\\n    if (votingFromDelegatee == address(0)) {\\n      votingFromDelegatee = from;\\n    }\\n    if (votingToDelegatee == address(0)) {\\n      votingToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      votingFromDelegatee,\\n      votingToDelegatee,\\n      amount,\\n      DelegationType.VOTING_POWER\\n    );\\n\\n    address propPowerFromDelegatee = _propositionPowerDelegates[from];\\n    address propPowerToDelegatee = _propositionPowerDelegates[to];\\n\\n    if (propPowerFromDelegatee == address(0)) {\\n      propPowerFromDelegatee = from;\\n    }\\n    if (propPowerToDelegatee == address(0)) {\\n      propPowerToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      propPowerFromDelegatee,\\n      propPowerToDelegatee,\\n      amount,\\n      DelegationType.PROPOSITION_POWER\\n    );\\n\\n    // caching the aave governance address to avoid multiple state loads\\n    ITransferHook aaveGovernance = _aaveGovernance;\\n    if (aaveGovernance != ITransferHook(0)) {\\n      aaveGovernance.onTransfer(from, to, amount);\\n    }\\n  }\\n\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    override\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    )\\n  {\\n    if (delegationType == DelegationType.VOTING_POWER) {\\n      return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\\n    } else {\\n      return (\\n        _propositionPowerSnapshots,\\n        _propositionPowerSnapshotsCounts,\\n        _propositionPowerDelegates\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateByTypeBySig(\\n    address delegatee,\\n    DelegationType delegationType,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash =\\n      keccak256(\\n        abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\\n      );\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(signatory, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n}\\n\",\"keccak256\":\"0x193e8dd33d55c137ea32793b1f2c2f06b4b8936ee5c625e38766062c4f89fb43\",\"license\":\"agpl-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"SafeERC20":{"abi":[],"devdoc":{"details":"From https://github.com/OpenZeppelin/openzeppelin-contracts Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208554fffa7556be297c7d0861574fc639c94991e3f1d6e3d0e025b892f1b7458464736f6c63430007050033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 SLOAD SELFDESTRUCT STATICCALL PUSH22 0x56BE297C7D0861574FC639C94991E3F1D6E3D0E025B8 SWAP3 CALL 0xB7 GASLIMIT DUP5 PUSH5 0x736F6C6343 STOP SMOD SDIV STOP CALLER ","sourceMap":"24841:1396:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208554fffa7556be297c7d0861574fc639c94991e3f1d6e3d0e025b892f1b7458464736f6c63430007050033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 SLOAD SELFDESTRUCT STATICCALL PUSH22 0x56BE297C7D0861574FC639C94991E3F1D6E3D0E025B8 SWAP3 CALL 0xB7 GASLIMIT DUP5 PUSH5 0x736F6C6343 STOP SMOD SDIV STOP CALLER ","sourceMap":"24841:1396:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"callOptionalReturn(contract IERC20,bytes memory)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"From https://github.com/OpenZeppelin/openzeppelin-contracts Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":\"SafeERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-12-10\\n */\\n\\n// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGovernancePowerDelegationToken {\\n  enum DelegationType {VOTING_POWER, PROPOSITION_POWER}\\n\\n  /**\\n   * @dev emitted when a user delegates to another\\n   * @param delegator the delegator\\n   * @param delegatee the delegatee\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    DelegationType delegationType\\n  );\\n\\n  /**\\n   * @dev emitted when an action changes the delegated power of a user\\n   * @param user the user which delegated power has changed\\n   * @param amount the amount of delegated power for the user\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external virtual;\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (address);\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view virtual returns (uint256);\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view virtual returns (uint256);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string internal _name;\\n  string internal _symbol;\\n  uint8 private _decimals;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n   * a default value of 18.\\n   *\\n   * To select a different value for {decimals}, use {_setupDecimals}.\\n   *\\n   * All three of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name, string memory symbol) public {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = 18;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        'ERC20: decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n   *\\n   * This is internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Sets {decimals} to a value other than the default one of 18.\\n   *\\n   * WARNING: This function should only be called from the constructor. Most\\n   * applications that interact with token contracts will not expect\\n   * {decimals} to ever change, and may work incorrectly if it does.\\n   */\\n  function _setupDecimals(uint8 decimals_) internal {\\n    _decimals = decimals_;\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be to transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\\ninterface IStakedAave {\\n  function stake(address to, uint256 amount) external;\\n\\n  function redeem(address to, uint256 amount) external;\\n\\n  function cooldown() external;\\n\\n  function claimRewards(address to, uint256 amount) external;\\n}\\n\\ninterface ITransferHook {\\n  function onTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint128 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\\ninterface IAaveDistributionManager {\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external;\\n}\\n\\n/**\\n * @title AaveDistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract AaveDistributionManager is IAaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  struct AssetData {\\n    uint128 emissionPerSecond;\\n    uint128 lastUpdateTimestamp;\\n    uint256 index;\\n    mapping(address => uint256) users;\\n  }\\n\\n  uint256 public immutable DISTRIBUTION_END;\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n\\n  constructor(address emissionManager, uint256 distributionDuration) public {\\n    DISTRIBUTION_END = block.timestamp.add(distributionDuration);\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /**\\n   * @dev Configures the distribution of rewards for a list of assets\\n   * @param assetsConfigInput The list of configurations to apply\\n   **/\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external\\n    override\\n  {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address underlyingAsset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex =\\n      _getAssetIndex(oldIndex, assetConfig.emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n    if (newIndex != oldIndex) {\\n      assetConfig.index = newIndex;\\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\\n    }\\n\\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards = accruedRewards.add(\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        )\\n      );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex =\\n        _getAssetIndex(\\n          assetConfig.index,\\n          assetConfig.emissionPerSecond,\\n          assetConfig.lastUpdateTimestamp,\\n          stakes[i].totalStaked\\n        );\\n\\n      accruedRewards = accruedRewards.add(\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\\n      );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= DISTRIBUTION_END\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp =\\n      block.timestamp > DISTRIBUTION_END ? DISTRIBUTION_END : block.timestamp;\\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\\n    return\\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\\n        currentIndex\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n}\\n\\n/**\\n * @notice implementation of the AAVE token contract\\n * @author Aave\\n */\\nabstract contract GovernancePowerDelegationERC20 is ERC20, IGovernancePowerDelegationToken {\\n  using SafeMath for uint256;\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH =\\n    keccak256('DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)');\\n\\n  bytes32 public constant DELEGATE_TYPEHASH =\\n    keccak256('Delegate(address delegatee,uint256 nonce,uint256 expiry)');\\n\\n  /// @dev snapshot of a value on a specific block, used for votes\\n  struct Snapshot {\\n    uint128 blockNumber;\\n    uint128 value;\\n  }\\n\\n  /**\\n   * @dev delegates one specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external override {\\n    _delegateByType(msg.sender, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external override {\\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    return _getDelegatee(delegator, delegates);\\n  }\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\\n  }\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view override returns (uint256) {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\\n  }\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   * used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\\n   * In this initial implementation with no AAVE minting, simply returns the current supply\\n   * A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view override returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _delegateByType(\\n    address delegator,\\n    address delegatee,\\n    DelegationType delegationType\\n  ) internal {\\n    require(delegatee != address(0), 'INVALID_DELEGATEE');\\n\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    uint256 delegatorBalance = balanceOf(delegator);\\n\\n    address previousDelegatee = _getDelegatee(delegator, delegates);\\n\\n    delegates[delegator] = delegatee;\\n\\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\\n    emit DelegateChanged(delegator, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev moves delegated power from one user to another\\n   * @param from the user from which delegated power is moved\\n   * @param to the user that will receive the delegated power\\n   * @param amount the amount of delegated power to be moved\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _moveDelegatesByType(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    DelegationType delegationType\\n  ) internal {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    if (from != address(0)) {\\n      uint256 previous = 0;\\n      uint256 fromSnapshotsCount = snapshotsCounts[from];\\n\\n      if (fromSnapshotsCount != 0) {\\n        previous = snapshots[from][fromSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(from);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        from,\\n        uint128(previous),\\n        uint128(previous.sub(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(from, previous.sub(amount), delegationType);\\n    }\\n    if (to != address(0)) {\\n      uint256 previous = 0;\\n      uint256 toSnapshotsCount = snapshotsCounts[to];\\n      if (toSnapshotsCount != 0) {\\n        previous = snapshots[to][toSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(to);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        to,\\n        uint128(previous),\\n        uint128(previous.add(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(to, previous.add(amount), delegationType);\\n    }\\n  }\\n\\n  /**\\n   * @dev searches a snapshot by block number. Uses binary search.\\n   * @param snapshots the snapshots mapping\\n   * @param snapshotsCounts the number of snapshots\\n   * @param user the user for which the snapshot is being searched\\n   * @param blockNumber the block number being searched\\n   **/\\n  function _searchByBlockNumber(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address user,\\n    uint256 blockNumber\\n  ) internal view returns (uint256) {\\n    require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\\n\\n    uint256 snapshotsCount = snapshotsCounts[user];\\n\\n    if (snapshotsCount == 0) {\\n      return balanceOf(user);\\n    }\\n\\n    // First check most recent balance\\n    if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\\n      return snapshots[user][snapshotsCount - 1].value;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (snapshots[user][0].blockNumber > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint256 lower = 0;\\n    uint256 upper = snapshotsCount - 1;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Snapshot memory snapshot = snapshots[user][center];\\n      if (snapshot.blockNumber == blockNumber) {\\n        return snapshot.value;\\n      } else if (snapshot.blockNumber < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return snapshots[user][lower].value;\\n  }\\n\\n  /**\\n   * @dev returns the delegation data (snapshot, snapshotsCount, list of delegates) by delegation type\\n   * NOTE: Ideal implementation would have mapped this in a struct by delegation type. Unfortunately,\\n   * the AAVE token and StakeToken already include a mapping for the snapshots, so we require contracts\\n   * who inherit from this to provide access to the delegation data by overriding this method.\\n   * @param delegationType the type of delegation\\n   **/\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    virtual\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    );\\n\\n  /**\\n   * @dev Writes a snapshot for an owner of tokens\\n   * @param owner The owner of the tokens\\n   * @param oldValue The value before the operation that is gonna be executed after the snapshot\\n   * @param newValue The value after the operation\\n   */\\n  function _writeSnapshot(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address owner,\\n    uint128 oldValue,\\n    uint128 newValue\\n  ) internal {\\n    uint128 currentBlock = uint128(block.number);\\n\\n    uint256 ownerSnapshotsCount = snapshotsCounts[owner];\\n    mapping(uint256 => Snapshot) storage snapshotsOwner = snapshots[owner];\\n\\n    // Doing multiple operations in the same block\\n    if (\\n      ownerSnapshotsCount != 0 &&\\n      snapshotsOwner[ownerSnapshotsCount - 1].blockNumber == currentBlock\\n    ) {\\n      snapshotsOwner[ownerSnapshotsCount - 1].value = newValue;\\n    } else {\\n      snapshotsOwner[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\\n      snapshotsCounts[owner] = ownerSnapshotsCount + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the user delegatee. If a user never performed any delegation,\\n   * his delegated address will be 0x0. In that case we simply return the user itself\\n   * @param delegator the address of the user for which return the delegatee\\n   * @param delegates the array of delegates for a particular type of delegation\\n   **/\\n  function _getDelegatee(address delegator, mapping(address => address) storage delegates)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address previousDelegatee = delegates[delegator];\\n\\n    if (previousDelegatee == address(0)) {\\n      return delegator;\\n    }\\n\\n    return previousDelegatee;\\n  }\\n}\\n\\n/**\\n * @title ERC20WithSnapshot\\n * @notice ERC20 including snapshots of balances on transfer-related actions\\n * @author Aave\\n **/\\nabstract contract GovernancePowerWithSnapshot is GovernancePowerDelegationERC20 {\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @dev The following storage layout points to the prior StakedToken.sol implementation:\\n   * _snapshots => _votingSnapshots\\n   * _snapshotsCounts =>  _votingSnapshotsCounts\\n   * _aaveGovernance => _aaveGovernance\\n   */\\n  mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\\n  mapping(address => uint256) public _votingSnapshotsCounts;\\n\\n  /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\\n  /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\\n  /// to control all potential reentrancies by calling back the this contract\\n  ITransferHook public _aaveGovernance;\\n\\n  function _setAaveGovernance(ITransferHook aaveGovernance) internal virtual {\\n    _aaveGovernance = aaveGovernance;\\n  }\\n}\\n\\n/**\\n * @title StakedToken\\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\\n * @author Aave\\n **/\\ncontract StakedTokenV2Rev3 is\\n  IStakedAave,\\n  GovernancePowerWithSnapshot,\\n  VersionedInitializable,\\n  AaveDistributionManager\\n{\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev Start of Storage layout from StakedToken v1\\n  uint256 public constant REVISION = 3;\\n\\n  IERC20 public immutable STAKED_TOKEN;\\n  IERC20 public immutable REWARD_TOKEN;\\n  uint256 public immutable COOLDOWN_SECONDS;\\n\\n  /// @notice Seconds available to redeem once the cooldown period is fullfilled\\n  uint256 public immutable UNSTAKE_WINDOW;\\n\\n  /// @notice Address to pull from the rewards, needs to have approved this contract\\n  address public immutable REWARDS_VAULT;\\n\\n  mapping(address => uint256) public stakerRewardsToClaim;\\n  mapping(address => uint256) public stakersCooldowns;\\n\\n  /// @dev End of Storage layout from StakedToken v1\\n\\n  /// @dev To see the voting mappings, go to GovernancePowerWithSnapshot.sol\\n  mapping(address => address) internal _votingDelegates;\\n\\n  mapping(address => mapping(uint256 => Snapshot)) internal _propositionPowerSnapshots;\\n  mapping(address => uint256) internal _propositionPowerSnapshotsCounts;\\n  mapping(address => address) internal _propositionPowerDelegates;\\n\\n  bytes32 public DOMAIN_SEPARATOR;\\n  bytes public constant EIP712_REVISION = bytes('1');\\n  bytes32 internal constant EIP712_DOMAIN =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  /// @dev owner => next valid nonce to submit with permit()\\n  mapping(address => uint256) public _nonces;\\n\\n  event Staked(address indexed from, address indexed onBehalfOf, uint256 amount);\\n  event Redeem(address indexed from, address indexed to, uint256 amount);\\n\\n  event RewardsAccrued(address user, uint256 amount);\\n  event RewardsClaimed(address indexed from, address indexed to, uint256 amount);\\n\\n  event Cooldown(address indexed user);\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals,\\n    address governance\\n  ) public ERC20(name, symbol) AaveDistributionManager(emissionManager, distributionDuration) {\\n    STAKED_TOKEN = stakedToken;\\n    REWARD_TOKEN = rewardToken;\\n    COOLDOWN_SECONDS = cooldownSeconds;\\n    UNSTAKE_WINDOW = unstakeWindow;\\n    REWARDS_VAULT = rewardsVault;\\n    _aaveGovernance = ITransferHook(governance);\\n    ERC20._setupDecimals(decimals);\\n  }\\n\\n  /**\\n   * @dev Called by the proxy contract\\n   **/\\n  function initialize() external initializer {\\n    uint256 chainId;\\n\\n    //solium-disable-next-line\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN,\\n        keccak256(bytes(name())),\\n        keccak256(EIP712_REVISION),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n\\n    // Update lastUpdateTimestamp of stkAave to reward users since the end of the prior staking period\\n    AssetData storage assetData = assets[address(this)];\\n    assetData.lastUpdateTimestamp = 1620594720;\\n  }\\n\\n  function stake(address onBehalfOf, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    uint256 balanceOfUser = balanceOf(onBehalfOf);\\n\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(onBehalfOf, address(this), balanceOfUser, totalSupply());\\n    if (accruedRewards != 0) {\\n      emit RewardsAccrued(onBehalfOf, accruedRewards);\\n      stakerRewardsToClaim[onBehalfOf] = stakerRewardsToClaim[onBehalfOf].add(accruedRewards);\\n    }\\n\\n    stakersCooldowns[onBehalfOf] = getNextCooldownTimestamp(0, amount, onBehalfOf, balanceOfUser);\\n\\n    _mint(onBehalfOf, amount);\\n    IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit Staked(msg.sender, onBehalfOf, amount);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens, and stop earning rewards\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   **/\\n  function redeem(address to, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    //solium-disable-next-line\\n    uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\\n    require(\\n      block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\\n      'INSUFFICIENT_COOLDOWN'\\n    );\\n    require(\\n      block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n      'UNSTAKE_WINDOW_FINISHED'\\n    );\\n    uint256 balanceOfMessageSender = balanceOf(msg.sender);\\n\\n    uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\\n\\n    _updateCurrentUnclaimedRewards(msg.sender, balanceOfMessageSender, true);\\n\\n    _burn(msg.sender, amountToRedeem);\\n\\n    if (balanceOfMessageSender.sub(amountToRedeem) == 0) {\\n      stakersCooldowns[msg.sender] = 0;\\n    }\\n\\n    IERC20(STAKED_TOKEN).safeTransfer(to, amountToRedeem);\\n\\n    emit Redeem(msg.sender, to, amountToRedeem);\\n  }\\n\\n  /**\\n   * @dev Activates the cooldown period to unstake\\n   * - It can't be called if the user is not staking\\n   **/\\n  function cooldown() external override {\\n    require(balanceOf(msg.sender) != 0, 'INVALID_BALANCE_ON_COOLDOWN');\\n    //solium-disable-next-line\\n    stakersCooldowns[msg.sender] = block.timestamp;\\n\\n    emit Cooldown(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\\n   * @param to Address to stake for\\n   * @param amount Amount to stake\\n   **/\\n  function claimRewards(address to, uint256 amount) external override {\\n    uint256 newTotalRewards =\\n      _updateCurrentUnclaimedRewards(msg.sender, balanceOf(msg.sender), false);\\n    uint256 amountToClaim = (amount == type(uint256).max) ? newTotalRewards : amount;\\n\\n    stakerRewardsToClaim[msg.sender] = newTotalRewards.sub(amountToClaim, 'INVALID_AMOUNT');\\n\\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\\n\\n    emit RewardsClaimed(msg.sender, to, amountToClaim);\\n  }\\n\\n  /**\\n   * @dev Internal ERC20 _transfer of the tokenized staked tokens\\n   * @param from Address to transfer from\\n   * @param to Address to transfer to\\n   * @param amount Amount to transfer\\n   **/\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    uint256 balanceOfFrom = balanceOf(from);\\n    // Sender\\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\\n\\n    // Recipient\\n    if (from != to) {\\n      uint256 balanceOfTo = balanceOf(to);\\n      _updateCurrentUnclaimedRewards(to, balanceOfTo, true);\\n\\n      uint256 previousSenderCooldown = stakersCooldowns[from];\\n      stakersCooldowns[to] = getNextCooldownTimestamp(\\n        previousSenderCooldown,\\n        amount,\\n        to,\\n        balanceOfTo\\n      );\\n      // if cooldown was set and whole balance of sender was transferred - clear cooldown\\n      if (balanceOfFrom == amount && previousSenderCooldown != 0) {\\n        stakersCooldowns[from] = 0;\\n      }\\n    }\\n\\n    super._transfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Updates the user state related with his accrued rewards\\n   * @param user Address of the user\\n   * @param userBalance The current balance of the user\\n   * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\\n   * @return The unclaimed rewards that were added to the total accrued\\n   **/\\n  function _updateCurrentUnclaimedRewards(\\n    address user,\\n    uint256 userBalance,\\n    bool updateStorage\\n  ) internal returns (uint256) {\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(user, address(this), userBalance, totalSupply());\\n    uint256 unclaimedRewards = stakerRewardsToClaim[user].add(accruedRewards);\\n\\n    if (accruedRewards != 0) {\\n      if (updateStorage) {\\n        stakerRewardsToClaim[user] = unclaimedRewards;\\n      }\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n\\n    return unclaimedRewards;\\n  }\\n\\n  /**\\n   * @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\\n   *  - If the timestamp of the sender is \\\"better\\\" or the timestamp of the recipient is 0, we take the one of the recipient\\n   *  - Weighted average of from/to cooldown timestamps if:\\n   *    # The sender doesn't have the cooldown activated (timestamp 0).\\n   *    # The sender timestamp is expired\\n   *    # The sender has a \\\"worse\\\" timestamp\\n   *  - If the receiver's cooldown timestamp expired (too old), the next is 0\\n   * @param fromCooldownTimestamp Cooldown timestamp of the sender\\n   * @param amountToReceive Amount\\n   * @param toAddress Address of the recipient\\n   * @param toBalance Current balance of the receiver\\n   * @return The new cooldown timestamp\\n   **/\\n  function getNextCooldownTimestamp(\\n    uint256 fromCooldownTimestamp,\\n    uint256 amountToReceive,\\n    address toAddress,\\n    uint256 toBalance\\n  ) public view returns (uint256) {\\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\\n    if (toCooldownTimestamp == 0) {\\n      return 0;\\n    }\\n\\n    uint256 minimalValidCooldownTimestamp =\\n      block.timestamp.sub(COOLDOWN_SECONDS).sub(UNSTAKE_WINDOW);\\n\\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\\n      toCooldownTimestamp = 0;\\n    } else {\\n      uint256 fromCooldownTimestamp =\\n        (minimalValidCooldownTimestamp > fromCooldownTimestamp)\\n          ? block.timestamp\\n          : fromCooldownTimestamp;\\n\\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\\n        return toCooldownTimestamp;\\n      } else {\\n        toCooldownTimestamp = (\\n          amountToReceive.mul(fromCooldownTimestamp).add(toBalance.mul(toCooldownTimestamp))\\n        )\\n          .div(amountToReceive.add(toBalance));\\n      }\\n    }\\n    return toCooldownTimestamp;\\n  }\\n\\n  /**\\n   * @dev Return the total rewards pending to claim by an staker\\n   * @param staker The staker address\\n   * @return The rewards\\n   */\\n  function getTotalRewardsBalance(address staker) external view returns (uint256) {\\n    DistributionTypes.UserStakeInput[] memory userStakeInputs =\\n      new DistributionTypes.UserStakeInput[](1);\\n    userStakeInputs[0] = DistributionTypes.UserStakeInput({\\n      underlyingAsset: address(this),\\n      stakedByUser: balanceOf(staker),\\n      totalStaked: totalSupply()\\n    });\\n    return stakerRewardsToClaim[staker].add(_getUnclaimedRewards(staker, userStakeInputs));\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   * @return The revision\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner the owner of the funds\\n   * @param spender the spender\\n   * @param value the amount\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(owner != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    uint256 currentValidNonce = _nonces[owner];\\n    bytes32 digest =\\n      keccak256(\\n        abi.encodePacked(\\n          '\\\\x19\\\\x01',\\n          DOMAIN_SEPARATOR,\\n          keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n        )\\n      );\\n\\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _nonces[owner] = currentValidNonce.add(1);\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\\n   * - On _transfer, it writes snapshots for both \\\"from\\\" and \\\"to\\\"\\n   * - On _mint, only for _to\\n   * - On _burn, only for _from\\n   * @param from the from address\\n   * @param to the to address\\n   * @param amount the amount to transfer\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    address votingFromDelegatee = _votingDelegates[from];\\n    address votingToDelegatee = _votingDelegates[to];\\n\\n    if (votingFromDelegatee == address(0)) {\\n      votingFromDelegatee = from;\\n    }\\n    if (votingToDelegatee == address(0)) {\\n      votingToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      votingFromDelegatee,\\n      votingToDelegatee,\\n      amount,\\n      DelegationType.VOTING_POWER\\n    );\\n\\n    address propPowerFromDelegatee = _propositionPowerDelegates[from];\\n    address propPowerToDelegatee = _propositionPowerDelegates[to];\\n\\n    if (propPowerFromDelegatee == address(0)) {\\n      propPowerFromDelegatee = from;\\n    }\\n    if (propPowerToDelegatee == address(0)) {\\n      propPowerToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      propPowerFromDelegatee,\\n      propPowerToDelegatee,\\n      amount,\\n      DelegationType.PROPOSITION_POWER\\n    );\\n\\n    // caching the aave governance address to avoid multiple state loads\\n    ITransferHook aaveGovernance = _aaveGovernance;\\n    if (aaveGovernance != ITransferHook(0)) {\\n      aaveGovernance.onTransfer(from, to, amount);\\n    }\\n  }\\n\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    override\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    )\\n  {\\n    if (delegationType == DelegationType.VOTING_POWER) {\\n      return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\\n    } else {\\n      return (\\n        _propositionPowerSnapshots,\\n        _propositionPowerSnapshotsCounts,\\n        _propositionPowerDelegates\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateByTypeBySig(\\n    address delegatee,\\n    DelegationType delegationType,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash =\\n      keccak256(\\n        abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\\n      );\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(signatory, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n}\\n\",\"keccak256\":\"0x193e8dd33d55c137ea32793b1f2c2f06b4b8936ee5c625e38766062c4f89fb43\",\"license\":\"agpl-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"SafeMath":{"abi":[],"devdoc":{"details":"From https://github.com/OpenZeppelin/openzeppelin-contracts Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200d9a772e1ad5244127fe398486eca9dcda85d19b97800f4b9500a2d3d9f7245b64736f6c63430007050033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD SWAP11 PUSH24 0x2E1AD5244127FE398486ECA9DCDA85D19B97800F4B9500A2 0xD3 0xD9 0xF7 0x24 JUMPDEST PUSH5 0x736F6C6343 STOP SMOD SDIV STOP CALLER ","sourceMap":"6620:4342:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200d9a772e1ad5244127fe398486eca9dcda85d19b97800f4b9500a2d3d9f7245b64736f6c63430007050033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD SWAP11 PUSH24 0x2E1AD5244127FE398486ECA9DCDA85D19B97800F4B9500A2 0xD3 0xD9 0xF7 0x24 JUMPDEST PUSH5 0x736F6C6343 STOP SMOD SDIV STOP CALLER ","sourceMap":"6620:4342:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"add(uint256,uint256)":"infinite","div(uint256,uint256)":"infinite","div(uint256,uint256,string memory)":"infinite","mod(uint256,uint256)":"infinite","mod(uint256,uint256,string memory)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite","sub(uint256,uint256,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"From https://github.com/OpenZeppelin/openzeppelin-contracts Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-12-10\\n */\\n\\n// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGovernancePowerDelegationToken {\\n  enum DelegationType {VOTING_POWER, PROPOSITION_POWER}\\n\\n  /**\\n   * @dev emitted when a user delegates to another\\n   * @param delegator the delegator\\n   * @param delegatee the delegatee\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    DelegationType delegationType\\n  );\\n\\n  /**\\n   * @dev emitted when an action changes the delegated power of a user\\n   * @param user the user which delegated power has changed\\n   * @param amount the amount of delegated power for the user\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external virtual;\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (address);\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view virtual returns (uint256);\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view virtual returns (uint256);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string internal _name;\\n  string internal _symbol;\\n  uint8 private _decimals;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n   * a default value of 18.\\n   *\\n   * To select a different value for {decimals}, use {_setupDecimals}.\\n   *\\n   * All three of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name, string memory symbol) public {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = 18;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        'ERC20: decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n   *\\n   * This is internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Sets {decimals} to a value other than the default one of 18.\\n   *\\n   * WARNING: This function should only be called from the constructor. Most\\n   * applications that interact with token contracts will not expect\\n   * {decimals} to ever change, and may work incorrectly if it does.\\n   */\\n  function _setupDecimals(uint8 decimals_) internal {\\n    _decimals = decimals_;\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be to transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\\ninterface IStakedAave {\\n  function stake(address to, uint256 amount) external;\\n\\n  function redeem(address to, uint256 amount) external;\\n\\n  function cooldown() external;\\n\\n  function claimRewards(address to, uint256 amount) external;\\n}\\n\\ninterface ITransferHook {\\n  function onTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint128 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\\ninterface IAaveDistributionManager {\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external;\\n}\\n\\n/**\\n * @title AaveDistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract AaveDistributionManager is IAaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  struct AssetData {\\n    uint128 emissionPerSecond;\\n    uint128 lastUpdateTimestamp;\\n    uint256 index;\\n    mapping(address => uint256) users;\\n  }\\n\\n  uint256 public immutable DISTRIBUTION_END;\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n\\n  constructor(address emissionManager, uint256 distributionDuration) public {\\n    DISTRIBUTION_END = block.timestamp.add(distributionDuration);\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /**\\n   * @dev Configures the distribution of rewards for a list of assets\\n   * @param assetsConfigInput The list of configurations to apply\\n   **/\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external\\n    override\\n  {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address underlyingAsset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex =\\n      _getAssetIndex(oldIndex, assetConfig.emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n    if (newIndex != oldIndex) {\\n      assetConfig.index = newIndex;\\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\\n    }\\n\\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards = accruedRewards.add(\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        )\\n      );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex =\\n        _getAssetIndex(\\n          assetConfig.index,\\n          assetConfig.emissionPerSecond,\\n          assetConfig.lastUpdateTimestamp,\\n          stakes[i].totalStaked\\n        );\\n\\n      accruedRewards = accruedRewards.add(\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\\n      );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= DISTRIBUTION_END\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp =\\n      block.timestamp > DISTRIBUTION_END ? DISTRIBUTION_END : block.timestamp;\\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\\n    return\\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\\n        currentIndex\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n}\\n\\n/**\\n * @notice implementation of the AAVE token contract\\n * @author Aave\\n */\\nabstract contract GovernancePowerDelegationERC20 is ERC20, IGovernancePowerDelegationToken {\\n  using SafeMath for uint256;\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH =\\n    keccak256('DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)');\\n\\n  bytes32 public constant DELEGATE_TYPEHASH =\\n    keccak256('Delegate(address delegatee,uint256 nonce,uint256 expiry)');\\n\\n  /// @dev snapshot of a value on a specific block, used for votes\\n  struct Snapshot {\\n    uint128 blockNumber;\\n    uint128 value;\\n  }\\n\\n  /**\\n   * @dev delegates one specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external override {\\n    _delegateByType(msg.sender, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external override {\\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    return _getDelegatee(delegator, delegates);\\n  }\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\\n  }\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view override returns (uint256) {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\\n  }\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   * used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\\n   * In this initial implementation with no AAVE minting, simply returns the current supply\\n   * A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view override returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _delegateByType(\\n    address delegator,\\n    address delegatee,\\n    DelegationType delegationType\\n  ) internal {\\n    require(delegatee != address(0), 'INVALID_DELEGATEE');\\n\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    uint256 delegatorBalance = balanceOf(delegator);\\n\\n    address previousDelegatee = _getDelegatee(delegator, delegates);\\n\\n    delegates[delegator] = delegatee;\\n\\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\\n    emit DelegateChanged(delegator, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev moves delegated power from one user to another\\n   * @param from the user from which delegated power is moved\\n   * @param to the user that will receive the delegated power\\n   * @param amount the amount of delegated power to be moved\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _moveDelegatesByType(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    DelegationType delegationType\\n  ) internal {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    if (from != address(0)) {\\n      uint256 previous = 0;\\n      uint256 fromSnapshotsCount = snapshotsCounts[from];\\n\\n      if (fromSnapshotsCount != 0) {\\n        previous = snapshots[from][fromSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(from);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        from,\\n        uint128(previous),\\n        uint128(previous.sub(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(from, previous.sub(amount), delegationType);\\n    }\\n    if (to != address(0)) {\\n      uint256 previous = 0;\\n      uint256 toSnapshotsCount = snapshotsCounts[to];\\n      if (toSnapshotsCount != 0) {\\n        previous = snapshots[to][toSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(to);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        to,\\n        uint128(previous),\\n        uint128(previous.add(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(to, previous.add(amount), delegationType);\\n    }\\n  }\\n\\n  /**\\n   * @dev searches a snapshot by block number. Uses binary search.\\n   * @param snapshots the snapshots mapping\\n   * @param snapshotsCounts the number of snapshots\\n   * @param user the user for which the snapshot is being searched\\n   * @param blockNumber the block number being searched\\n   **/\\n  function _searchByBlockNumber(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address user,\\n    uint256 blockNumber\\n  ) internal view returns (uint256) {\\n    require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\\n\\n    uint256 snapshotsCount = snapshotsCounts[user];\\n\\n    if (snapshotsCount == 0) {\\n      return balanceOf(user);\\n    }\\n\\n    // First check most recent balance\\n    if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\\n      return snapshots[user][snapshotsCount - 1].value;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (snapshots[user][0].blockNumber > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint256 lower = 0;\\n    uint256 upper = snapshotsCount - 1;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Snapshot memory snapshot = snapshots[user][center];\\n      if (snapshot.blockNumber == blockNumber) {\\n        return snapshot.value;\\n      } else if (snapshot.blockNumber < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return snapshots[user][lower].value;\\n  }\\n\\n  /**\\n   * @dev returns the delegation data (snapshot, snapshotsCount, list of delegates) by delegation type\\n   * NOTE: Ideal implementation would have mapped this in a struct by delegation type. Unfortunately,\\n   * the AAVE token and StakeToken already include a mapping for the snapshots, so we require contracts\\n   * who inherit from this to provide access to the delegation data by overriding this method.\\n   * @param delegationType the type of delegation\\n   **/\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    virtual\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    );\\n\\n  /**\\n   * @dev Writes a snapshot for an owner of tokens\\n   * @param owner The owner of the tokens\\n   * @param oldValue The value before the operation that is gonna be executed after the snapshot\\n   * @param newValue The value after the operation\\n   */\\n  function _writeSnapshot(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address owner,\\n    uint128 oldValue,\\n    uint128 newValue\\n  ) internal {\\n    uint128 currentBlock = uint128(block.number);\\n\\n    uint256 ownerSnapshotsCount = snapshotsCounts[owner];\\n    mapping(uint256 => Snapshot) storage snapshotsOwner = snapshots[owner];\\n\\n    // Doing multiple operations in the same block\\n    if (\\n      ownerSnapshotsCount != 0 &&\\n      snapshotsOwner[ownerSnapshotsCount - 1].blockNumber == currentBlock\\n    ) {\\n      snapshotsOwner[ownerSnapshotsCount - 1].value = newValue;\\n    } else {\\n      snapshotsOwner[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\\n      snapshotsCounts[owner] = ownerSnapshotsCount + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the user delegatee. If a user never performed any delegation,\\n   * his delegated address will be 0x0. In that case we simply return the user itself\\n   * @param delegator the address of the user for which return the delegatee\\n   * @param delegates the array of delegates for a particular type of delegation\\n   **/\\n  function _getDelegatee(address delegator, mapping(address => address) storage delegates)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address previousDelegatee = delegates[delegator];\\n\\n    if (previousDelegatee == address(0)) {\\n      return delegator;\\n    }\\n\\n    return previousDelegatee;\\n  }\\n}\\n\\n/**\\n * @title ERC20WithSnapshot\\n * @notice ERC20 including snapshots of balances on transfer-related actions\\n * @author Aave\\n **/\\nabstract contract GovernancePowerWithSnapshot is GovernancePowerDelegationERC20 {\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @dev The following storage layout points to the prior StakedToken.sol implementation:\\n   * _snapshots => _votingSnapshots\\n   * _snapshotsCounts =>  _votingSnapshotsCounts\\n   * _aaveGovernance => _aaveGovernance\\n   */\\n  mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\\n  mapping(address => uint256) public _votingSnapshotsCounts;\\n\\n  /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\\n  /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\\n  /// to control all potential reentrancies by calling back the this contract\\n  ITransferHook public _aaveGovernance;\\n\\n  function _setAaveGovernance(ITransferHook aaveGovernance) internal virtual {\\n    _aaveGovernance = aaveGovernance;\\n  }\\n}\\n\\n/**\\n * @title StakedToken\\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\\n * @author Aave\\n **/\\ncontract StakedTokenV2Rev3 is\\n  IStakedAave,\\n  GovernancePowerWithSnapshot,\\n  VersionedInitializable,\\n  AaveDistributionManager\\n{\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev Start of Storage layout from StakedToken v1\\n  uint256 public constant REVISION = 3;\\n\\n  IERC20 public immutable STAKED_TOKEN;\\n  IERC20 public immutable REWARD_TOKEN;\\n  uint256 public immutable COOLDOWN_SECONDS;\\n\\n  /// @notice Seconds available to redeem once the cooldown period is fullfilled\\n  uint256 public immutable UNSTAKE_WINDOW;\\n\\n  /// @notice Address to pull from the rewards, needs to have approved this contract\\n  address public immutable REWARDS_VAULT;\\n\\n  mapping(address => uint256) public stakerRewardsToClaim;\\n  mapping(address => uint256) public stakersCooldowns;\\n\\n  /// @dev End of Storage layout from StakedToken v1\\n\\n  /// @dev To see the voting mappings, go to GovernancePowerWithSnapshot.sol\\n  mapping(address => address) internal _votingDelegates;\\n\\n  mapping(address => mapping(uint256 => Snapshot)) internal _propositionPowerSnapshots;\\n  mapping(address => uint256) internal _propositionPowerSnapshotsCounts;\\n  mapping(address => address) internal _propositionPowerDelegates;\\n\\n  bytes32 public DOMAIN_SEPARATOR;\\n  bytes public constant EIP712_REVISION = bytes('1');\\n  bytes32 internal constant EIP712_DOMAIN =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  /// @dev owner => next valid nonce to submit with permit()\\n  mapping(address => uint256) public _nonces;\\n\\n  event Staked(address indexed from, address indexed onBehalfOf, uint256 amount);\\n  event Redeem(address indexed from, address indexed to, uint256 amount);\\n\\n  event RewardsAccrued(address user, uint256 amount);\\n  event RewardsClaimed(address indexed from, address indexed to, uint256 amount);\\n\\n  event Cooldown(address indexed user);\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals,\\n    address governance\\n  ) public ERC20(name, symbol) AaveDistributionManager(emissionManager, distributionDuration) {\\n    STAKED_TOKEN = stakedToken;\\n    REWARD_TOKEN = rewardToken;\\n    COOLDOWN_SECONDS = cooldownSeconds;\\n    UNSTAKE_WINDOW = unstakeWindow;\\n    REWARDS_VAULT = rewardsVault;\\n    _aaveGovernance = ITransferHook(governance);\\n    ERC20._setupDecimals(decimals);\\n  }\\n\\n  /**\\n   * @dev Called by the proxy contract\\n   **/\\n  function initialize() external initializer {\\n    uint256 chainId;\\n\\n    //solium-disable-next-line\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN,\\n        keccak256(bytes(name())),\\n        keccak256(EIP712_REVISION),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n\\n    // Update lastUpdateTimestamp of stkAave to reward users since the end of the prior staking period\\n    AssetData storage assetData = assets[address(this)];\\n    assetData.lastUpdateTimestamp = 1620594720;\\n  }\\n\\n  function stake(address onBehalfOf, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    uint256 balanceOfUser = balanceOf(onBehalfOf);\\n\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(onBehalfOf, address(this), balanceOfUser, totalSupply());\\n    if (accruedRewards != 0) {\\n      emit RewardsAccrued(onBehalfOf, accruedRewards);\\n      stakerRewardsToClaim[onBehalfOf] = stakerRewardsToClaim[onBehalfOf].add(accruedRewards);\\n    }\\n\\n    stakersCooldowns[onBehalfOf] = getNextCooldownTimestamp(0, amount, onBehalfOf, balanceOfUser);\\n\\n    _mint(onBehalfOf, amount);\\n    IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit Staked(msg.sender, onBehalfOf, amount);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens, and stop earning rewards\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   **/\\n  function redeem(address to, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    //solium-disable-next-line\\n    uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\\n    require(\\n      block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\\n      'INSUFFICIENT_COOLDOWN'\\n    );\\n    require(\\n      block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n      'UNSTAKE_WINDOW_FINISHED'\\n    );\\n    uint256 balanceOfMessageSender = balanceOf(msg.sender);\\n\\n    uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\\n\\n    _updateCurrentUnclaimedRewards(msg.sender, balanceOfMessageSender, true);\\n\\n    _burn(msg.sender, amountToRedeem);\\n\\n    if (balanceOfMessageSender.sub(amountToRedeem) == 0) {\\n      stakersCooldowns[msg.sender] = 0;\\n    }\\n\\n    IERC20(STAKED_TOKEN).safeTransfer(to, amountToRedeem);\\n\\n    emit Redeem(msg.sender, to, amountToRedeem);\\n  }\\n\\n  /**\\n   * @dev Activates the cooldown period to unstake\\n   * - It can't be called if the user is not staking\\n   **/\\n  function cooldown() external override {\\n    require(balanceOf(msg.sender) != 0, 'INVALID_BALANCE_ON_COOLDOWN');\\n    //solium-disable-next-line\\n    stakersCooldowns[msg.sender] = block.timestamp;\\n\\n    emit Cooldown(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\\n   * @param to Address to stake for\\n   * @param amount Amount to stake\\n   **/\\n  function claimRewards(address to, uint256 amount) external override {\\n    uint256 newTotalRewards =\\n      _updateCurrentUnclaimedRewards(msg.sender, balanceOf(msg.sender), false);\\n    uint256 amountToClaim = (amount == type(uint256).max) ? newTotalRewards : amount;\\n\\n    stakerRewardsToClaim[msg.sender] = newTotalRewards.sub(amountToClaim, 'INVALID_AMOUNT');\\n\\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\\n\\n    emit RewardsClaimed(msg.sender, to, amountToClaim);\\n  }\\n\\n  /**\\n   * @dev Internal ERC20 _transfer of the tokenized staked tokens\\n   * @param from Address to transfer from\\n   * @param to Address to transfer to\\n   * @param amount Amount to transfer\\n   **/\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    uint256 balanceOfFrom = balanceOf(from);\\n    // Sender\\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\\n\\n    // Recipient\\n    if (from != to) {\\n      uint256 balanceOfTo = balanceOf(to);\\n      _updateCurrentUnclaimedRewards(to, balanceOfTo, true);\\n\\n      uint256 previousSenderCooldown = stakersCooldowns[from];\\n      stakersCooldowns[to] = getNextCooldownTimestamp(\\n        previousSenderCooldown,\\n        amount,\\n        to,\\n        balanceOfTo\\n      );\\n      // if cooldown was set and whole balance of sender was transferred - clear cooldown\\n      if (balanceOfFrom == amount && previousSenderCooldown != 0) {\\n        stakersCooldowns[from] = 0;\\n      }\\n    }\\n\\n    super._transfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Updates the user state related with his accrued rewards\\n   * @param user Address of the user\\n   * @param userBalance The current balance of the user\\n   * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\\n   * @return The unclaimed rewards that were added to the total accrued\\n   **/\\n  function _updateCurrentUnclaimedRewards(\\n    address user,\\n    uint256 userBalance,\\n    bool updateStorage\\n  ) internal returns (uint256) {\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(user, address(this), userBalance, totalSupply());\\n    uint256 unclaimedRewards = stakerRewardsToClaim[user].add(accruedRewards);\\n\\n    if (accruedRewards != 0) {\\n      if (updateStorage) {\\n        stakerRewardsToClaim[user] = unclaimedRewards;\\n      }\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n\\n    return unclaimedRewards;\\n  }\\n\\n  /**\\n   * @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\\n   *  - If the timestamp of the sender is \\\"better\\\" or the timestamp of the recipient is 0, we take the one of the recipient\\n   *  - Weighted average of from/to cooldown timestamps if:\\n   *    # The sender doesn't have the cooldown activated (timestamp 0).\\n   *    # The sender timestamp is expired\\n   *    # The sender has a \\\"worse\\\" timestamp\\n   *  - If the receiver's cooldown timestamp expired (too old), the next is 0\\n   * @param fromCooldownTimestamp Cooldown timestamp of the sender\\n   * @param amountToReceive Amount\\n   * @param toAddress Address of the recipient\\n   * @param toBalance Current balance of the receiver\\n   * @return The new cooldown timestamp\\n   **/\\n  function getNextCooldownTimestamp(\\n    uint256 fromCooldownTimestamp,\\n    uint256 amountToReceive,\\n    address toAddress,\\n    uint256 toBalance\\n  ) public view returns (uint256) {\\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\\n    if (toCooldownTimestamp == 0) {\\n      return 0;\\n    }\\n\\n    uint256 minimalValidCooldownTimestamp =\\n      block.timestamp.sub(COOLDOWN_SECONDS).sub(UNSTAKE_WINDOW);\\n\\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\\n      toCooldownTimestamp = 0;\\n    } else {\\n      uint256 fromCooldownTimestamp =\\n        (minimalValidCooldownTimestamp > fromCooldownTimestamp)\\n          ? block.timestamp\\n          : fromCooldownTimestamp;\\n\\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\\n        return toCooldownTimestamp;\\n      } else {\\n        toCooldownTimestamp = (\\n          amountToReceive.mul(fromCooldownTimestamp).add(toBalance.mul(toCooldownTimestamp))\\n        )\\n          .div(amountToReceive.add(toBalance));\\n      }\\n    }\\n    return toCooldownTimestamp;\\n  }\\n\\n  /**\\n   * @dev Return the total rewards pending to claim by an staker\\n   * @param staker The staker address\\n   * @return The rewards\\n   */\\n  function getTotalRewardsBalance(address staker) external view returns (uint256) {\\n    DistributionTypes.UserStakeInput[] memory userStakeInputs =\\n      new DistributionTypes.UserStakeInput[](1);\\n    userStakeInputs[0] = DistributionTypes.UserStakeInput({\\n      underlyingAsset: address(this),\\n      stakedByUser: balanceOf(staker),\\n      totalStaked: totalSupply()\\n    });\\n    return stakerRewardsToClaim[staker].add(_getUnclaimedRewards(staker, userStakeInputs));\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   * @return The revision\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner the owner of the funds\\n   * @param spender the spender\\n   * @param value the amount\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(owner != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    uint256 currentValidNonce = _nonces[owner];\\n    bytes32 digest =\\n      keccak256(\\n        abi.encodePacked(\\n          '\\\\x19\\\\x01',\\n          DOMAIN_SEPARATOR,\\n          keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n        )\\n      );\\n\\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _nonces[owner] = currentValidNonce.add(1);\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\\n   * - On _transfer, it writes snapshots for both \\\"from\\\" and \\\"to\\\"\\n   * - On _mint, only for _to\\n   * - On _burn, only for _from\\n   * @param from the from address\\n   * @param to the to address\\n   * @param amount the amount to transfer\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    address votingFromDelegatee = _votingDelegates[from];\\n    address votingToDelegatee = _votingDelegates[to];\\n\\n    if (votingFromDelegatee == address(0)) {\\n      votingFromDelegatee = from;\\n    }\\n    if (votingToDelegatee == address(0)) {\\n      votingToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      votingFromDelegatee,\\n      votingToDelegatee,\\n      amount,\\n      DelegationType.VOTING_POWER\\n    );\\n\\n    address propPowerFromDelegatee = _propositionPowerDelegates[from];\\n    address propPowerToDelegatee = _propositionPowerDelegates[to];\\n\\n    if (propPowerFromDelegatee == address(0)) {\\n      propPowerFromDelegatee = from;\\n    }\\n    if (propPowerToDelegatee == address(0)) {\\n      propPowerToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      propPowerFromDelegatee,\\n      propPowerToDelegatee,\\n      amount,\\n      DelegationType.PROPOSITION_POWER\\n    );\\n\\n    // caching the aave governance address to avoid multiple state loads\\n    ITransferHook aaveGovernance = _aaveGovernance;\\n    if (aaveGovernance != ITransferHook(0)) {\\n      aaveGovernance.onTransfer(from, to, amount);\\n    }\\n  }\\n\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    override\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    )\\n  {\\n    if (delegationType == DelegationType.VOTING_POWER) {\\n      return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\\n    } else {\\n      return (\\n        _propositionPowerSnapshots,\\n        _propositionPowerSnapshotsCounts,\\n        _propositionPowerDelegates\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateByTypeBySig(\\n    address delegatee,\\n    DelegationType delegationType,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash =\\n      keccak256(\\n        abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\\n      );\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(signatory, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n}\\n\",\"keccak256\":\"0x193e8dd33d55c137ea32793b1f2c2f06b4b8936ee5c625e38766062c4f89fb43\",\"license\":\"agpl-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"StakedTokenV2Rev3":{"abi":[{"inputs":[{"internalType":"contract IERC20","name":"stakedToken","type":"address"},{"internalType":"contract IERC20","name":"rewardToken","type":"address"},{"internalType":"uint256","name":"cooldownSeconds","type":"uint256"},{"internalType":"uint256","name":"unstakeWindow","type":"uint256"},{"internalType":"address","name":"rewardsVault","type":"address"},{"internalType":"address","name":"emissionManager","type":"address"},{"internalType":"uint128","name":"distributionDuration","type":"uint128"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"address","name":"governance","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"asset","type":"address"},{"indexed":false,"internalType":"uint256","name":"emission","type":"uint256"}],"name":"AssetConfigUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"asset","type":"address"},{"indexed":false,"internalType":"uint256","name":"index","type":"uint256"}],"name":"AssetIndexUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"}],"name":"Cooldown","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"delegator","type":"address"},{"indexed":true,"internalType":"address","name":"delegatee","type":"address"},{"indexed":false,"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"DelegateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"DelegatedPowerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Redeem","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RewardsAccrued","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RewardsClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"onBehalfOf","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Staked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"address","name":"asset","type":"address"},{"indexed":false,"internalType":"uint256","name":"index","type":"uint256"}],"name":"UserIndexUpdated","type":"event"},{"inputs":[],"name":"COOLDOWN_SECONDS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DELEGATE_BY_TYPE_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DELEGATE_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DISTRIBUTION_END","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"EIP712_REVISION","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"EMISSION_MANAGER","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PERMIT_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PRECISION","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REVISION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARDS_VAULT","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_TOKEN","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"STAKED_TOKEN","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"UNSTAKE_WINDOW","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_aaveGovernance","outputs":[{"internalType":"contract ITransferHook","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"_nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"_votingSnapshots","outputs":[{"internalType":"uint128","name":"blockNumber","type":"uint128"},{"internalType":"uint128","name":"value","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"_votingSnapshotsCounts","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"assets","outputs":[{"internalType":"uint128","name":"emissionPerSecond","type":"uint128"},{"internalType":"uint128","name":"lastUpdateTimestamp","type":"uint128"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"claimRewards","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint128","name":"emissionPerSecond","type":"uint128"},{"internalType":"uint256","name":"totalStaked","type":"uint256"},{"internalType":"address","name":"underlyingAsset","type":"address"}],"internalType":"struct DistributionTypes.AssetConfigInput[]","name":"assetsConfigInput","type":"tuple[]"}],"name":"configureAssets","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"cooldown","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"}],"name":"delegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"expiry","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"delegateBySig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"},{"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"delegateByType","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"},{"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"expiry","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"delegateByTypeBySig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegator","type":"address"},{"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"getDelegateeByType","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"fromCooldownTimestamp","type":"uint256"},{"internalType":"uint256","name":"amountToReceive","type":"uint256"},{"internalType":"address","name":"toAddress","type":"address"},{"internalType":"uint256","name":"toBalance","type":"uint256"}],"name":"getNextCooldownTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"getPowerAtBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"enum IGovernancePowerDelegationToken.DelegationType","name":"delegationType","type":"uint8"}],"name":"getPowerCurrent","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"getTotalRewardsBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"address","name":"asset","type":"address"}],"name":"getUserAssetData","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"redeem","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"onBehalfOf","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"stake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"stakerRewardsToClaim","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"stakersCooldowns","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"name":"totalSupplyAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Aave*","kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"claimRewards(address,uint256)":{"details":"Claims an `amount` of `REWARD_TOKEN` to the address `to`","params":{"amount":"Amount to stake*","to":"Address to stake for"}},"configureAssets((uint128,uint256,address)[])":{"details":"Configures the distribution of rewards for a list of assets","params":{"assetsConfigInput":"The list of configurations to apply*"}},"cooldown()":{"details":"Activates the cooldown period to unstake - It can't be called if the user is not staking*"},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"delegate(address)":{"details":"delegates all the powers to a specific user","params":{"delegatee":"the user to which the power will be delegated*"}},"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Delegates power from signatory to `delegatee`","params":{"delegatee":"The address to delegate votes to","expiry":"The time at which to expire the signature","nonce":"The contract state required to match the signature","r":"Half of the ECDSA signature pair","s":"Half of the ECDSA signature pair","v":"The recovery byte of the signature"}},"delegateByType(address,uint8)":{"details":"delegates one specific power to a delegatee","params":{"delegatee":"the user which delegated power has changed","delegationType":"the type of delegation (VOTING_POWER, PROPOSITION_POWER)*"}},"delegateByTypeBySig(address,uint8,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Delegates power from signatory to `delegatee`","params":{"delegatee":"The address to delegate votes to","delegationType":"the type of delegation (VOTING_POWER, PROPOSITION_POWER)","expiry":"The time at which to expire the signature","nonce":"The contract state required to match the signature","r":"Half of the ECDSA signature pair","s":"Half of the ECDSA signature pair","v":"The recovery byte of the signature"}},"getDelegateeByType(address,uint8)":{"details":"returns the delegatee of an user","params":{"delegator":"the address of the delegator*"}},"getNextCooldownTimestamp(uint256,uint256,address,uint256)":{"details":"Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation  - If the timestamp of the sender is \"better\" or the timestamp of the recipient is 0, we take the one of the recipient  - Weighted average of from/to cooldown timestamps if:    # The sender doesn't have the cooldown activated (timestamp 0).    # The sender timestamp is expired    # The sender has a \"worse\" timestamp  - If the receiver's cooldown timestamp expired (too old), the next is 0","params":{"amountToReceive":"Amount","fromCooldownTimestamp":"Cooldown timestamp of the sender","toAddress":"Address of the recipient","toBalance":"Current balance of the receiver"},"returns":{"_0":"The new cooldown timestamp*"}},"getPowerAtBlock(address,uint256,uint8)":{"details":"returns the delegated power of a user at a certain block","params":{"user":"the user*"}},"getPowerCurrent(address,uint8)":{"details":"returns the current delegated power of a user. The current power is the power delegated at the time of the last snapshot","params":{"user":"the user*"}},"getTotalRewardsBalance(address)":{"details":"Return the total rewards pending to claim by an staker","params":{"staker":"The staker address"},"returns":{"_0":"The rewards"}},"getUserAssetData(address,address)":{"details":"Returns the data of an user on a distribution","params":{"asset":"The address of the reference asset of the distribution","user":"Address of the user"},"returns":{"_0":"The new index*"}},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"initialize()":{"details":"Called by the proxy contract*"},"name()":{"details":"Returns the name of the token."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md","params":{"deadline":"the deadline timestamp, type(uint256).max for no deadline","owner":"the owner of the funds","r":"signature param","s":"signature param","spender":"the spender","v":"signature param","value":"the amount"}},"redeem(address,uint256)":{"details":"Redeems staked tokens, and stop earning rewards","params":{"amount":"Amount to redeem*","to":"Address to redeem to"}},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"totalSupplyAt(uint256)":{"details":"returns the total supply at a certain block number used by the voting strategy contracts to calculate the total votes needed for threshold/quorum In this initial implementation with no AAVE minting, simply returns the current supply A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future*"},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}},"stateVariables":{"REVISION":{"details":"Start of Storage layout from StakedToken v1"},"_nonces":{"details":"owner => next valid nonce to submit with permit()"},"_votingDelegates":{"details":"To see the voting mappings, go to GovernancePowerWithSnapshot.sol"}},"title":"StakedToken","version":1},"evm":{"bytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3147:2","statements":[{"nodeType":"YulBlock","src":"6:3:2","statements":[]},{"body":{"nodeType":"YulBlock","src":"76:117:2","statements":[{"nodeType":"YulAssignment","src":"86:22:2","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"101:6:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"95:5:2"},"nodeType":"YulFunctionCall","src":"95:13:2"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"86:5:2"}]},{"body":{"nodeType":"YulBlock","src":"171:16:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"180:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"183:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"173:6:2"},"nodeType":"YulFunctionCall","src":"173:12:2"},"nodeType":"YulExpressionStatement","src":"173:12:2"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"130:5:2"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"141:5:2"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"156:3:2","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"161:1:2","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"152:3:2"},"nodeType":"YulFunctionCall","src":"152:11:2"},{"kind":"number","nodeType":"YulLiteral","src":"165:1:2","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"148:3:2"},"nodeType":"YulFunctionCall","src":"148:19:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"137:3:2"},"nodeType":"YulFunctionCall","src":"137:31:2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"127:2:2"},"nodeType":"YulFunctionCall","src":"127:42:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"120:6:2"},"nodeType":"YulFunctionCall","src":"120:50:2"},"nodeType":"YulIf","src":"117:2:2"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"55:6:2","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"66:5:2","type":""}],"src":"14:179:2"},{"body":{"nodeType":"YulBlock","src":"264:813:2","statements":[{"body":{"nodeType":"YulBlock","src":"313:24:2","statements":[{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"322:5:2"},{"name":"array","nodeType":"YulIdentifier","src":"329:5:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"315:6:2"},"nodeType":"YulFunctionCall","src":"315:20:2"},"nodeType":"YulExpressionStatement","src":"315:20:2"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"292:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"300:4:2","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"288:3:2"},"nodeType":"YulFunctionCall","src":"288:17:2"},{"name":"end","nodeType":"YulIdentifier","src":"307:3:2"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"284:3:2"},"nodeType":"YulFunctionCall","src":"284:27:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"277:6:2"},"nodeType":"YulFunctionCall","src":"277:35:2"},"nodeType":"YulIf","src":"274:2:2"},{"nodeType":"YulVariableDeclaration","src":"346:27:2","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"366:6:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"360:5:2"},"nodeType":"YulFunctionCall","src":"360:13:2"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"350:6:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"382:28:2","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"400:2:2","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"404:1:2","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"396:3:2"},"nodeType":"YulFunctionCall","src":"396:10:2"},{"kind":"number","nodeType":"YulLiteral","src":"408:1:2","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"392:3:2"},"nodeType":"YulFunctionCall","src":"392:18:2"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"386:2:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"437:13:2","statements":[{"expression":{"arguments":[],"functionName":{"name":"invalid","nodeType":"YulIdentifier","src":"439:7:2"},"nodeType":"YulFunctionCall","src":"439:9:2"},"nodeType":"YulExpressionStatement","src":"439:9:2"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"425:6:2"},{"name":"_1","nodeType":"YulIdentifier","src":"433:2:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"422:2:2"},"nodeType":"YulFunctionCall","src":"422:14:2"},"nodeType":"YulIf","src":"419:2:2"},{"nodeType":"YulVariableDeclaration","src":"459:23:2","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"479:2:2","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"473:5:2"},"nodeType":"YulFunctionCall","src":"473:9:2"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"463:6:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"491:14:2","value":{"kind":"number","nodeType":"YulLiteral","src":"501:4:2","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"495:2:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"514:71:2","value":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"540:6:2"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"556:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"564:4:2","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"552:3:2"},"nodeType":"YulFunctionCall","src":"552:17:2"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"575:2:2","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"571:3:2"},"nodeType":"YulFunctionCall","src":"571:7:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"548:3:2"},"nodeType":"YulFunctionCall","src":"548:31:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"536:3:2"},"nodeType":"YulFunctionCall","src":"536:44:2"},{"name":"_2","nodeType":"YulIdentifier","src":"582:2:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"532:3:2"},"nodeType":"YulFunctionCall","src":"532:53:2"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"518:10:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"644:13:2","statements":[{"expression":{"arguments":[],"functionName":{"name":"invalid","nodeType":"YulIdentifier","src":"646:7:2"},"nodeType":"YulFunctionCall","src":"646:9:2"},"nodeType":"YulExpressionStatement","src":"646:9:2"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"603:10:2"},{"name":"_1","nodeType":"YulIdentifier","src":"615:2:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"600:2:2"},"nodeType":"YulFunctionCall","src":"600:18:2"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"623:10:2"},{"name":"memPtr","nodeType":"YulIdentifier","src":"635:6:2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"620:2:2"},"nodeType":"YulFunctionCall","src":"620:22:2"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"597:2:2"},"nodeType":"YulFunctionCall","src":"597:46:2"},"nodeType":"YulIf","src":"594:2:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"673:2:2","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"677:10:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"666:6:2"},"nodeType":"YulFunctionCall","src":"666:22:2"},"nodeType":"YulExpressionStatement","src":"666:22:2"},{"nodeType":"YulAssignment","src":"697:15:2","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"706:6:2"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"697:5:2"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"728:6:2"},{"name":"length","nodeType":"YulIdentifier","src":"736:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"721:6:2"},"nodeType":"YulFunctionCall","src":"721:22:2"},"nodeType":"YulExpressionStatement","src":"721:22:2"},{"body":{"nodeType":"YulBlock","src":"793:16:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"802:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"805:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"795:6:2"},"nodeType":"YulFunctionCall","src":"795:12:2"},"nodeType":"YulExpressionStatement","src":"795:12:2"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"766:6:2"},{"name":"length","nodeType":"YulIdentifier","src":"774:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"762:3:2"},"nodeType":"YulFunctionCall","src":"762:19:2"},{"name":"_2","nodeType":"YulIdentifier","src":"783:2:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"758:3:2"},"nodeType":"YulFunctionCall","src":"758:28:2"},{"name":"end","nodeType":"YulIdentifier","src":"788:3:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"755:2:2"},"nodeType":"YulFunctionCall","src":"755:37:2"},"nodeType":"YulIf","src":"752:2:2"},{"nodeType":"YulVariableDeclaration","src":"818:10:2","value":{"kind":"number","nodeType":"YulLiteral","src":"827:1:2","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"822:1:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"887:87:2","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"916:6:2"},{"name":"i","nodeType":"YulIdentifier","src":"924:1:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"912:3:2"},"nodeType":"YulFunctionCall","src":"912:14:2"},{"name":"_2","nodeType":"YulIdentifier","src":"928:2:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"908:3:2"},"nodeType":"YulFunctionCall","src":"908:23:2"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"947:6:2"},{"name":"i","nodeType":"YulIdentifier","src":"955:1:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"943:3:2"},"nodeType":"YulFunctionCall","src":"943:14:2"},{"name":"_2","nodeType":"YulIdentifier","src":"959:2:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"939:3:2"},"nodeType":"YulFunctionCall","src":"939:23:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"933:5:2"},"nodeType":"YulFunctionCall","src":"933:30:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"901:6:2"},"nodeType":"YulFunctionCall","src":"901:63:2"},"nodeType":"YulExpressionStatement","src":"901:63:2"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"848:1:2"},{"name":"length","nodeType":"YulIdentifier","src":"851:6:2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"845:2:2"},"nodeType":"YulFunctionCall","src":"845:13:2"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"859:19:2","statements":[{"nodeType":"YulAssignment","src":"861:15:2","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"870:1:2"},{"name":"_2","nodeType":"YulIdentifier","src":"873:2:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"866:3:2"},"nodeType":"YulFunctionCall","src":"866:10:2"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"861:1:2"}]}]},"pre":{"nodeType":"YulBlock","src":"841:3:2","statements":[]},"src":"837:137:2"},{"body":{"nodeType":"YulBlock","src":"1008:63:2","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1037:6:2"},{"name":"length","nodeType":"YulIdentifier","src":"1045:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1033:3:2"},"nodeType":"YulFunctionCall","src":"1033:19:2"},{"name":"_2","nodeType":"YulIdentifier","src":"1054:2:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1029:3:2"},"nodeType":"YulFunctionCall","src":"1029:28:2"},{"kind":"number","nodeType":"YulLiteral","src":"1059:1:2","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1022:6:2"},"nodeType":"YulFunctionCall","src":"1022:39:2"},"nodeType":"YulExpressionStatement","src":"1022:39:2"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"989:1:2"},{"name":"length","nodeType":"YulIdentifier","src":"992:6:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"986:2:2"},"nodeType":"YulFunctionCall","src":"986:13:2"},"nodeType":"YulIf","src":"983:2:2"}]},"name":"abi_decode_t_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"238:6:2","type":""},{"name":"end","nodeType":"YulTypedName","src":"246:3:2","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"254:5:2","type":""}],"src":"198:879:2"},{"body":{"nodeType":"YulBlock","src":"1144:117:2","statements":[{"nodeType":"YulAssignment","src":"1154:22:2","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1169:6:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1163:5:2"},"nodeType":"YulFunctionCall","src":"1163:13:2"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1154:5:2"}]},{"body":{"nodeType":"YulBlock","src":"1239:16:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1248:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1251:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1241:6:2"},"nodeType":"YulFunctionCall","src":"1241:12:2"},"nodeType":"YulExpressionStatement","src":"1241:12:2"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1198:5:2"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1209:5:2"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1224:3:2","type":"","value":"128"},{"kind":"number","nodeType":"YulLiteral","src":"1229:1:2","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1220:3:2"},"nodeType":"YulFunctionCall","src":"1220:11:2"},{"kind":"number","nodeType":"YulLiteral","src":"1233:1:2","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1216:3:2"},"nodeType":"YulFunctionCall","src":"1216:19:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1205:3:2"},"nodeType":"YulFunctionCall","src":"1205:31:2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1195:2:2"},"nodeType":"YulFunctionCall","src":"1195:42:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1188:6:2"},"nodeType":"YulFunctionCall","src":"1188:50:2"},"nodeType":"YulIf","src":"1185:2:2"}]},"name":"abi_decode_t_uint128_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1123:6:2","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1134:5:2","type":""}],"src":"1082:179:2"},{"body":{"nodeType":"YulBlock","src":"1326:102:2","statements":[{"nodeType":"YulAssignment","src":"1336:22:2","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1351:6:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1345:5:2"},"nodeType":"YulFunctionCall","src":"1345:13:2"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1336:5:2"}]},{"body":{"nodeType":"YulBlock","src":"1406:16:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1415:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1418:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1408:6:2"},"nodeType":"YulFunctionCall","src":"1408:12:2"},"nodeType":"YulExpressionStatement","src":"1408:12:2"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1380:5:2"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1391:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"1398:4:2","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1387:3:2"},"nodeType":"YulFunctionCall","src":"1387:16:2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1377:2:2"},"nodeType":"YulFunctionCall","src":"1377:27:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1370:6:2"},"nodeType":"YulFunctionCall","src":"1370:35:2"},"nodeType":"YulIf","src":"1367:2:2"}]},"name":"abi_decode_t_uint8_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1305:6:2","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1316:5:2","type":""}],"src":"1266:162:2"},{"body":{"nodeType":"YulBlock","src":"1731:1058:2","statements":[{"body":{"nodeType":"YulBlock","src":"1778:26:2","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"1787:6:2"},{"name":"value4","nodeType":"YulIdentifier","src":"1795:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1780:6:2"},"nodeType":"YulFunctionCall","src":"1780:22:2"},"nodeType":"YulExpressionStatement","src":"1780:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1752:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"1761:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1748:3:2"},"nodeType":"YulFunctionCall","src":"1748:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"1773:3:2","type":"","value":"352"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1744:3:2"},"nodeType":"YulFunctionCall","src":"1744:33:2"},"nodeType":"YulIf","src":"1741:2:2"},{"nodeType":"YulAssignment","src":"1813:52:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1855:9:2"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1823:31:2"},"nodeType":"YulFunctionCall","src":"1823:42:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1813:6:2"}]},{"nodeType":"YulAssignment","src":"1874:61:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1920:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"1931:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1916:3:2"},"nodeType":"YulFunctionCall","src":"1916:18:2"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1884:31:2"},"nodeType":"YulFunctionCall","src":"1884:51:2"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1874:6:2"}]},{"nodeType":"YulAssignment","src":"1944:35:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1964:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"1975:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1960:3:2"},"nodeType":"YulFunctionCall","src":"1960:18:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1954:5:2"},"nodeType":"YulFunctionCall","src":"1954:25:2"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1944:6:2"}]},{"nodeType":"YulAssignment","src":"1988:35:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2008:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2019:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2004:3:2"},"nodeType":"YulFunctionCall","src":"2004:18:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1998:5:2"},"nodeType":"YulFunctionCall","src":"1998:25:2"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1988:6:2"}]},{"nodeType":"YulAssignment","src":"2032:62:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2078:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2089:3:2","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2074:3:2"},"nodeType":"YulFunctionCall","src":"2074:19:2"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"2042:31:2"},"nodeType":"YulFunctionCall","src":"2042:52:2"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"2032:6:2"}]},{"nodeType":"YulAssignment","src":"2103:62:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2149:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2160:3:2","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2145:3:2"},"nodeType":"YulFunctionCall","src":"2145:19:2"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"2113:31:2"},"nodeType":"YulFunctionCall","src":"2113:52:2"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"2103:6:2"}]},{"nodeType":"YulAssignment","src":"2174:62:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2220:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2231:3:2","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2216:3:2"},"nodeType":"YulFunctionCall","src":"2216:19:2"}],"functionName":{"name":"abi_decode_t_uint128_fromMemory","nodeType":"YulIdentifier","src":"2184:31:2"},"nodeType":"YulFunctionCall","src":"2184:52:2"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"2174:6:2"}]},{"nodeType":"YulVariableDeclaration","src":"2245:40:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2269:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2280:3:2","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2265:3:2"},"nodeType":"YulFunctionCall","src":"2265:19:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2259:5:2"},"nodeType":"YulFunctionCall","src":"2259:26:2"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2249:6:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"2328:26:2","statements":[{"expression":{"arguments":[{"name":"value7","nodeType":"YulIdentifier","src":"2337:6:2"},{"name":"value7","nodeType":"YulIdentifier","src":"2345:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2330:6:2"},"nodeType":"YulFunctionCall","src":"2330:22:2"},"nodeType":"YulExpressionStatement","src":"2330:22:2"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2300:6:2"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2316:2:2","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2320:1:2","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2312:3:2"},"nodeType":"YulFunctionCall","src":"2312:10:2"},{"kind":"number","nodeType":"YulLiteral","src":"2324:1:2","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2308:3:2"},"nodeType":"YulFunctionCall","src":"2308:18:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2297:2:2"},"nodeType":"YulFunctionCall","src":"2297:30:2"},"nodeType":"YulIf","src":"2294:2:2"},{"nodeType":"YulAssignment","src":"2363:73:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2408:9:2"},{"name":"offset","nodeType":"YulIdentifier","src":"2419:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2404:3:2"},"nodeType":"YulFunctionCall","src":"2404:22:2"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2428:7:2"}],"functionName":{"name":"abi_decode_t_string_fromMemory","nodeType":"YulIdentifier","src":"2373:30:2"},"nodeType":"YulFunctionCall","src":"2373:63:2"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"2363:6:2"}]},{"nodeType":"YulVariableDeclaration","src":"2445:42:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2471:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2482:3:2","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2467:3:2"},"nodeType":"YulFunctionCall","src":"2467:19:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2461:5:2"},"nodeType":"YulFunctionCall","src":"2461:26:2"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"2449:8:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"2532:26:2","statements":[{"expression":{"arguments":[{"name":"value8","nodeType":"YulIdentifier","src":"2541:6:2"},{"name":"value8","nodeType":"YulIdentifier","src":"2549:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2534:6:2"},"nodeType":"YulFunctionCall","src":"2534:22:2"},"nodeType":"YulExpressionStatement","src":"2534:22:2"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"2502:8:2"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2520:2:2","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2524:1:2","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2516:3:2"},"nodeType":"YulFunctionCall","src":"2516:10:2"},{"kind":"number","nodeType":"YulLiteral","src":"2528:1:2","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2512:3:2"},"nodeType":"YulFunctionCall","src":"2512:18:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2499:2:2"},"nodeType":"YulFunctionCall","src":"2499:32:2"},"nodeType":"YulIf","src":"2496:2:2"},{"nodeType":"YulAssignment","src":"2567:75:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2612:9:2"},{"name":"offset_1","nodeType":"YulIdentifier","src":"2623:8:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2608:3:2"},"nodeType":"YulFunctionCall","src":"2608:24:2"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2634:7:2"}],"functionName":{"name":"abi_decode_t_string_fromMemory","nodeType":"YulIdentifier","src":"2577:30:2"},"nodeType":"YulFunctionCall","src":"2577:65:2"},"variableNames":[{"name":"value8","nodeType":"YulIdentifier","src":"2567:6:2"}]},{"nodeType":"YulAssignment","src":"2651:60:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2695:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2706:3:2","type":"","value":"288"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2691:3:2"},"nodeType":"YulFunctionCall","src":"2691:19:2"}],"functionName":{"name":"abi_decode_t_uint8_fromMemory","nodeType":"YulIdentifier","src":"2661:29:2"},"nodeType":"YulFunctionCall","src":"2661:50:2"},"variableNames":[{"name":"value9","nodeType":"YulIdentifier","src":"2651:6:2"}]},{"nodeType":"YulAssignment","src":"2720:63:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2767:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2778:3:2","type":"","value":"320"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2763:3:2"},"nodeType":"YulFunctionCall","src":"2763:19:2"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"2731:31:2"},"nodeType":"YulFunctionCall","src":"2731:52:2"},"variableNames":[{"name":"value10","nodeType":"YulIdentifier","src":"2720:7:2"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$176t_contract$_IERC20_$176t_uint256t_uint256t_addresst_addresst_uint128t_string_memory_ptrt_string_memory_ptrt_uint8t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1616:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1627:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1639:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1647:6:2","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1655:6:2","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1663:6:2","type":""},{"name":"value4","nodeType":"YulTypedName","src":"1671:6:2","type":""},{"name":"value5","nodeType":"YulTypedName","src":"1679:6:2","type":""},{"name":"value6","nodeType":"YulTypedName","src":"1687:6:2","type":""},{"name":"value7","nodeType":"YulTypedName","src":"1695:6:2","type":""},{"name":"value8","nodeType":"YulTypedName","src":"1703:6:2","type":""},{"name":"value9","nodeType":"YulTypedName","src":"1711:6:2","type":""},{"name":"value10","nodeType":"YulTypedName","src":"1719:7:2","type":""}],"src":"1433:1356:2"},{"body":{"nodeType":"YulBlock","src":"2968:177:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2985:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2996:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2978:6:2"},"nodeType":"YulFunctionCall","src":"2978:21:2"},"nodeType":"YulExpressionStatement","src":"2978:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3019:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3030:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3015:3:2"},"nodeType":"YulFunctionCall","src":"3015:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"3035:2:2","type":"","value":"27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3008:6:2"},"nodeType":"YulFunctionCall","src":"3008:30:2"},"nodeType":"YulExpressionStatement","src":"3008:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3058:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3069:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3054:3:2"},"nodeType":"YulFunctionCall","src":"3054:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"3074:29:2","type":"","value":"SafeMath: addition overflow"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3047:6:2"},"nodeType":"YulFunctionCall","src":"3047:57:2"},"nodeType":"YulExpressionStatement","src":"3047:57:2"},{"nodeType":"YulAssignment","src":"3113:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3125:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3136:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3121:3:2"},"nodeType":"YulFunctionCall","src":"3121:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3113:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2945:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2959:4:2","type":""}],"src":"2794:351:2"}]},"contents":"{\n    { }\n    function abi_decode_t_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_t_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let length := mload(offset)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(length, _1) { invalid() }\n        let memPtr := mload(64)\n        let _2 := 0x20\n        let newFreePtr := add(add(memPtr, and(add(length, 0x1f), not(31))), _2)\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(64, newFreePtr)\n        array := memPtr\n        mstore(memPtr, length)\n        if gt(add(add(offset, length), _2), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, length) { i := add(i, _2) }\n        {\n            mstore(add(add(memPtr, i), _2), mload(add(add(offset, i), _2)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(memPtr, length), _2), 0)\n        }\n    }\n    function abi_decode_t_uint128_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(128, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_t_uint8_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$176t_contract$_IERC20_$176t_uint256t_uint256t_addresst_addresst_uint128t_string_memory_ptrt_string_memory_ptrt_uint8t_address_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10\n    {\n        if slt(sub(dataEnd, headStart), 352) { revert(value4, value4) }\n        value0 := abi_decode_t_address_fromMemory(headStart)\n        value1 := abi_decode_t_address_fromMemory(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n        value4 := abi_decode_t_address_fromMemory(add(headStart, 128))\n        value5 := abi_decode_t_address_fromMemory(add(headStart, 160))\n        value6 := abi_decode_t_uint128_fromMemory(add(headStart, 192))\n        let offset := mload(add(headStart, 224))\n        if gt(offset, sub(shl(64, 1), 1)) { revert(value7, value7) }\n        value7 := abi_decode_t_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 256))\n        if gt(offset_1, sub(shl(64, 1), 1)) { revert(value8, value8) }\n        value8 := abi_decode_t_string_fromMemory(add(headStart, offset_1), dataEnd)\n        value9 := abi_decode_t_uint8_fromMemory(add(headStart, 288))\n        value10 := abi_decode_t_address_fromMemory(add(headStart, 320))\n    }\n    function abi_encode_tuple_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"SafeMath: addition overflow\")\n        tail := add(headStart, 96)\n    }\n}","id":2,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"61016060405260006009553480156200001757600080fd5b5060405162004aec38038062004aec8339810160408190526200003a9162000303565b85856001600160801b0316858581600390805190602001906200005f9291906200016d565b508051620000759060049060208401906200016d565b505060058054601260ff19909116179055506200009f42826200011f602090811b62001ea117901c565b60805250606090811b6001600160601b031990811660a0528c821b811660c0528b821b811660e0526101008b90526101208a90529088901b1661014052600880546001600160a01b0319166001600160a01b0383161790556200010e8262000157602090811b62001ee017901c565b505050505050505050505062000441565b600082820183811015620001505760405162461bcd60e51b815260040162000147906200040a565b60405180910390fd5b9392505050565b6005805460ff191660ff92909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620001a55760008555620001f0565b82601f10620001c057805160ff1916838001178555620001f0565b82800160010185558215620001f0579182015b82811115620001f0578251825591602001919060010190620001d3565b50620001fe92915062000202565b5090565b5b80821115620001fe576000815560010162000203565b80516001600160a01b03811681146200023157600080fd5b919050565b600082601f83011262000247578081fd5b81516001600160401b03808211156200025c57fe5b6040516020601f8401601f19168201810183811183821017156200027c57fe5b806040525081945083825286818588010111156200029957600080fd5b600092505b83831015620002bd57858301810151828401820152918201916200029e565b83831115620002cf5760008185840101525b5050505092915050565b80516001600160801b03811681146200023157600080fd5b805160ff811681146200023157600080fd5b60008060008060008060008060008060006101608c8e03121562000325578687fd5b620003308c62000219565b9a506200034060208d0162000219565b995060408c0151985060608c015197506200035e60808d0162000219565b96506200036e60a08d0162000219565b95506200037e60c08d01620002d9565b60e08d01519095506001600160401b038111156200039a578485fd5b620003a88e828f0162000236565b6101008e015190955090506001600160401b03811115620003c7578384fd5b620003d58e828f0162000236565b935050620003e76101208d01620002f1565b9150620003f86101408d0162000219565b90509295989b509295989b9093969950565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60805160a05160601c60c05160601c60e05160601c61010051610120516101405160601c61460a620004e260003980610f6952806111195250806108115280610ad15280611bd85250806107b352806108395280610c2a5280611bfd52508061101652806110e252508061090c5280610a6752806113a452508061144152806118ce525080610f455280613531528061357652806135a3525061460a6000f3fe608060405234801561001057600080fd5b50600436106103365760003560e01c8063919cd40f116101b2578063b2f4201d116100f9578063d505accf116100a2578063dde43cba1161007c578063dde43cba14610623578063f11b81881461062b578063f1cc432a1461064d578063f713d8a81461066057610336565b8063d505accf146105ea578063dc937e1c146105fd578063dd62ed3e1461061057610336565b8063c3863ada116100d3578063c3863ada146105c7578063c3cda520146105cf578063cbcbb507146105e257610336565b8063b2f4201d1461058e578063b9844d8d146105a1578063c2ffbb91146105b457610336565b8063a457c2d71161015b578063aaf5eb6811610135578063aaf5eb6814610560578063adc9772e14610568578063b2a5dbfa1461057b57610336565b8063a457c2d714610532578063a9059cbb14610545578063aa9fbe021461055857610336565b8063981b24d01161018c578063981b24d01461050457806399248ea7146105175780639a99b4f01461051f57610336565b8063919cd40f146104ec578063946776cd146104f457806395d89b41146104fc57610336565b8063395093511161028157806372b49d631161022a5780637bb73c97116102045780637bb73c97146104ab5780637e90d7ef146104be5780638129fc1c146104d15780638dbefee2146104d957610336565b806372b49d6314610493578063781603761461049b578063787a08a6146104a357610336565b80635c19a95c1161025b5780635c19a95c1461045a5780636f50458d1461046d57806370a082311461048057610336565b8063395093511461041e57806341cbf54a146104315780635b3cc0cf1461043957610336565b806330adf81f116102e35780633373ee4c116102bd5780633373ee4c146103fb578063359c4a961461040e5780633644e5151461041657610336565b806330adf81f146103c9578063312f6b83146103d1578063313ce567146103e657610336565b806318160ddd1161031457806318160ddd146103995780631e9a6950146103a157806323b872dd146103b657610336565b806306fdde031461033b578063091030c314610359578063095ea7b314610379575b600080fd5b610343610673565b6040516103509190613e44565b60405180910390f35b61036c6103673660046138f3565b610727565b6040516103509190613d39565b61038c610387366004613a3d565b610739565b6040516103509190613d2e565b61036c610757565b6103b46103af366004613a3d565b61075d565b005b61038c6103c436600461393f565b61099f565b61036c610a41565b6103d9610a65565b6040516103509190613cb6565b6103ee610a89565b6040516103509190614505565b61036c61040936600461390d565b610a92565b61036c610acf565b61036c610af3565b61038c61042c366004613a3d565b610af9565b61036c610b54565b61044c610447366004613a3d565b610b78565b6040516103509291906144a1565b6103b46104683660046138f3565b610bbf565b6103d961047b3660046139e3565b610bda565b61036c61048e3660046138f3565b610bfc565b61036c610c28565b610343610c4c565b6103b4610c85565b61036c6104b93660046138f3565b610cfe565b61036c6104cc3660046138f3565b610d10565b6103b4610d22565b61036c6104e73660046138f3565b610e7a565b61036c610f43565b6103d9610f67565b610343610f8b565b61036c610512366004613bb8565b61100a565b6103d9611014565b6103b461052d366004613a3d565b611038565b61038c610540366004613a3d565b6111aa565b61038c610553366004613a3d565b61121f565b61036c611233565b6103ee611257565b6103b4610576366004613a3d565b61125c565b6103b4610589366004613af8565b611429565b61036c61059c3660046139e3565b61164b565b61036c6105af3660046138f3565b611673565b61036c6105c2366004613a66565b611685565b6103d96116ae565b6103b46105dd366004613aa1565b6116ca565b6103d96118cc565b6103b46105f836600461397a565b6118f0565b6103b461060b3660046139e3565b611b0c565b61036c61061e36600461390d565b611b1b565b61036c611b53565b61063e6106393660046138f3565b611b58565b604051610350939291906144c4565b61036c61065b366004613bd0565b611b9c565b6103b461066e366004613a0c565b611c9e565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561071d5780601f106106f25761010080835404028352916020019161071d565b820191906000526020600020905b81548152906001019060200180831161070057829003601f168201915b5050505050905090565b603e6020526000908152604090205481565b600061074d610746611f14565b8484611f18565b5060015b92915050565b60025490565b8061079d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490613f56565b60405180910390fd5b336000908152603e60205260409020546107d7817f0000000000000000000000000000000000000000000000000000000000000000611ea1565b421161080f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490613ff9565b7f000000000000000000000000000000000000000000000000000000000000000061086461085d837f0000000000000000000000000000000000000000000000000000000000000000611ea1565b4290612027565b111561089c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614280565b60006108a733610bfc565b905060008184116108b857836108ba565b815b90506108c833836001612069565b506108d33382612127565b6108dd8282612027565b6108f257336000908152603e60205260408120555b61093373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168683612257565b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd12200efa34901b99367694174c3b0d32c99585fdf37c7c26892136ddd0836d9836040516109909190613d39565b60405180910390a35050505050565b60006109ac8484846122f8565b610a36846109b8611f14565b610a31856040518060600160405280602881526020016145886028913973ffffffffffffffffffffffffffffffffffffffff8a16600090815260016020526040812090610a03611f14565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604001600020549190612405565b611f18565b5060015b9392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b7f000000000000000000000000000000000000000000000000000000000000000081565b60055460ff1690565b73ffffffffffffffffffffffffffffffffffffffff8082166000908152603c60209081526040808320938616835260029093019052205492915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60435481565b600061074d610b06611f14565b84610a318560016000610b17611f14565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918c168152925290205490611ea1565b7f9a9a49b990ba9bb39f8048c490a40ab25c18f55d208d5fbcf958261a9b48716d81565b60066020908152600092835260408084209091529082529020546fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041682565b610bcb3382600061244b565b610bd73382600161244b565b50565b600080610be68361258e565b92505050610bf484826125c8565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081905260409020545b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b610c8e33610bfc565b610cc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906143a8565b336000818152603e6020526040808220429055517ff52f50426b32362d3e6bb8cb36b7074756b224622def6352a59eac7f66ebe6e89190a2565b60076020526000908152604090205481565b603d6020526000908152604090205481565b6000610d2c612600565b90506009548111610d69576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107949061408d565b6009819055467f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f610d98610673565b8051602091820120604080518082018252600181527f31000000000000000000000000000000000000000000000000000000000000009084015251610e0493927fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6918691309101613ded565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529181528151602092830120604355306000908152603c909252902080546fffffffffffffffffffffffffffffffff167360985020000000000000000000000000000000001790555050565b60408051600180825281830190925260009160609190816020015b610e9d613861565b815260200190600190039081610e9557905050905060405180606001604052803073ffffffffffffffffffffffffffffffffffffffff168152602001610ee285610bfc565b8152602001610eef610757565b81525081600081518110610eff57fe5b6020026020010181905250610a3a610f178483612605565b73ffffffffffffffffffffffffffffffffffffffff85166000908152603d602052604090205490611ea1565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561071d5780601f106106f25761010080835404028352916020019161071d565b6000610751610757565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061104e3361104733610bfc565b6000612069565b905060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831461107f5782611081565b815b90506110cd816040518060400160405280600e81526020017f494e56414c49445f414d4f554e54000000000000000000000000000000000000815250846124059092919063ffffffff16565b336000908152603d602052604090205561113f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000008684612733565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9310ccfcb8de723f578a9e4282ea9f521f05ae40dc08f3068dfad528a65ee3c78360405161119c9190613d39565b60405180910390a350505050565b600061074d6111b7611f14565b84610a31856040518060600160405280602581526020016145b060259139600160006111e1611f14565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918d16815292529020549190612405565b600061074d61122c611f14565b84846122f8565b7f10d8d059343739efce7dad10d09f0806da52b252b3e6a7951920d2d6ec4102e581565b601281565b80611293576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490613f56565b600061129e83610bfc565b905060006112b58430846112b0610757565b612754565b9050801561134d577f2468f9268c60ad90e2d49edb0032c8a001e733ae888b3ab8e982edf535be1a7684826040516112ee929190613d08565b60405180910390a173ffffffffffffffffffffffffffffffffffffffff84166000908152603d60205260409020546113269082611ea1565b73ffffffffffffffffffffffffffffffffffffffff85166000908152603d60205260409020555b61135a6000848685611b9c565b73ffffffffffffffffffffffffffffffffffffffff85166000908152603e602052604090205561138a848461282d565b6113cc73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016333086612733565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5dac0c1b1112564a045ba943c9d50270893e8e826c49be8e7073adc713ab7bd78560405161119c9190613d39565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614611498576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614158565b60005b81811015611646576000603c60008585858181106114b557fe5b90506060020160400160208101906114cd91906138f3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061154c84848481811061151857fe5b905060600201604001602081019061153091906138f3565b8286868681811061153d57fe5b90506060020160200135612922565b5083838381811061155957fe5b61156f9260206060909202019081019150613b88565b81547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff919091161781558383838181106115b757fe5b90506060020160400160208101906115cf91906138f3565b73ffffffffffffffffffffffffffffffffffffffff167f87fa03892a0556cb6b8f97e6d533a150d4d55fcbf275fff5fa003fa636bcc7fa85858581811061161257fe5b6116289260206060909202019081019150613b88565b6040516116359190614484565b60405180910390a25060010161149b565b505050565b60008060006116598461258e565b509150915061166a82828743612a21565b95945050505050565b60446020526000908152604090205481565b60008060006116938461258e565b50915091506116a482828888612a21565b9695505050505050565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b60007f9a9a49b990ba9bb39f8048c490a40ab25c18f55d208d5fbcf958261a9b48716d8787876040516020016117039493929190613d83565b604051602081830303815290604052805190602001209050600060435482604051602001611732929190613c80565b60405160208183030381529060405280519060200120905060006001828787876040516000815260200160405260405161176f9493929190613e26565b6020604051602081039080840390855afa158015611791573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116611809576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490613fc2565b73ffffffffffffffffffffffffffffffffffffffff81166000908152604460205260409020805460018101909155881461186f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614121565b864211156118a9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906140ea565b6118b5818a600061244b565b6118c1818a600161244b565b505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff871661193d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107949061418f565b83421115611977576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906140ea565b73ffffffffffffffffffffffffffffffffffffffff871660009081526044602090815260408083205460435491519093926119de917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918d918d918d9189918e9101613d42565b60405160208183030381529060405280519060200120604051602001611a05929190613c80565b60405160208183030381529060405280519060200120905060018186868660405160008152602001604052604051611a409493929190613e26565b6020604051602081039080840390855afa158015611a62573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614611ad0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490613fc2565b611adb826001611ea1565b73ffffffffffffffffffffffffffffffffffffffff8a166000908152604460205260409020556118c1898989611f18565b611b1733838361244b565b5050565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b600381565b603c60205260009081526040902080546001909101546fffffffffffffffffffffffffffffffff808316927001000000000000000000000000000000009004169083565b73ffffffffffffffffffffffffffffffffffffffff82166000908152603e602052604081205480611bd1576000915050610bf4565b6000611c277f0000000000000000000000000000000000000000000000000000000000000000611c21427f0000000000000000000000000000000000000000000000000000000000000000612027565b90612027565b905081811115611c3a5760009150611c94565b6000878211611c495787611c4b565b425b905082811015611c6057829350505050610bf4565b611c90611c6d8887611ea1565b611c8a611c7a8887612d39565b611c848b86612d39565b90611ea1565b90612d8d565b9250505b5095945050505050565b60007f10d8d059343739efce7dad10d09f0806da52b252b3e6a7951920d2d6ec4102e588886001811115611cce57fe5b8888604051602001611ce4959493929190613db4565b604051602081830303815290604052805190602001209050600060435482604051602001611d13929190613c80565b604051602081830303815290604052805190602001209050600060018287878760405160008152602001604052604051611d509493929190613e26565b6020604051602081039080840390855afa158015611d72573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116611dea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490613fc2565b73ffffffffffffffffffffffffffffffffffffffff811660009081526044602052604090208054600181019091558814611e50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614121565b86421115611e8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906140ea565b611e95818b8b61244b565b50505050505050505050565b600082820183811015610a3a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490613f1f565b600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b3390565b73ffffffffffffffffffffffffffffffffffffffff8316611f65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906142b7565b73ffffffffffffffffffffffffffffffffffffffff8216611fb2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490613ec2565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061201a908590613d39565b60405180910390a3505050565b6000610a3a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612405565b60008061207a8530866112b0610757565b73ffffffffffffffffffffffffffffffffffffffff86166000908152603d6020526040812054919250906120ae9083611ea1565b9050811561166a5783156120e55773ffffffffffffffffffffffffffffffffffffffff86166000908152603d602052604090208190555b7f2468f9268c60ad90e2d49edb0032c8a001e733ae888b3ab8e982edf535be1a768683604051612116929190613d08565b60405180910390a195945050505050565b73ffffffffffffffffffffffffffffffffffffffff8216612174576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906141c6565b61218082600083612dcf565b6121ca816040518060600160405280602281526020016145406022913973ffffffffffffffffffffffffffffffffffffffff85166000908152602081905260409020549190612405565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020556002546121fd9082612027565b60025560405160009073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061224b908590613d39565b60405180910390a35050565b6116468363a9059cbb60e01b8484604051602401612276929190613d08565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612f53565b600061230384610bfc565b905061231184826001612069565b508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146123f457600061235084610bfc565b905061235e84826001612069565b5073ffffffffffffffffffffffffffffffffffffffff85166000908152603e602052604090205461239181858785611b9c565b73ffffffffffffffffffffffffffffffffffffffff86166000908152603e602052604090205582841480156123c557508015155b156123f15773ffffffffffffffffffffffffffffffffffffffff86166000908152603e60205260408120555b50505b6123ff8484846130a0565b50505050565b60008184841115612443576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107949190613e44565b505050900390565b73ffffffffffffffffffffffffffffffffffffffff8216612498576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906143df565b60006124a38261258e565b9250505060006124b285610bfc565b905060006124c086846125c8565b73ffffffffffffffffffffffffffffffffffffffff878116600090815260208690526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001691881691909117905590506125218186848761322a565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fe8d51c8e11bd570db1734c8ec775785330e77007feed45c43b608ef33ff914bd8660405161257e9190613e57565b60405180910390a3505050505050565b600080808084600181111561259f57fe5b14156125b557506006915060079050603f6125c1565b50604091506041905060425b9193909250565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526020839052604081205490911680610a3a5783915050610751565b600390565b600080805b835181101561272b576000603c600086848151811061262557fe5b6020908102919091018101515173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160009081206001810154815488519294506126b0926fffffffffffffffffffffffffffffffff80831692700100000000000000000000000000000000900416908a908890811061269f57fe5b602002602001015160400151613500565b905061271f6127188785815181106126c457fe5b602002602001015160200151838560020160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613614565b8590611ea1565b9350505060010161260a565b509392505050565b6123ff846323b872dd60e01b85858560405160240161227693929190613cd7565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152603c60209081526040808320938816835260028401909152812054909190828061279c888588612922565b90508083146128215786156127b9576127b6878285613614565b91505b73ffffffffffffffffffffffffffffffffffffffff808a1660008181526002870160205260409081902084905551918a16917fbb123b5c06d5408bbea3c4fef481578175cfb432e3b482c6186f02ed9086585b90612818908590613d39565b60405180910390a35b50979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff821661287a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107949061444d565b61288660008383612dcf565b6002546128939082611ea1565b60025573ffffffffffffffffffffffffffffffffffffffff82166000908152602081905260409020546128c69082611ea1565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081905260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061224b908590613d39565b600182015482546000919070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff164281141561296357509050610a3a565b84546000906129879084906fffffffffffffffffffffffffffffffff168488613500565b90508281146129e8578086600101819055508673ffffffffffffffffffffffffffffffffffffffff167f5777ca300dfe5bead41006fbce4389794dbc0ed8d6cccebfaf94630aa04184bc826040516129df9190613d39565b60405180910390a25b85546fffffffffffffffffffffffffffffffff428116700100000000000000000000000000000000029116178655925050509392505050565b600043821115612a5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614314565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020859052604090205480612a9957612a9184610bfc565b915050610bf4565b73ffffffffffffffffffffffffffffffffffffffff84166000908152602087815260408083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff850184529091529020546fffffffffffffffffffffffffffffffff168310612b815773ffffffffffffffffffffffffffffffffffffffff84166000908152602087815260408083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909401835292905220546fffffffffffffffffffffffffffffffff700100000000000000000000000000000000909104169050610bf4565b73ffffffffffffffffffffffffffffffffffffffff84166000908152602087815260408083208380529091529020546fffffffffffffffffffffffffffffffff16831015612bd3576000915050610bf4565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82015b81811115612cd8576002828203048103612c11613898565b5073ffffffffffffffffffffffffffffffffffffffff8716600090815260208a815260408083208484528252918290208251808401909352546fffffffffffffffffffffffffffffffff8082168085527001000000000000000000000000000000009092041691830191909152871415612ca757602001516fffffffffffffffffffffffffffffffff169450610bf49350505050565b80516fffffffffffffffffffffffffffffffff16871115612cca57819350612cd1565b6001820392505b5050612bf9565b5073ffffffffffffffffffffffffffffffffffffffff851660009081526020888152604080832093835292905220546fffffffffffffffffffffffffffffffff70010000000000000000000000000000000090910416915050949350505050565b600082612d4857506000610751565b82820282848281612d5557fe5b0414610a3a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614030565b6000610a3a83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613636565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152603f6020526040808220548584168352912054908216911681612e0d578491505b73ffffffffffffffffffffffffffffffffffffffff8116612e2b5750825b612e38828285600061322a565b73ffffffffffffffffffffffffffffffffffffffff808616600090815260426020526040808220548784168352912054908216911681612e76578691505b73ffffffffffffffffffffffffffffffffffffffff8116612e945750845b612ea1828287600161322a565b60085473ffffffffffffffffffffffffffffffffffffffff168015612f49576040517f4a39314900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690634a39314990612f16908b908b908b90600401613cd7565b600060405180830381600087803b158015612f3057600080fd5b505af1158015612f44573d6000803e3d6000fd5b505050505b5050505050505050565b612f728273ffffffffffffffffffffffffffffffffffffffff16613687565b612fa8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614416565b600060608373ffffffffffffffffffffffffffffffffffffffff1683604051612fd19190613c64565b6000604051808303816000865af19150503d806000811461300e576040519150601f19603f3d011682016040523d82523d6000602084013e613013565b606091505b50915091508161304f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490613f8d565b8051156123ff578080602001905181019061306a9190613b68565b6123ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107949061434b565b73ffffffffffffffffffffffffffffffffffffffff83166130ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614223565b73ffffffffffffffffffffffffffffffffffffffff821661313a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490613e65565b613145838383612dcf565b61318f816040518060600160405280602681526020016145626026913973ffffffffffffffffffffffffffffffffffffffff86166000908152602081905260409020549190612405565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526020819052604080822093909355908416815220546131cb9082611ea1565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526020819052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061201a908590613d39565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415613263576123ff565b60008061326f8361258e565b50909250905073ffffffffffffffffffffffffffffffffffffffff8616156133b95773ffffffffffffffffffffffffffffffffffffffff8616600090815260208290526040812054801561333b5773ffffffffffffffffffffffffffffffffffffffff88166000908152602085815260408083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8501845290915290205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff169150613347565b61334488610bfc565b91505b61335d84848a85613358818c612027565b6136c0565b73ffffffffffffffffffffffffffffffffffffffff88167fa0a19463ee116110c9b282012d9b65cc5522dc38a9520340cbaf3142e550127f61339f8489612027565b876040516133ae9291906144f1565b60405180910390a250505b73ffffffffffffffffffffffffffffffffffffffff8516156134f85773ffffffffffffffffffffffffffffffffffffffff8516600090815260208290526040812054801561347f5773ffffffffffffffffffffffffffffffffffffffff87166000908152602085815260408083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8501845290915290205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16915061348b565b61348887610bfc565b91505b61349c84848985613358818c611ea1565b73ffffffffffffffffffffffffffffffffffffffff87167fa0a19463ee116110c9b282012d9b65cc5522dc38a9520340cbaf3142e550127f6134de8489611ea1565b876040516134ed9291906144f1565b60405180910390a250505b505050505050565b600083158061350d575081155b80613529575042836fffffffffffffffffffffffffffffffff16145b8061356657507f0000000000000000000000000000000000000000000000000000000000000000836fffffffffffffffffffffffffffffffff1610155b15613572575083610bf4565b60007f000000000000000000000000000000000000000000000000000000000000000042116135a157426135c3565b7f00000000000000000000000000000000000000000000000000000000000000005b905060006135e3826fffffffffffffffffffffffffffffffff8716612027565b905061360987611c8486611c8a670de0b6b3a76400006136038c88612d39565b90612d39565b979650505050505050565b6000610bf4670de0b6b3a7640000611c8a61362f8686612027565b8790612d39565b60008183613671576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107949190613e44565b50600083858161367d57fe5b0495945050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610bf4575050151592915050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602085815260408083205491889052909120439190811580159061374557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82016000908152602082905260409020546fffffffffffffffffffffffffffffffff8481169116145b156137ae577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8201600090815260208290526040902080546fffffffffffffffffffffffffffffffff808716700100000000000000000000000000000000029116179055612f49565b6040805180820182526fffffffffffffffffffffffffffffffff8086168252868116602080840191825260008781528682528581209451855493518516700100000000000000000000000000000000029085167fffffffffffffffffffffffffffffffff00000000000000000000000000000000909416939093179093169190911790925573ffffffffffffffffffffffffffffffffffffffff8916815290899052206001830190555050505050505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b604080518082019091526000808252602082015290565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c2357600080fd5b803560028110610c2357600080fd5b803560ff81168114610c2357600080fd5b600060208284031215613904578081fd5b610a3a826138af565b6000806040838503121561391f578081fd5b613928836138af565b9150613936602084016138af565b90509250929050565b600080600060608486031215613953578081fd5b61395c846138af565b925061396a602085016138af565b9150604084013590509250925092565b600080600080600080600060e0888a031215613994578283fd5b61399d886138af565b96506139ab602089016138af565b955060408801359450606088013593506139c7608089016138e2565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156139f5578182fd5b6139fe836138af565b9150613936602084016138d3565b600080600080600080600060e0888a031215613a26578283fd5b613a2f886138af565b96506139ab602089016138d3565b60008060408385031215613a4f578182fd5b613a58836138af565b946020939093013593505050565b600080600060608486031215613a7a578283fd5b613a83846138af565b925060208401359150613a98604085016138d3565b90509250925092565b60008060008060008060c08789031215613ab9578182fd5b613ac2876138af565b95506020870135945060408701359350613ade606088016138e2565b92506080870135915060a087013590509295509295509295565b60008060208385031215613b0a578182fd5b823567ffffffffffffffff80821115613b21578384fd5b818501915085601f830112613b34578384fd5b813581811115613b42578485fd5b866020606083028501011115613b56578485fd5b60209290920196919550909350505050565b600060208284031215613b79578081fd5b81518015158114610a3a578182fd5b600060208284031215613b99578081fd5b81356fffffffffffffffffffffffffffffffff81168114610a3a578182fd5b600060208284031215613bc9578081fd5b5035919050565b60008060008060808587031215613be5578182fd5b8435935060208501359250613bfc604086016138af565b9396929550929360600135925050565b60008151808452613c24816020860160208601614513565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60028110613c6057fe5b9052565b60008251613c76818460208701614513565b9190910192915050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b90815260200190565b95865273ffffffffffffffffffffffffffffffffffffffff94851660208701529290931660408501526060840152608083019190915260a082015260c00190565b93845273ffffffffffffffffffffffffffffffffffffffff9290921660208401526040830152606082015260800190565b94855273ffffffffffffffffffffffffffffffffffffffff93909316602085015260408401919091526060830152608082015260a00190565b94855260208501939093526040840191909152606083015273ffffffffffffffffffffffffffffffffffffffff16608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610a3a6020830184613c0c565b602081016107518284613c56565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201527f6573730000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526013908201527f494e56414c49445f5a45524f5f414d4f554e5400000000000000000000000000604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b60208082526011908201527f494e56414c49445f5349474e4154555245000000000000000000000000000000604082015260600190565b60208082526015908201527f494e53554646494349454e545f434f4f4c444f574e0000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201527f656e20696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b60208082526012908201527f494e56414c49445f45585049524154494f4e0000000000000000000000000000604082015260600190565b6020808252600d908201527f494e56414c49445f4e4f4e434500000000000000000000000000000000000000604082015260600190565b60208082526015908201527f4f4e4c595f454d495353494f4e5f4d414e414745520000000000000000000000604082015260600190565b6020808252600d908201527f494e56414c49445f4f574e455200000000000000000000000000000000000000604082015260600190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526017908201527f554e5354414b455f57494e444f575f46494e4953484544000000000000000000604082015260600190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460408201527f7265737300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f494e56414c49445f424c4f434b5f4e554d424552000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f494e56414c49445f42414c414e43455f4f4e5f434f4f4c444f574e0000000000604082015260600190565b60208082526011908201527f494e56414c49445f44454c454741544545000000000000000000000000000000604082015260600190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b6fffffffffffffffffffffffffffffffff91909116815260200190565b6fffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6fffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b82815260408101610a3a6020830184613c56565b60ff91909116815260200190565b60005b8381101561452e578181015183820152602001614516565b838111156123ff575050600091015256fe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220d9afcb6de361626b27fc92962c175da28aa67a46f2ee48ab626d5a4a8f4d156664736f6c63430007050033","opcodes":"PUSH2 0x160 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x9 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x4AEC CODESIZE SUB DUP1 PUSH3 0x4AEC DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x3A SWAP2 PUSH3 0x303 JUMP JUMPDEST DUP6 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP6 DUP6 DUP2 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x5F SWAP3 SWAP2 SWAP1 PUSH3 0x16D JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x75 SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x16D JUMP JUMPDEST POP POP PUSH1 0x5 DUP1 SLOAD PUSH1 0x12 PUSH1 0xFF NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE POP PUSH3 0x9F TIMESTAMP DUP3 PUSH3 0x11F PUSH1 0x20 SWAP1 DUP2 SHL PUSH3 0x1EA1 OR SWAP1 SHR JUMP JUMPDEST PUSH1 0x80 MSTORE POP PUSH1 0x60 SWAP1 DUP2 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0xA0 MSTORE DUP13 DUP3 SHL DUP2 AND PUSH1 0xC0 MSTORE DUP12 DUP3 SHL DUP2 AND PUSH1 0xE0 MSTORE PUSH2 0x100 DUP12 SWAP1 MSTORE PUSH2 0x120 DUP11 SWAP1 MSTORE SWAP1 DUP9 SWAP1 SHL AND PUSH2 0x140 MSTORE PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH3 0x10E DUP3 PUSH3 0x157 PUSH1 0x20 SWAP1 DUP2 SHL PUSH3 0x1EE0 OR SWAP1 SHR JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP PUSH3 0x441 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH3 0x150 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x147 SWAP1 PUSH3 0x40A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x1A5 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x1F0 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x1C0 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x1F0 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x1F0 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x1F0 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x1D3 JUMP JUMPDEST POP PUSH3 0x1FE SWAP3 SWAP2 POP PUSH3 0x202 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x1FE JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x203 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x231 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x247 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x25C JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND DUP3 ADD DUP2 ADD DUP4 DUP2 GT DUP4 DUP3 LT OR ISZERO PUSH3 0x27C JUMPI INVALID JUMPDEST DUP1 PUSH1 0x40 MSTORE POP DUP2 SWAP5 POP DUP4 DUP3 MSTORE DUP7 DUP2 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 POP JUMPDEST DUP4 DUP4 LT ISZERO PUSH3 0x2BD JUMPI DUP6 DUP4 ADD DUP2 ADD MLOAD DUP3 DUP5 ADD DUP3 ADD MSTORE SWAP2 DUP3 ADD SWAP2 PUSH3 0x29E JUMP JUMPDEST DUP4 DUP4 GT ISZERO PUSH3 0x2CF JUMPI PUSH1 0x0 DUP2 DUP6 DUP5 ADD ADD MSTORE JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x231 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH3 0x231 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x160 DUP13 DUP15 SUB SLT ISZERO PUSH3 0x325 JUMPI DUP7 DUP8 REVERT JUMPDEST PUSH3 0x330 DUP13 PUSH3 0x219 JUMP JUMPDEST SWAP11 POP PUSH3 0x340 PUSH1 0x20 DUP14 ADD PUSH3 0x219 JUMP JUMPDEST SWAP10 POP PUSH1 0x40 DUP13 ADD MLOAD SWAP9 POP PUSH1 0x60 DUP13 ADD MLOAD SWAP8 POP PUSH3 0x35E PUSH1 0x80 DUP14 ADD PUSH3 0x219 JUMP JUMPDEST SWAP7 POP PUSH3 0x36E PUSH1 0xA0 DUP14 ADD PUSH3 0x219 JUMP JUMPDEST SWAP6 POP PUSH3 0x37E PUSH1 0xC0 DUP14 ADD PUSH3 0x2D9 JUMP JUMPDEST PUSH1 0xE0 DUP14 ADD MLOAD SWAP1 SWAP6 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x39A JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH3 0x3A8 DUP15 DUP3 DUP16 ADD PUSH3 0x236 JUMP JUMPDEST PUSH2 0x100 DUP15 ADD MLOAD SWAP1 SWAP6 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x3C7 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH3 0x3D5 DUP15 DUP3 DUP16 ADD PUSH3 0x236 JUMP JUMPDEST SWAP4 POP POP PUSH3 0x3E7 PUSH2 0x120 DUP14 ADD PUSH3 0x2F1 JUMP JUMPDEST SWAP2 POP PUSH3 0x3F8 PUSH2 0x140 DUP14 ADD PUSH3 0x219 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP1 SWAP4 SWAP7 SWAP10 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH1 0xC0 MLOAD PUSH1 0x60 SHR PUSH1 0xE0 MLOAD PUSH1 0x60 SHR PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH1 0x60 SHR PUSH2 0x460A PUSH3 0x4E2 PUSH1 0x0 CODECOPY DUP1 PUSH2 0xF69 MSTORE DUP1 PUSH2 0x1119 MSTORE POP DUP1 PUSH2 0x811 MSTORE DUP1 PUSH2 0xAD1 MSTORE DUP1 PUSH2 0x1BD8 MSTORE POP DUP1 PUSH2 0x7B3 MSTORE DUP1 PUSH2 0x839 MSTORE DUP1 PUSH2 0xC2A MSTORE DUP1 PUSH2 0x1BFD MSTORE POP DUP1 PUSH2 0x1016 MSTORE DUP1 PUSH2 0x10E2 MSTORE POP DUP1 PUSH2 0x90C MSTORE DUP1 PUSH2 0xA67 MSTORE DUP1 PUSH2 0x13A4 MSTORE POP DUP1 PUSH2 0x1441 MSTORE DUP1 PUSH2 0x18CE MSTORE POP DUP1 PUSH2 0xF45 MSTORE DUP1 PUSH2 0x3531 MSTORE DUP1 PUSH2 0x3576 MSTORE DUP1 PUSH2 0x35A3 MSTORE POP PUSH2 0x460A PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x336 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x919CD40F GT PUSH2 0x1B2 JUMPI DUP1 PUSH4 0xB2F4201D GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xD505ACCF GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xDDE43CBA GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xDDE43CBA EQ PUSH2 0x623 JUMPI DUP1 PUSH4 0xF11B8188 EQ PUSH2 0x62B JUMPI DUP1 PUSH4 0xF1CC432A EQ PUSH2 0x64D JUMPI DUP1 PUSH4 0xF713D8A8 EQ PUSH2 0x660 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x5EA JUMPI DUP1 PUSH4 0xDC937E1C EQ PUSH2 0x5FD JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x610 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0xC3863ADA GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0xC3863ADA EQ PUSH2 0x5C7 JUMPI DUP1 PUSH4 0xC3CDA520 EQ PUSH2 0x5CF JUMPI DUP1 PUSH4 0xCBCBB507 EQ PUSH2 0x5E2 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0xB2F4201D EQ PUSH2 0x58E JUMPI DUP1 PUSH4 0xB9844D8D EQ PUSH2 0x5A1 JUMPI DUP1 PUSH4 0xC2FFBB91 EQ PUSH2 0x5B4 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x15B JUMPI DUP1 PUSH4 0xAAF5EB68 GT PUSH2 0x135 JUMPI DUP1 PUSH4 0xAAF5EB68 EQ PUSH2 0x560 JUMPI DUP1 PUSH4 0xADC9772E EQ PUSH2 0x568 JUMPI DUP1 PUSH4 0xB2A5DBFA EQ PUSH2 0x57B JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x532 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x545 JUMPI DUP1 PUSH4 0xAA9FBE02 EQ PUSH2 0x558 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0x981B24D0 GT PUSH2 0x18C JUMPI DUP1 PUSH4 0x981B24D0 EQ PUSH2 0x504 JUMPI DUP1 PUSH4 0x99248EA7 EQ PUSH2 0x517 JUMPI DUP1 PUSH4 0x9A99B4F0 EQ PUSH2 0x51F JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0x919CD40F EQ PUSH2 0x4EC JUMPI DUP1 PUSH4 0x946776CD EQ PUSH2 0x4F4 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x4FC JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0x39509351 GT PUSH2 0x281 JUMPI DUP1 PUSH4 0x72B49D63 GT PUSH2 0x22A JUMPI DUP1 PUSH4 0x7BB73C97 GT PUSH2 0x204 JUMPI DUP1 PUSH4 0x7BB73C97 EQ PUSH2 0x4AB JUMPI DUP1 PUSH4 0x7E90D7EF EQ PUSH2 0x4BE JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x4D1 JUMPI DUP1 PUSH4 0x8DBEFEE2 EQ PUSH2 0x4D9 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0x72B49D63 EQ PUSH2 0x493 JUMPI DUP1 PUSH4 0x78160376 EQ PUSH2 0x49B JUMPI DUP1 PUSH4 0x787A08A6 EQ PUSH2 0x4A3 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0x5C19A95C GT PUSH2 0x25B JUMPI DUP1 PUSH4 0x5C19A95C EQ PUSH2 0x45A JUMPI DUP1 PUSH4 0x6F50458D EQ PUSH2 0x46D JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x480 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x41E JUMPI DUP1 PUSH4 0x41CBF54A EQ PUSH2 0x431 JUMPI DUP1 PUSH4 0x5B3CC0CF EQ PUSH2 0x439 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0x30ADF81F GT PUSH2 0x2E3 JUMPI DUP1 PUSH4 0x3373EE4C GT PUSH2 0x2BD JUMPI DUP1 PUSH4 0x3373EE4C EQ PUSH2 0x3FB JUMPI DUP1 PUSH4 0x359C4A96 EQ PUSH2 0x40E JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x416 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0x30ADF81F EQ PUSH2 0x3C9 JUMPI DUP1 PUSH4 0x312F6B83 EQ PUSH2 0x3D1 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x3E6 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x314 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x399 JUMPI DUP1 PUSH4 0x1E9A6950 EQ PUSH2 0x3A1 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x3B6 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x33B JUMPI DUP1 PUSH4 0x91030C3 EQ PUSH2 0x359 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x379 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x343 PUSH2 0x673 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x350 SWAP2 SWAP1 PUSH2 0x3E44 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x36C PUSH2 0x367 CALLDATASIZE PUSH1 0x4 PUSH2 0x38F3 JUMP JUMPDEST PUSH2 0x727 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x350 SWAP2 SWAP1 PUSH2 0x3D39 JUMP JUMPDEST PUSH2 0x38C PUSH2 0x387 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A3D JUMP JUMPDEST PUSH2 0x739 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x350 SWAP2 SWAP1 PUSH2 0x3D2E JUMP JUMPDEST PUSH2 0x36C PUSH2 0x757 JUMP JUMPDEST PUSH2 0x3B4 PUSH2 0x3AF CALLDATASIZE PUSH1 0x4 PUSH2 0x3A3D JUMP JUMPDEST PUSH2 0x75D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x38C PUSH2 0x3C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x393F JUMP JUMPDEST PUSH2 0x99F JUMP JUMPDEST PUSH2 0x36C PUSH2 0xA41 JUMP JUMPDEST PUSH2 0x3D9 PUSH2 0xA65 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x350 SWAP2 SWAP1 PUSH2 0x3CB6 JUMP JUMPDEST PUSH2 0x3EE PUSH2 0xA89 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x350 SWAP2 SWAP1 PUSH2 0x4505 JUMP JUMPDEST PUSH2 0x36C PUSH2 0x409 CALLDATASIZE PUSH1 0x4 PUSH2 0x390D JUMP JUMPDEST PUSH2 0xA92 JUMP JUMPDEST PUSH2 0x36C PUSH2 0xACF JUMP JUMPDEST PUSH2 0x36C PUSH2 0xAF3 JUMP JUMPDEST PUSH2 0x38C PUSH2 0x42C CALLDATASIZE PUSH1 0x4 PUSH2 0x3A3D JUMP JUMPDEST PUSH2 0xAF9 JUMP JUMPDEST PUSH2 0x36C PUSH2 0xB54 JUMP JUMPDEST PUSH2 0x44C PUSH2 0x447 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A3D JUMP JUMPDEST PUSH2 0xB78 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x350 SWAP3 SWAP2 SWAP1 PUSH2 0x44A1 JUMP JUMPDEST PUSH2 0x3B4 PUSH2 0x468 CALLDATASIZE PUSH1 0x4 PUSH2 0x38F3 JUMP JUMPDEST PUSH2 0xBBF JUMP JUMPDEST PUSH2 0x3D9 PUSH2 0x47B CALLDATASIZE PUSH1 0x4 PUSH2 0x39E3 JUMP JUMPDEST PUSH2 0xBDA JUMP JUMPDEST PUSH2 0x36C PUSH2 0x48E CALLDATASIZE PUSH1 0x4 PUSH2 0x38F3 JUMP JUMPDEST PUSH2 0xBFC JUMP JUMPDEST PUSH2 0x36C PUSH2 0xC28 JUMP JUMPDEST PUSH2 0x343 PUSH2 0xC4C JUMP JUMPDEST PUSH2 0x3B4 PUSH2 0xC85 JUMP JUMPDEST PUSH2 0x36C PUSH2 0x4B9 CALLDATASIZE PUSH1 0x4 PUSH2 0x38F3 JUMP JUMPDEST PUSH2 0xCFE JUMP JUMPDEST PUSH2 0x36C PUSH2 0x4CC CALLDATASIZE PUSH1 0x4 PUSH2 0x38F3 JUMP JUMPDEST PUSH2 0xD10 JUMP JUMPDEST PUSH2 0x3B4 PUSH2 0xD22 JUMP JUMPDEST PUSH2 0x36C PUSH2 0x4E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x38F3 JUMP JUMPDEST PUSH2 0xE7A JUMP JUMPDEST PUSH2 0x36C PUSH2 0xF43 JUMP JUMPDEST PUSH2 0x3D9 PUSH2 0xF67 JUMP JUMPDEST PUSH2 0x343 PUSH2 0xF8B JUMP JUMPDEST PUSH2 0x36C PUSH2 0x512 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BB8 JUMP JUMPDEST PUSH2 0x100A JUMP JUMPDEST PUSH2 0x3D9 PUSH2 0x1014 JUMP JUMPDEST PUSH2 0x3B4 PUSH2 0x52D CALLDATASIZE PUSH1 0x4 PUSH2 0x3A3D JUMP JUMPDEST PUSH2 0x1038 JUMP JUMPDEST PUSH2 0x38C PUSH2 0x540 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A3D JUMP JUMPDEST PUSH2 0x11AA JUMP JUMPDEST PUSH2 0x38C PUSH2 0x553 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A3D JUMP JUMPDEST PUSH2 0x121F JUMP JUMPDEST PUSH2 0x36C PUSH2 0x1233 JUMP JUMPDEST PUSH2 0x3EE PUSH2 0x1257 JUMP JUMPDEST PUSH2 0x3B4 PUSH2 0x576 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A3D JUMP JUMPDEST PUSH2 0x125C JUMP JUMPDEST PUSH2 0x3B4 PUSH2 0x589 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AF8 JUMP JUMPDEST PUSH2 0x1429 JUMP JUMPDEST PUSH2 0x36C PUSH2 0x59C CALLDATASIZE PUSH1 0x4 PUSH2 0x39E3 JUMP JUMPDEST PUSH2 0x164B JUMP JUMPDEST PUSH2 0x36C PUSH2 0x5AF CALLDATASIZE PUSH1 0x4 PUSH2 0x38F3 JUMP JUMPDEST PUSH2 0x1673 JUMP JUMPDEST PUSH2 0x36C PUSH2 0x5C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A66 JUMP JUMPDEST PUSH2 0x1685 JUMP JUMPDEST PUSH2 0x3D9 PUSH2 0x16AE JUMP JUMPDEST PUSH2 0x3B4 PUSH2 0x5DD CALLDATASIZE PUSH1 0x4 PUSH2 0x3AA1 JUMP JUMPDEST PUSH2 0x16CA JUMP JUMPDEST PUSH2 0x3D9 PUSH2 0x18CC JUMP JUMPDEST PUSH2 0x3B4 PUSH2 0x5F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x397A JUMP JUMPDEST PUSH2 0x18F0 JUMP JUMPDEST PUSH2 0x3B4 PUSH2 0x60B CALLDATASIZE PUSH1 0x4 PUSH2 0x39E3 JUMP JUMPDEST PUSH2 0x1B0C JUMP JUMPDEST PUSH2 0x36C PUSH2 0x61E CALLDATASIZE PUSH1 0x4 PUSH2 0x390D JUMP JUMPDEST PUSH2 0x1B1B JUMP JUMPDEST PUSH2 0x36C PUSH2 0x1B53 JUMP JUMPDEST PUSH2 0x63E PUSH2 0x639 CALLDATASIZE PUSH1 0x4 PUSH2 0x38F3 JUMP JUMPDEST PUSH2 0x1B58 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x350 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x44C4 JUMP JUMPDEST PUSH2 0x36C PUSH2 0x65B CALLDATASIZE PUSH1 0x4 PUSH2 0x3BD0 JUMP JUMPDEST PUSH2 0x1B9C JUMP JUMPDEST PUSH2 0x3B4 PUSH2 0x66E CALLDATASIZE PUSH1 0x4 PUSH2 0x3A0C JUMP JUMPDEST PUSH2 0x1C9E JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x71D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6F2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x71D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x700 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x3E PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74D PUSH2 0x746 PUSH2 0x1F14 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x1F18 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST DUP1 PUSH2 0x79D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x3F56 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x7D7 DUP2 PUSH32 0x0 PUSH2 0x1EA1 JUMP JUMPDEST TIMESTAMP GT PUSH2 0x80F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x3FF9 JUMP JUMPDEST PUSH32 0x0 PUSH2 0x864 PUSH2 0x85D DUP4 PUSH32 0x0 PUSH2 0x1EA1 JUMP JUMPDEST TIMESTAMP SWAP1 PUSH2 0x2027 JUMP JUMPDEST GT ISZERO PUSH2 0x89C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x4280 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8A7 CALLER PUSH2 0xBFC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 DUP5 GT PUSH2 0x8B8 JUMPI DUP4 PUSH2 0x8BA JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP PUSH2 0x8C8 CALLER DUP4 PUSH1 0x1 PUSH2 0x2069 JUMP JUMPDEST POP PUSH2 0x8D3 CALLER DUP3 PUSH2 0x2127 JUMP JUMPDEST PUSH2 0x8DD DUP3 DUP3 PUSH2 0x2027 JUMP JUMPDEST PUSH2 0x8F2 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3E PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE JUMPDEST PUSH2 0x933 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP7 DUP4 PUSH2 0x2257 JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xD12200EFA34901B99367694174C3B0D32C99585FDF37C7C26892136DDD0836D9 DUP4 PUSH1 0x40 MLOAD PUSH2 0x990 SWAP2 SWAP1 PUSH2 0x3D39 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9AC DUP5 DUP5 DUP5 PUSH2 0x22F8 JUMP JUMPDEST PUSH2 0xA36 DUP5 PUSH2 0x9B8 PUSH2 0x1F14 JUMP JUMPDEST PUSH2 0xA31 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x4588 PUSH1 0x28 SWAP2 CODECOPY PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0xA03 PUSH2 0x1F14 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x2405 JUMP JUMPDEST PUSH2 0x1F18 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP4 ADD SWAP1 MSTORE KECCAK256 SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x43 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74D PUSH2 0xB06 PUSH2 0x1F14 JUMP JUMPDEST DUP5 PUSH2 0xA31 DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0xB17 PUSH2 0x1F14 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP13 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 PUSH2 0x1EA1 JUMP JUMPDEST PUSH32 0x9A9A49B990BA9BB39F8048C490A40AB25C18F55D208D5FBCF958261A9B48716D DUP2 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND SWAP2 PUSH17 0x100000000000000000000000000000000 SWAP1 DIV AND DUP3 JUMP JUMPDEST PUSH2 0xBCB CALLER DUP3 PUSH1 0x0 PUSH2 0x244B JUMP JUMPDEST PUSH2 0xBD7 CALLER DUP3 PUSH1 0x1 PUSH2 0x244B JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xBE6 DUP4 PUSH2 0x258E JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0xBF4 DUP5 DUP3 PUSH2 0x25C8 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH2 0xC8E CALLER PUSH2 0xBFC JUMP JUMPDEST PUSH2 0xCC4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x43A8 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3E PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 TIMESTAMP SWAP1 SSTORE MLOAD PUSH32 0xF52F50426B32362D3E6BB8CB36B7074756B224622DEF6352A59EAC7F66EBE6E8 SWAP2 SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3D PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD2C PUSH2 0x2600 JUMP JUMPDEST SWAP1 POP PUSH1 0x9 SLOAD DUP2 GT PUSH2 0xD69 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x408D JUMP JUMPDEST PUSH1 0x9 DUP2 SWAP1 SSTORE CHAINID PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0xD98 PUSH2 0x673 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP5 ADD MSTORE MLOAD PUSH2 0xE04 SWAP4 SWAP3 PUSH32 0xC89EFDAA54C0F20C7ADF612882DF0950F5A951637E0307CDCB4C672F298B8BC6 SWAP2 DUP7 SWAP2 ADDRESS SWAP2 ADD PUSH2 0x3DED JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x43 SSTORE ADDRESS PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3C SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0x6098502000000000000000000000000000000000 OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x60 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xE9D PUSH2 0x3861 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xE95 JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEE2 DUP6 PUSH2 0xBFC JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEEF PUSH2 0x757 JUMP JUMPDEST DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xEFF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0xA3A PUSH2 0xF17 DUP5 DUP4 PUSH2 0x2605 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 PUSH2 0x1EA1 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x71D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6F2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x71D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x751 PUSH2 0x757 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104E CALLER PUSH2 0x1047 CALLER PUSH2 0xBFC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2069 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 EQ PUSH2 0x107F JUMPI DUP3 PUSH2 0x1081 JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP PUSH2 0x10CD DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x494E56414C49445F414D4F554E54000000000000000000000000000000000000 DUP2 MSTORE POP DUP5 PUSH2 0x2405 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x113F PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x0 DUP7 DUP5 PUSH2 0x2733 JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x9310CCFCB8DE723F578A9E4282EA9F521F05AE40DC08F3068DFAD528A65EE3C7 DUP4 PUSH1 0x40 MLOAD PUSH2 0x119C SWAP2 SWAP1 PUSH2 0x3D39 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74D PUSH2 0x11B7 PUSH2 0x1F14 JUMP JUMPDEST DUP5 PUSH2 0xA31 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x45B0 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x11E1 PUSH2 0x1F14 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP14 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x2405 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74D PUSH2 0x122C PUSH2 0x1F14 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x22F8 JUMP JUMPDEST PUSH32 0x10D8D059343739EFCE7DAD10D09F0806DA52B252B3E6A7951920D2D6EC4102E5 DUP2 JUMP JUMPDEST PUSH1 0x12 DUP2 JUMP JUMPDEST DUP1 PUSH2 0x1293 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x3F56 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x129E DUP4 PUSH2 0xBFC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x12B5 DUP5 ADDRESS DUP5 PUSH2 0x12B0 PUSH2 0x757 JUMP JUMPDEST PUSH2 0x2754 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x134D JUMPI PUSH32 0x2468F9268C60AD90E2D49EDB0032C8A001E733AE888B3AB8E982EDF535BE1A76 DUP5 DUP3 PUSH1 0x40 MLOAD PUSH2 0x12EE SWAP3 SWAP2 SWAP1 PUSH2 0x3D08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1326 SWAP1 DUP3 PUSH2 0x1EA1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH2 0x135A PUSH1 0x0 DUP5 DUP7 DUP6 PUSH2 0x1B9C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x138A DUP5 DUP5 PUSH2 0x282D JUMP JUMPDEST PUSH2 0x13CC PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND CALLER ADDRESS DUP7 PUSH2 0x2733 JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x5DAC0C1B1112564A045BA943C9D50270893E8E826C49BE8E7073ADC713AB7BD7 DUP6 PUSH1 0x40 MLOAD PUSH2 0x119C SWAP2 SWAP1 PUSH2 0x3D39 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x1498 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x4158 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1646 JUMPI PUSH1 0x0 PUSH1 0x3C PUSH1 0x0 DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0x14B5 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x60 MUL ADD PUSH1 0x40 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x14CD SWAP2 SWAP1 PUSH2 0x38F3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x154C DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0x1518 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x60 MUL ADD PUSH1 0x40 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1530 SWAP2 SWAP1 PUSH2 0x38F3 JUMP JUMPDEST DUP3 DUP7 DUP7 DUP7 DUP2 DUP2 LT PUSH2 0x153D JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x60 MUL ADD PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x2922 JUMP JUMPDEST POP DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0x1559 JUMPI INVALID JUMPDEST PUSH2 0x156F SWAP3 PUSH1 0x20 PUSH1 0x60 SWAP1 SWAP3 MUL ADD SWAP1 DUP2 ADD SWAP2 POP PUSH2 0x3B88 JUMP JUMPDEST DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND OR DUP2 SSTORE DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0x15B7 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x60 MUL ADD PUSH1 0x40 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x15CF SWAP2 SWAP1 PUSH2 0x38F3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x87FA03892A0556CB6B8F97E6D533A150D4D55FCBF275FFF5FA003FA636BCC7FA DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0x1612 JUMPI INVALID JUMPDEST PUSH2 0x1628 SWAP3 PUSH1 0x20 PUSH1 0x60 SWAP1 SWAP3 MUL ADD SWAP1 DUP2 ADD SWAP2 POP PUSH2 0x3B88 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1635 SWAP2 SWAP1 PUSH2 0x4484 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 0x1 ADD PUSH2 0x149B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1659 DUP5 PUSH2 0x258E JUMP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x166A DUP3 DUP3 DUP8 NUMBER PUSH2 0x2A21 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x44 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1693 DUP5 PUSH2 0x258E JUMP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x16A4 DUP3 DUP3 DUP9 DUP9 PUSH2 0x2A21 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x9A9A49B990BA9BB39F8048C490A40AB25C18F55D208D5FBCF958261A9B48716D DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1703 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3D83 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH1 0x43 SLOAD DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1732 SWAP3 SWAP2 SWAP1 PUSH2 0x3C80 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP3 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x176F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3E26 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1791 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x1809 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x3FC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x44 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE DUP9 EQ PUSH2 0x186F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x4121 JUMP JUMPDEST DUP7 TIMESTAMP GT ISZERO PUSH2 0x18A9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x40EA JUMP JUMPDEST PUSH2 0x18B5 DUP2 DUP11 PUSH1 0x0 PUSH2 0x244B JUMP JUMPDEST PUSH2 0x18C1 DUP2 DUP11 PUSH1 0x1 PUSH2 0x244B JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH2 0x193D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x418F JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x1977 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x40EA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x44 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x43 SLOAD SWAP2 MLOAD SWAP1 SWAP4 SWAP3 PUSH2 0x19DE SWAP2 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 SWAP2 DUP14 SWAP2 DUP14 SWAP2 DUP14 SWAP2 DUP10 SWAP2 DUP15 SWAP2 ADD PUSH2 0x3D42 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1A05 SWAP3 SWAP2 SWAP1 PUSH2 0x3C80 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x1 DUP2 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1A40 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3E26 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A62 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1AD0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x3FC2 JUMP JUMPDEST PUSH2 0x1ADB DUP3 PUSH1 0x1 PUSH2 0x1EA1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x44 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x18C1 DUP10 DUP10 DUP10 PUSH2 0x1F18 JUMP JUMPDEST PUSH2 0x1B17 CALLER DUP4 DUP4 PUSH2 0x244B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH1 0x3C PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND SWAP3 PUSH17 0x100000000000000000000000000000000 SWAP1 DIV AND SWAP1 DUP4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3E PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 PUSH2 0x1BD1 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0xBF4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C27 PUSH32 0x0 PUSH2 0x1C21 TIMESTAMP PUSH32 0x0 PUSH2 0x2027 JUMP JUMPDEST SWAP1 PUSH2 0x2027 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x1C3A JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x1C94 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP3 GT PUSH2 0x1C49 JUMPI DUP8 PUSH2 0x1C4B JUMP JUMPDEST TIMESTAMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x1C60 JUMPI DUP3 SWAP4 POP POP POP POP PUSH2 0xBF4 JUMP JUMPDEST PUSH2 0x1C90 PUSH2 0x1C6D DUP9 DUP8 PUSH2 0x1EA1 JUMP JUMPDEST PUSH2 0x1C8A PUSH2 0x1C7A DUP9 DUP8 PUSH2 0x2D39 JUMP JUMPDEST PUSH2 0x1C84 DUP12 DUP7 PUSH2 0x2D39 JUMP JUMPDEST SWAP1 PUSH2 0x1EA1 JUMP JUMPDEST SWAP1 PUSH2 0x2D8D JUMP JUMPDEST SWAP3 POP POP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x10D8D059343739EFCE7DAD10D09F0806DA52B252B3E6A7951920D2D6EC4102E5 DUP9 DUP9 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1CCE JUMPI INVALID JUMPDEST DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1CE4 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3DB4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH1 0x43 SLOAD DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D13 SWAP3 SWAP2 SWAP1 PUSH2 0x3C80 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP3 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1D50 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3E26 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1D72 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x1DEA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x3FC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x44 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE DUP9 EQ PUSH2 0x1E50 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x4121 JUMP JUMPDEST DUP7 TIMESTAMP GT ISZERO PUSH2 0x1E8A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x40EA JUMP JUMPDEST PUSH2 0x1E95 DUP2 DUP12 DUP12 PUSH2 0x244B JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xA3A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x3F1F JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x1F65 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x42B7 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x1FB2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x3EC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x201A SWAP1 DUP6 SWAP1 PUSH2 0x3D39 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA3A DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH2 0x2405 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x207A DUP6 ADDRESS DUP7 PUSH2 0x12B0 PUSH2 0x757 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3D PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x20AE SWAP1 DUP4 PUSH2 0x1EA1 JUMP JUMPDEST SWAP1 POP DUP2 ISZERO PUSH2 0x166A JUMPI DUP4 ISZERO PUSH2 0x20E5 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE JUMPDEST PUSH32 0x2468F9268C60AD90E2D49EDB0032C8A001E733AE888B3AB8E982EDF535BE1A76 DUP7 DUP4 PUSH1 0x40 MLOAD PUSH2 0x2116 SWAP3 SWAP2 SWAP1 PUSH2 0x3D08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x2174 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x41C6 JUMP JUMPDEST PUSH2 0x2180 DUP3 PUSH1 0x0 DUP4 PUSH2 0x2DCF JUMP JUMPDEST PUSH2 0x21CA DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x4540 PUSH1 0x22 SWAP2 CODECOPY PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x2405 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x2 SLOAD PUSH2 0x21FD SWAP1 DUP3 PUSH2 0x2027 JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x224B SWAP1 DUP6 SWAP1 PUSH2 0x3D39 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x1646 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2276 SWAP3 SWAP2 SWAP1 PUSH2 0x3D08 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x2F53 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2303 DUP5 PUSH2 0xBFC JUMP JUMPDEST SWAP1 POP PUSH2 0x2311 DUP5 DUP3 PUSH1 0x1 PUSH2 0x2069 JUMP JUMPDEST POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x23F4 JUMPI PUSH1 0x0 PUSH2 0x2350 DUP5 PUSH2 0xBFC JUMP JUMPDEST SWAP1 POP PUSH2 0x235E DUP5 DUP3 PUSH1 0x1 PUSH2 0x2069 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2391 DUP2 DUP6 DUP8 DUP6 PUSH2 0x1B9C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE DUP3 DUP5 EQ DUP1 ISZERO PUSH2 0x23C5 JUMPI POP DUP1 ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x23F1 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3E PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE JUMPDEST POP POP JUMPDEST PUSH2 0x23FF DUP5 DUP5 DUP5 PUSH2 0x30A0 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x2443 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP2 SWAP1 PUSH2 0x3E44 JUMP JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x2498 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x43DF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24A3 DUP3 PUSH2 0x258E JUMP JUMPDEST SWAP3 POP POP POP PUSH1 0x0 PUSH2 0x24B2 DUP6 PUSH2 0xBFC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x24C0 DUP7 DUP5 PUSH2 0x25C8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP7 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP9 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP1 POP PUSH2 0x2521 DUP2 DUP7 DUP5 DUP8 PUSH2 0x322A JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xE8D51C8E11BD570DB1734C8EC775785330E77007FEED45C43B608EF33FF914BD DUP7 PUSH1 0x40 MLOAD PUSH2 0x257E SWAP2 SWAP1 PUSH2 0x3E57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x259F JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x25B5 JUMPI POP PUSH1 0x6 SWAP2 POP PUSH1 0x7 SWAP1 POP PUSH1 0x3F PUSH2 0x25C1 JUMP JUMPDEST POP PUSH1 0x40 SWAP2 POP PUSH1 0x41 SWAP1 POP PUSH1 0x42 JUMPDEST SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 AND DUP1 PUSH2 0xA3A JUMPI DUP4 SWAP2 POP POP PUSH2 0x751 JUMP JUMPDEST PUSH1 0x3 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x272B JUMPI PUSH1 0x0 PUSH1 0x3C PUSH1 0x0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2625 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD DUP2 SLOAD DUP9 MLOAD SWAP3 SWAP5 POP PUSH2 0x26B0 SWAP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND SWAP3 PUSH17 0x100000000000000000000000000000000 SWAP1 DIV AND SWAP1 DUP11 SWAP1 DUP9 SWAP1 DUP2 LT PUSH2 0x269F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x3500 JUMP JUMPDEST SWAP1 POP PUSH2 0x271F PUSH2 0x2718 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x26C4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP4 DUP6 PUSH1 0x2 ADD PUSH1 0x0 DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x3614 JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x1EA1 JUMP JUMPDEST SWAP4 POP POP POP PUSH1 0x1 ADD PUSH2 0x260A JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x23FF DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2276 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3CD7 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE PUSH1 0x2 DUP5 ADD SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP3 DUP1 PUSH2 0x279C DUP9 DUP6 DUP9 PUSH2 0x2922 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 EQ PUSH2 0x2821 JUMPI DUP7 ISZERO PUSH2 0x27B9 JUMPI PUSH2 0x27B6 DUP8 DUP3 DUP6 PUSH2 0x3614 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP11 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP8 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD SWAP2 DUP11 AND SWAP2 PUSH32 0xBB123B5C06D5408BBEA3C4FEF481578175CFB432E3B482C6186F02ED9086585B SWAP1 PUSH2 0x2818 SWAP1 DUP6 SWAP1 PUSH2 0x3D39 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x287A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x444D JUMP JUMPDEST PUSH2 0x2886 PUSH1 0x0 DUP4 DUP4 PUSH2 0x2DCF JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x2893 SWAP1 DUP3 PUSH2 0x1EA1 JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x28C6 SWAP1 DUP3 PUSH2 0x1EA1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x224B SWAP1 DUP6 SWAP1 PUSH2 0x3D39 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD DUP3 SLOAD PUSH1 0x0 SWAP2 SWAP1 PUSH17 0x100000000000000000000000000000000 SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND TIMESTAMP DUP2 EQ ISZERO PUSH2 0x2963 JUMPI POP SWAP1 POP PUSH2 0xA3A JUMP JUMPDEST DUP5 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x2987 SWAP1 DUP5 SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP9 PUSH2 0x3500 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 EQ PUSH2 0x29E8 JUMPI DUP1 DUP7 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x5777CA300DFE5BEAD41006FBCE4389794DBC0ED8D6CCCEBFAF94630AA04184BC DUP3 PUSH1 0x40 MLOAD PUSH2 0x29DF SWAP2 SWAP1 PUSH2 0x3D39 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST DUP6 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF TIMESTAMP DUP2 AND PUSH17 0x100000000000000000000000000000000 MUL SWAP2 AND OR DUP7 SSTORE SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 NUMBER DUP3 GT ISZERO PUSH2 0x2A5D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x4314 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x2A99 JUMPI PUSH2 0x2A91 DUP5 PUSH2 0xBFC JUMP JUMPDEST SWAP2 POP POP PUSH2 0xBF4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP8 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 ADD DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 LT PUSH2 0x2B81 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP8 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP5 ADD DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH17 0x100000000000000000000000000000000 SWAP1 SWAP2 DIV AND SWAP1 POP PUSH2 0xBF4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP8 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 DUP1 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 LT ISZERO PUSH2 0x2BD3 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0xBF4 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 ADD JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x2CD8 JUMPI PUSH1 0x2 DUP3 DUP3 SUB DIV DUP2 SUB PUSH2 0x2C11 PUSH2 0x3898 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP11 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND DUP1 DUP6 MSTORE PUSH17 0x100000000000000000000000000000000 SWAP1 SWAP3 DIV AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP8 EQ ISZERO PUSH2 0x2CA7 JUMPI PUSH1 0x20 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP5 POP PUSH2 0xBF4 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 GT ISZERO PUSH2 0x2CCA JUMPI DUP2 SWAP4 POP PUSH2 0x2CD1 JUMP JUMPDEST PUSH1 0x1 DUP3 SUB SWAP3 POP JUMPDEST POP POP PUSH2 0x2BF9 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP9 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH17 0x100000000000000000000000000000000 SWAP1 SWAP2 DIV AND SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2D48 JUMPI POP PUSH1 0x0 PUSH2 0x751 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x2D55 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0xA3A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x4030 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA3A DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH2 0x3636 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3F PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD DUP6 DUP5 AND DUP4 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 DUP3 AND SWAP2 AND DUP2 PUSH2 0x2E0D JUMPI DUP5 SWAP2 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x2E2B JUMPI POP DUP3 JUMPDEST PUSH2 0x2E38 DUP3 DUP3 DUP6 PUSH1 0x0 PUSH2 0x322A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x42 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD DUP8 DUP5 AND DUP4 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 DUP3 AND SWAP2 AND DUP2 PUSH2 0x2E76 JUMPI DUP7 SWAP2 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x2E94 JUMPI POP DUP5 JUMPDEST PUSH2 0x2EA1 DUP3 DUP3 DUP8 PUSH1 0x1 PUSH2 0x322A JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 ISZERO PUSH2 0x2F49 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4A39314900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH4 0x4A393149 SWAP1 PUSH2 0x2F16 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x3CD7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2F44 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2F72 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3687 JUMP JUMPDEST PUSH2 0x2FA8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x4416 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x2FD1 SWAP2 SWAP1 PUSH2 0x3C64 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x300E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3013 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x304F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x3F8D JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x23FF JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x306A SWAP2 SWAP1 PUSH2 0x3B68 JUMP JUMPDEST PUSH2 0x23FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x434B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x30ED JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x4223 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x313A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x3E65 JUMP JUMPDEST PUSH2 0x3145 DUP4 DUP4 DUP4 PUSH2 0x2DCF JUMP JUMPDEST PUSH2 0x318F DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x4562 PUSH1 0x26 SWAP2 CODECOPY PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x2405 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x31CB SWAP1 DUP3 PUSH2 0x1EA1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x201A SWAP1 DUP6 SWAP1 PUSH2 0x3D39 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x3263 JUMPI PUSH2 0x23FF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x326F DUP4 PUSH2 0x258E JUMP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND ISZERO PUSH2 0x33B9 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x333B JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 ADD DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH17 0x100000000000000000000000000000000 SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH2 0x3347 JUMP JUMPDEST PUSH2 0x3344 DUP9 PUSH2 0xBFC JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x335D DUP5 DUP5 DUP11 DUP6 PUSH2 0x3358 DUP2 DUP13 PUSH2 0x2027 JUMP JUMPDEST PUSH2 0x36C0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND PUSH32 0xA0A19463EE116110C9B282012D9B65CC5522DC38A9520340CBAF3142E550127F PUSH2 0x339F DUP5 DUP10 PUSH2 0x2027 JUMP JUMPDEST DUP8 PUSH1 0x40 MLOAD PUSH2 0x33AE SWAP3 SWAP2 SWAP1 PUSH2 0x44F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND ISZERO PUSH2 0x34F8 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x347F JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 ADD DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH17 0x100000000000000000000000000000000 SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH2 0x348B JUMP JUMPDEST PUSH2 0x3488 DUP8 PUSH2 0xBFC JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x349C DUP5 DUP5 DUP10 DUP6 PUSH2 0x3358 DUP2 DUP13 PUSH2 0x1EA1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH32 0xA0A19463EE116110C9B282012D9B65CC5522DC38A9520340CBAF3142E550127F PUSH2 0x34DE DUP5 DUP10 PUSH2 0x1EA1 JUMP JUMPDEST DUP8 PUSH1 0x40 MLOAD PUSH2 0x34ED SWAP3 SWAP2 SWAP1 PUSH2 0x44F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x350D JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x3529 JUMPI POP TIMESTAMP DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x3566 JUMPI POP PUSH32 0x0 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO JUMPDEST ISZERO PUSH2 0x3572 JUMPI POP DUP4 PUSH2 0xBF4 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 TIMESTAMP GT PUSH2 0x35A1 JUMPI TIMESTAMP PUSH2 0x35C3 JUMP JUMPDEST PUSH32 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x35E3 DUP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH2 0x2027 JUMP JUMPDEST SWAP1 POP PUSH2 0x3609 DUP8 PUSH2 0x1C84 DUP7 PUSH2 0x1C8A PUSH8 0xDE0B6B3A7640000 PUSH2 0x3603 DUP13 DUP9 PUSH2 0x2D39 JUMP JUMPDEST SWAP1 PUSH2 0x2D39 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBF4 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1C8A PUSH2 0x362F DUP7 DUP7 PUSH2 0x2027 JUMP JUMPDEST DUP8 SWAP1 PUSH2 0x2D39 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x3671 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP2 SWAP1 PUSH2 0x3E44 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP6 DUP2 PUSH2 0x367D JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EXTCODEHASH PUSH32 0xC5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470 DUP2 DUP2 EQ DUP1 ISZERO SWAP1 PUSH2 0xBF4 JUMPI POP POP ISZERO ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD SWAP2 DUP9 SWAP1 MSTORE SWAP1 SWAP2 KECCAK256 NUMBER SWAP2 SWAP1 DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x3745 JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 ADD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x37AE JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 ADD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH17 0x100000000000000000000000000000000 MUL SWAP2 AND OR SWAP1 SSTORE PUSH2 0x2F49 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND DUP3 MSTORE DUP7 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 DUP3 MSTORE PUSH1 0x0 DUP8 DUP2 MSTORE DUP7 DUP3 MSTORE DUP6 DUP2 KECCAK256 SWAP5 MLOAD DUP6 SLOAD SWAP4 MLOAD DUP6 AND PUSH17 0x100000000000000000000000000000000 MUL SWAP1 DUP6 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP3 SSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND DUP2 MSTORE SWAP1 DUP10 SWAP1 MSTORE KECCAK256 PUSH1 0x1 DUP4 ADD SWAP1 SSTORE POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xC23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x2 DUP2 LT PUSH2 0xC23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xC23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3904 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xA3A DUP3 PUSH2 0x38AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x391F JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x3928 DUP4 PUSH2 0x38AF JUMP JUMPDEST SWAP2 POP PUSH2 0x3936 PUSH1 0x20 DUP5 ADD PUSH2 0x38AF JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3953 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x395C DUP5 PUSH2 0x38AF JUMP JUMPDEST SWAP3 POP PUSH2 0x396A PUSH1 0x20 DUP6 ADD PUSH2 0x38AF JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x3994 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x399D DUP9 PUSH2 0x38AF JUMP JUMPDEST SWAP7 POP PUSH2 0x39AB PUSH1 0x20 DUP10 ADD PUSH2 0x38AF JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH2 0x39C7 PUSH1 0x80 DUP10 ADD PUSH2 0x38E2 JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x39F5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x39FE DUP4 PUSH2 0x38AF JUMP JUMPDEST SWAP2 POP PUSH2 0x3936 PUSH1 0x20 DUP5 ADD PUSH2 0x38D3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x3A26 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3A2F DUP9 PUSH2 0x38AF JUMP JUMPDEST SWAP7 POP PUSH2 0x39AB PUSH1 0x20 DUP10 ADD PUSH2 0x38D3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3A4F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3A58 DUP4 PUSH2 0x38AF JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3A7A JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3A83 DUP5 PUSH2 0x38AF JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH2 0x3A98 PUSH1 0x40 DUP6 ADD PUSH2 0x38D3 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3AB9 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3AC2 DUP8 PUSH2 0x38AF JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH2 0x3ADE PUSH1 0x60 DUP9 ADD PUSH2 0x38E2 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3B0A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3B21 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3B34 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x3B42 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 PUSH1 0x60 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x3B56 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3B79 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xA3A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3B99 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xA3A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3BC9 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3BE5 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH2 0x3BFC PUSH1 0x40 DUP7 ADD PUSH2 0x38AF JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x3C24 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x4513 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0x3C60 JUMPI INVALID JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x3C76 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x4513 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND PUSH1 0x20 DUP8 ADD MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0xA3A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3C0C JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x751 DUP3 DUP5 PUSH2 0x3C56 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F5A45524F5F414D4F554E5400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F5349474E4154555245000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E53554646494349454E545F434F4F4C444F574E0000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206D756C7469706C69636174696F6E206F766572666C6F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7700000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x436F6E747261637420696E7374616E63652068617320616C7265616479206265 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x656E20696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F45585049524154494F4E0000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F4E4F4E434500000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F4E4C595F454D495353494F4E5F4D414E414745520000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F4F574E455200000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x554E5354414B455F57494E444F575F46494E4953484544000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F424C4F434B5F4E554D424552000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F42414C414E43455F4F4E5F434F4F4C444F574E0000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F44454C454741544545000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A2063616C6C20746F206E6F6E2D636F6E747261637400 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 DUP2 ADD PUSH2 0xA3A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3C56 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x452E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x4516 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x23FF JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH3 0x75726E KECCAK256 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E636545524332 ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x2062616C616E636545524332303A207472616E73 PUSH7 0x657220616D6F75 PUSH15 0x74206578636565647320616C6C6F77 PUSH2 0x6E63 PUSH6 0x45524332303A KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x7358221220D9AF 0xCB PUSH14 0xE361626B27FC92962C175DA28AA6 PUSH27 0x46F2EE48AB626D5A4A8F4D156664736F6C63430007050033000000 ","sourceMap":"46839:16355:0:-:0;;;27102:1;27059:44;;48863:657;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;49217:15;49234:20;-1:-1:-1;;;;;28622:185:0;49179:4;49185:6;15364:4;15356:5;:12;;;;;;;;;;;;:::i;:::-;-1:-1:-1;15374:16:0;;;;:7;;:16;;;;;:::i;:::-;-1:-1:-1;;15396:9:0;:14;;15408:2;-1:-1:-1;;15396:14:0;;;;;;-1:-1:-1;28721:41:0;:15;28741:20;28721:19;;;;;;;:41;;:::i;:::-;28702:60;;-1:-1:-1;28768:34:0;;;;-1:-1:-1;;;;;;28768:34:0;;;;;49262:26;;;;;::::2;::::0;49294;;;;;::::2;::::0;49326:34:::2;::::0;;;49366:30:::2;::::0;;;49402:28;;;;;::::2;::::0;49436:15:::2;:43:::0;;-1:-1:-1;;;;;;49436:43:0::2;-1:-1:-1::0;;;;;49436:43:0;::::2;;::::0;;49485:30:::2;49506:8:::0;49485:20:::2;;::::0;;::::2;;;:30:::0;::::2;:::i;:::-;48863:657:::0;;;;;;;;;;;46839:16355;;6845:162;6903:7;6930:5;;;6949:6;;;;6941:46;;;;-1:-1:-1;;;6941:46:0;;;;;;;:::i;:::-;;;;;;;;;7001:1;6845:162;-1:-1:-1;;;6845:162:0:o;22957:82::-;23013:9;:21;;-1:-1:-1;;23013:21:0;;;;;;;;;;;;22957:82::o;46839:16355::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;46839:16355:0;;;-1:-1:-1;46839:16355:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:179:2;95:13;;-1:-1:-1;;;;;137:31:2;;127:42;;117:2;;183:1;180;173:12;117:2;76:117;;;:::o;198:879::-;;307:3;300:4;292:6;288:17;284:27;274:2;;329:5;322;315:20;274:2;360:13;;-1:-1:-1;;;;;422:14:2;;;419:2;;;439:9;419:2;479;473:9;501:4;575:2;552:17;;-1:-1:-1;;548:31:2;536:44;;532:53;;600:18;;;620:22;;;597:46;594:2;;;646:9;594:2;677:10;673:2;666:22;;706:6;697:15;;736:6;728;721:22;788:3;783:2;774:6;766;762:19;758:28;755:37;752:2;;;805:1;802;795:12;752:2;827:1;818:10;;837:137;851:6;848:1;845:13;837:137;;;943:14;;;939:23;;933:30;912:14;;;908:23;;901:63;866:10;;;;837:137;;;992:6;989:1;986:13;983:2;;;1059:1;1054:2;1045:6;1037;1033:19;1029:28;1022:39;983:2;;;;;264:813;;;;:::o;1082:179::-;1163:13;;-1:-1:-1;;;;;1205:31:2;;1195:42;;1185:2;;1251:1;1248;1241:12;1266:162;1345:13;;1398:4;1387:16;;1377:27;;1367:2;;1418:1;1415;1408:12;1433:1356;;;;;;;;;;;;1773:3;1761:9;1752:7;1748:23;1744:33;1741:2;;;1795:6;1787;1780:22;1741:2;1823:42;1855:9;1823:42;:::i;:::-;1813:52;;1884:51;1931:2;1920:9;1916:18;1884:51;:::i;:::-;1874:61;;1975:2;1964:9;1960:18;1954:25;1944:35;;2019:2;2008:9;2004:18;1998:25;1988:35;;2042:52;2089:3;2078:9;2074:19;2042:52;:::i;:::-;2032:62;;2113:52;2160:3;2149:9;2145:19;2113:52;:::i;:::-;2103:62;;2184:52;2231:3;2220:9;2216:19;2184:52;:::i;:::-;2280:3;2265:19;;2259:26;2174:62;;-1:-1:-1;;;;;;2297:30:2;;2294:2;;;2345:6;2337;2330:22;2294:2;2373:63;2428:7;2419:6;2408:9;2404:22;2373:63;:::i;:::-;2482:3;2467:19;;2461:26;2363:73;;-1:-1:-1;2461:26:2;-1:-1:-1;;;;;;2499:32:2;;2496:2;;;2549:6;2541;2534:22;2496:2;2577:65;2634:7;2623:8;2612:9;2608:24;2577:65;:::i;:::-;2567:75;;;2661:50;2706:3;2695:9;2691:19;2661:50;:::i;:::-;2651:60;;2731:52;2778:3;2767:9;2763:19;2731:52;:::i;:::-;2720:63;;1731:1058;;;;;;;;;;;;;;:::o;2794:351::-;2996:2;2978:21;;;3035:2;3015:18;;;3008:30;3074:29;3069:2;3054:18;;3047:57;3136:2;3121:18;;2968:177::o;:::-;46839:16355:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:22655:2","statements":[{"nodeType":"YulBlock","src":"6:3:2","statements":[]},{"body":{"nodeType":"YulBlock","src":"65:147:2","statements":[{"nodeType":"YulAssignment","src":"75:29:2","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"97:6:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"84:12:2"},"nodeType":"YulFunctionCall","src":"84:20:2"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"75:5:2"}]},{"body":{"nodeType":"YulBlock","src":"190:16:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"199:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"202:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"192:6:2"},"nodeType":"YulFunctionCall","src":"192:12:2"},"nodeType":"YulExpressionStatement","src":"192:12:2"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"126:5:2"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"137:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"144:42:2","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"133:3:2"},"nodeType":"YulFunctionCall","src":"133:54:2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"123:2:2"},"nodeType":"YulFunctionCall","src":"123:65:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"116:6:2"},"nodeType":"YulFunctionCall","src":"116:73:2"},"nodeType":"YulIf","src":"113:2:2"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"44:6:2","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"55:5:2","type":""}],"src":"14:198:2"},{"body":{"nodeType":"YulBlock","src":"281:94:2","statements":[{"nodeType":"YulAssignment","src":"291:29:2","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"313:6:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"300:12:2"},"nodeType":"YulFunctionCall","src":"300:20:2"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"291:5:2"}]},{"body":{"nodeType":"YulBlock","src":"353:16:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"362:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"365:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"355:6:2"},"nodeType":"YulFunctionCall","src":"355:12:2"},"nodeType":"YulExpressionStatement","src":"355:12:2"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"342:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"349:1:2","type":"","value":"2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"339:2:2"},"nodeType":"YulFunctionCall","src":"339:12:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"332:6:2"},"nodeType":"YulFunctionCall","src":"332:20:2"},"nodeType":"YulIf","src":"329:2:2"}]},"name":"abi_decode_t_enum$_DelegationType","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"260:6:2","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"271:5:2","type":""}],"src":"217:158:2"},{"body":{"nodeType":"YulBlock","src":"429:109:2","statements":[{"nodeType":"YulAssignment","src":"439:29:2","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"461:6:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"448:12:2"},"nodeType":"YulFunctionCall","src":"448:20:2"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"439:5:2"}]},{"body":{"nodeType":"YulBlock","src":"516:16:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"525:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"528:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"518:6:2"},"nodeType":"YulFunctionCall","src":"518:12:2"},"nodeType":"YulExpressionStatement","src":"518:12:2"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"490:5:2"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"501:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"508:4:2","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"497:3:2"},"nodeType":"YulFunctionCall","src":"497:16:2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"487:2:2"},"nodeType":"YulFunctionCall","src":"487:27:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"480:6:2"},"nodeType":"YulFunctionCall","src":"480:35:2"},"nodeType":"YulIf","src":"477:2:2"}]},"name":"abi_decode_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"408:6:2","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"419:5:2","type":""}],"src":"380:158:2"},{"body":{"nodeType":"YulBlock","src":"613:128:2","statements":[{"body":{"nodeType":"YulBlock","src":"659:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"668:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"676:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"661:6:2"},"nodeType":"YulFunctionCall","src":"661:22:2"},"nodeType":"YulExpressionStatement","src":"661:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"634:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"643:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"630:3:2"},"nodeType":"YulFunctionCall","src":"630:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"655:2:2","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"626:3:2"},"nodeType":"YulFunctionCall","src":"626:32:2"},"nodeType":"YulIf","src":"623:2:2"},{"nodeType":"YulAssignment","src":"694:41:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"725:9:2"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"704:20:2"},"nodeType":"YulFunctionCall","src":"704:31:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"694:6:2"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"579:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"590:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"602:6:2","type":""}],"src":"543:198:2"},{"body":{"nodeType":"YulBlock","src":"833:187:2","statements":[{"body":{"nodeType":"YulBlock","src":"879:26:2","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"888:6:2"},{"name":"value1","nodeType":"YulIdentifier","src":"896:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"881:6:2"},"nodeType":"YulFunctionCall","src":"881:22:2"},"nodeType":"YulExpressionStatement","src":"881:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"854:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"863:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"850:3:2"},"nodeType":"YulFunctionCall","src":"850:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"875:2:2","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"846:3:2"},"nodeType":"YulFunctionCall","src":"846:32:2"},"nodeType":"YulIf","src":"843:2:2"},{"nodeType":"YulAssignment","src":"914:41:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"945:9:2"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"924:20:2"},"nodeType":"YulFunctionCall","src":"924:31:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"914:6:2"}]},{"nodeType":"YulAssignment","src":"964:50:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"999:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"1010:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"995:3:2"},"nodeType":"YulFunctionCall","src":"995:18:2"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"974:20:2"},"nodeType":"YulFunctionCall","src":"974:40:2"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"964:6:2"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"791:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"802:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"814:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"822:6:2","type":""}],"src":"746:274:2"},{"body":{"nodeType":"YulBlock","src":"1129:238:2","statements":[{"body":{"nodeType":"YulBlock","src":"1175:26:2","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"1184:6:2"},{"name":"value2","nodeType":"YulIdentifier","src":"1192:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1177:6:2"},"nodeType":"YulFunctionCall","src":"1177:22:2"},"nodeType":"YulExpressionStatement","src":"1177:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1150:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"1159:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1146:3:2"},"nodeType":"YulFunctionCall","src":"1146:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"1171:2:2","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1142:3:2"},"nodeType":"YulFunctionCall","src":"1142:32:2"},"nodeType":"YulIf","src":"1139:2:2"},{"nodeType":"YulAssignment","src":"1210:41:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1241:9:2"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1220:20:2"},"nodeType":"YulFunctionCall","src":"1220:31:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1210:6:2"}]},{"nodeType":"YulAssignment","src":"1260:50:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1295:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"1306:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1291:3:2"},"nodeType":"YulFunctionCall","src":"1291:18:2"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1270:20:2"},"nodeType":"YulFunctionCall","src":"1270:40:2"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1260:6:2"}]},{"nodeType":"YulAssignment","src":"1319:42:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1346:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"1357:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1342:3:2"},"nodeType":"YulFunctionCall","src":"1342:18:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1329:12:2"},"nodeType":"YulFunctionCall","src":"1329:32:2"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1319:6:2"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1079:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1090:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1102:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1110:6:2","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1118:6:2","type":""}],"src":"1025:342:2"},{"body":{"nodeType":"YulBlock","src":"1542:452:2","statements":[{"body":{"nodeType":"YulBlock","src":"1589:26:2","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"1598:6:2"},{"name":"value4","nodeType":"YulIdentifier","src":"1606:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1591:6:2"},"nodeType":"YulFunctionCall","src":"1591:22:2"},"nodeType":"YulExpressionStatement","src":"1591:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1563:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"1572:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1559:3:2"},"nodeType":"YulFunctionCall","src":"1559:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"1584:3:2","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1555:3:2"},"nodeType":"YulFunctionCall","src":"1555:33:2"},"nodeType":"YulIf","src":"1552:2:2"},{"nodeType":"YulAssignment","src":"1624:41:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1655:9:2"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1634:20:2"},"nodeType":"YulFunctionCall","src":"1634:31:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1624:6:2"}]},{"nodeType":"YulAssignment","src":"1674:50:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1709:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"1720:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1705:3:2"},"nodeType":"YulFunctionCall","src":"1705:18:2"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1684:20:2"},"nodeType":"YulFunctionCall","src":"1684:40:2"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1674:6:2"}]},{"nodeType":"YulAssignment","src":"1733:42:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1760:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"1771:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1756:3:2"},"nodeType":"YulFunctionCall","src":"1756:18:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1743:12:2"},"nodeType":"YulFunctionCall","src":"1743:32:2"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1733:6:2"}]},{"nodeType":"YulAssignment","src":"1784:42:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1811:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"1822:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1807:3:2"},"nodeType":"YulFunctionCall","src":"1807:18:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1794:12:2"},"nodeType":"YulFunctionCall","src":"1794:32:2"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1784:6:2"}]},{"nodeType":"YulAssignment","src":"1835:49:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1868:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"1879:3:2","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1864:3:2"},"nodeType":"YulFunctionCall","src":"1864:19:2"}],"functionName":{"name":"abi_decode_t_uint8","nodeType":"YulIdentifier","src":"1845:18:2"},"nodeType":"YulFunctionCall","src":"1845:39:2"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1835:6:2"}]},{"nodeType":"YulAssignment","src":"1893:43:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1920:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"1931:3:2","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1916:3:2"},"nodeType":"YulFunctionCall","src":"1916:19:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1903:12:2"},"nodeType":"YulFunctionCall","src":"1903:33:2"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"1893:6:2"}]},{"nodeType":"YulAssignment","src":"1945:43:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1972:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"1983:3:2","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1968:3:2"},"nodeType":"YulFunctionCall","src":"1968:19:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1955:12:2"},"nodeType":"YulFunctionCall","src":"1955:33:2"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"1945:6:2"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1460:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1471:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1483:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1491:6:2","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1499:6:2","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1507:6:2","type":""},{"name":"value4","nodeType":"YulTypedName","src":"1515:6:2","type":""},{"name":"value5","nodeType":"YulTypedName","src":"1523:6:2","type":""},{"name":"value6","nodeType":"YulTypedName","src":"1531:6:2","type":""}],"src":"1372:622:2"},{"body":{"nodeType":"YulBlock","src":"2102:200:2","statements":[{"body":{"nodeType":"YulBlock","src":"2148:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2157:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"2165:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2150:6:2"},"nodeType":"YulFunctionCall","src":"2150:22:2"},"nodeType":"YulExpressionStatement","src":"2150:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2123:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"2132:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2119:3:2"},"nodeType":"YulFunctionCall","src":"2119:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"2144:2:2","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2115:3:2"},"nodeType":"YulFunctionCall","src":"2115:32:2"},"nodeType":"YulIf","src":"2112:2:2"},{"nodeType":"YulAssignment","src":"2183:41:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2214:9:2"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2193:20:2"},"nodeType":"YulFunctionCall","src":"2193:31:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2183:6:2"}]},{"nodeType":"YulAssignment","src":"2233:63:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2281:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2292:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2277:3:2"},"nodeType":"YulFunctionCall","src":"2277:18:2"}],"functionName":{"name":"abi_decode_t_enum$_DelegationType","nodeType":"YulIdentifier","src":"2243:33:2"},"nodeType":"YulFunctionCall","src":"2243:53:2"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2233:6:2"}]}]},"name":"abi_decode_tuple_t_addresst_enum$_DelegationType_$5","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2060:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2071:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2083:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2091:6:2","type":""}],"src":"1999:303:2"},{"body":{"nodeType":"YulBlock","src":"2493:465:2","statements":[{"body":{"nodeType":"YulBlock","src":"2540:26:2","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"2549:6:2"},{"name":"value4","nodeType":"YulIdentifier","src":"2557:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2542:6:2"},"nodeType":"YulFunctionCall","src":"2542:22:2"},"nodeType":"YulExpressionStatement","src":"2542:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2514:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"2523:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2510:3:2"},"nodeType":"YulFunctionCall","src":"2510:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"2535:3:2","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2506:3:2"},"nodeType":"YulFunctionCall","src":"2506:33:2"},"nodeType":"YulIf","src":"2503:2:2"},{"nodeType":"YulAssignment","src":"2575:41:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2606:9:2"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2585:20:2"},"nodeType":"YulFunctionCall","src":"2585:31:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2575:6:2"}]},{"nodeType":"YulAssignment","src":"2625:63:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2673:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2684:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2669:3:2"},"nodeType":"YulFunctionCall","src":"2669:18:2"}],"functionName":{"name":"abi_decode_t_enum$_DelegationType","nodeType":"YulIdentifier","src":"2635:33:2"},"nodeType":"YulFunctionCall","src":"2635:53:2"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2625:6:2"}]},{"nodeType":"YulAssignment","src":"2697:42:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2724:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2735:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2720:3:2"},"nodeType":"YulFunctionCall","src":"2720:18:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2707:12:2"},"nodeType":"YulFunctionCall","src":"2707:32:2"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2697:6:2"}]},{"nodeType":"YulAssignment","src":"2748:42:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2775:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2786:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2771:3:2"},"nodeType":"YulFunctionCall","src":"2771:18:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2758:12:2"},"nodeType":"YulFunctionCall","src":"2758:32:2"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2748:6:2"}]},{"nodeType":"YulAssignment","src":"2799:49:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2832:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2843:3:2","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2828:3:2"},"nodeType":"YulFunctionCall","src":"2828:19:2"}],"functionName":{"name":"abi_decode_t_uint8","nodeType":"YulIdentifier","src":"2809:18:2"},"nodeType":"YulFunctionCall","src":"2809:39:2"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"2799:6:2"}]},{"nodeType":"YulAssignment","src":"2857:43:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2884:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2895:3:2","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2880:3:2"},"nodeType":"YulFunctionCall","src":"2880:19:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2867:12:2"},"nodeType":"YulFunctionCall","src":"2867:33:2"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"2857:6:2"}]},{"nodeType":"YulAssignment","src":"2909:43:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2936:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2947:3:2","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2932:3:2"},"nodeType":"YulFunctionCall","src":"2932:19:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2919:12:2"},"nodeType":"YulFunctionCall","src":"2919:33:2"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"2909:6:2"}]}]},"name":"abi_decode_tuple_t_addresst_enum$_DelegationType_$5t_uint256t_uint256t_uint8t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2411:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2422:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2434:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2442:6:2","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2450:6:2","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2458:6:2","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2466:6:2","type":""},{"name":"value5","nodeType":"YulTypedName","src":"2474:6:2","type":""},{"name":"value6","nodeType":"YulTypedName","src":"2482:6:2","type":""}],"src":"2307:651:2"},{"body":{"nodeType":"YulBlock","src":"3050:179:2","statements":[{"body":{"nodeType":"YulBlock","src":"3096:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3105:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"3113:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3098:6:2"},"nodeType":"YulFunctionCall","src":"3098:22:2"},"nodeType":"YulExpressionStatement","src":"3098:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3071:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"3080:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3067:3:2"},"nodeType":"YulFunctionCall","src":"3067:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"3092:2:2","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3063:3:2"},"nodeType":"YulFunctionCall","src":"3063:32:2"},"nodeType":"YulIf","src":"3060:2:2"},{"nodeType":"YulAssignment","src":"3131:41:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3162:9:2"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3141:20:2"},"nodeType":"YulFunctionCall","src":"3141:31:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3131:6:2"}]},{"nodeType":"YulAssignment","src":"3181:42:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3208:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3219:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3204:3:2"},"nodeType":"YulFunctionCall","src":"3204:18:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3191:12:2"},"nodeType":"YulFunctionCall","src":"3191:32:2"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3181:6:2"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3008:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3019:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3031:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3039:6:2","type":""}],"src":"2963:266:2"},{"body":{"nodeType":"YulBlock","src":"3354:251:2","statements":[{"body":{"nodeType":"YulBlock","src":"3400:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3409:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"3417:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3402:6:2"},"nodeType":"YulFunctionCall","src":"3402:22:2"},"nodeType":"YulExpressionStatement","src":"3402:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3375:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"3384:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3371:3:2"},"nodeType":"YulFunctionCall","src":"3371:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"3396:2:2","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3367:3:2"},"nodeType":"YulFunctionCall","src":"3367:32:2"},"nodeType":"YulIf","src":"3364:2:2"},{"nodeType":"YulAssignment","src":"3435:41:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3466:9:2"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3445:20:2"},"nodeType":"YulFunctionCall","src":"3445:31:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3435:6:2"}]},{"nodeType":"YulAssignment","src":"3485:42:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3512:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3523:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3508:3:2"},"nodeType":"YulFunctionCall","src":"3508:18:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3495:12:2"},"nodeType":"YulFunctionCall","src":"3495:32:2"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3485:6:2"}]},{"nodeType":"YulAssignment","src":"3536:63:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3584:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3595:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3580:3:2"},"nodeType":"YulFunctionCall","src":"3580:18:2"}],"functionName":{"name":"abi_decode_t_enum$_DelegationType","nodeType":"YulIdentifier","src":"3546:33:2"},"nodeType":"YulFunctionCall","src":"3546:53:2"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3536:6:2"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_enum$_DelegationType_$5","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3304:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3315:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3327:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3335:6:2","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3343:6:2","type":""}],"src":"3234:371:2"},{"body":{"nodeType":"YulBlock","src":"3763:392:2","statements":[{"body":{"nodeType":"YulBlock","src":"3810:26:2","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"3819:6:2"},{"name":"value4","nodeType":"YulIdentifier","src":"3827:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3812:6:2"},"nodeType":"YulFunctionCall","src":"3812:22:2"},"nodeType":"YulExpressionStatement","src":"3812:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3784:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"3793:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3780:3:2"},"nodeType":"YulFunctionCall","src":"3780:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"3805:3:2","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3776:3:2"},"nodeType":"YulFunctionCall","src":"3776:33:2"},"nodeType":"YulIf","src":"3773:2:2"},{"nodeType":"YulAssignment","src":"3845:41:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3876:9:2"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3855:20:2"},"nodeType":"YulFunctionCall","src":"3855:31:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3845:6:2"}]},{"nodeType":"YulAssignment","src":"3895:42:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3922:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3933:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3918:3:2"},"nodeType":"YulFunctionCall","src":"3918:18:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3905:12:2"},"nodeType":"YulFunctionCall","src":"3905:32:2"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3895:6:2"}]},{"nodeType":"YulAssignment","src":"3946:42:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3973:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"3984:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3969:3:2"},"nodeType":"YulFunctionCall","src":"3969:18:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3956:12:2"},"nodeType":"YulFunctionCall","src":"3956:32:2"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3946:6:2"}]},{"nodeType":"YulAssignment","src":"3997:48:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4030:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"4041:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4026:3:2"},"nodeType":"YulFunctionCall","src":"4026:18:2"}],"functionName":{"name":"abi_decode_t_uint8","nodeType":"YulIdentifier","src":"4007:18:2"},"nodeType":"YulFunctionCall","src":"4007:38:2"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3997:6:2"}]},{"nodeType":"YulAssignment","src":"4054:43:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4081:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"4092:3:2","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4077:3:2"},"nodeType":"YulFunctionCall","src":"4077:19:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4064:12:2"},"nodeType":"YulFunctionCall","src":"4064:33:2"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"4054:6:2"}]},{"nodeType":"YulAssignment","src":"4106:43:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4133:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"4144:3:2","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4129:3:2"},"nodeType":"YulFunctionCall","src":"4129:19:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4116:12:2"},"nodeType":"YulFunctionCall","src":"4116:33:2"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"4106:6:2"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3689:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3700:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3712:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3720:6:2","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3728:6:2","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3736:6:2","type":""},{"name":"value4","nodeType":"YulTypedName","src":"3744:6:2","type":""},{"name":"value5","nodeType":"YulTypedName","src":"3752:6:2","type":""}],"src":"3610:545:2"},{"body":{"nodeType":"YulBlock","src":"4300:563:2","statements":[{"body":{"nodeType":"YulBlock","src":"4346:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4355:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"4363:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4348:6:2"},"nodeType":"YulFunctionCall","src":"4348:22:2"},"nodeType":"YulExpressionStatement","src":"4348:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4321:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"4330:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4317:3:2"},"nodeType":"YulFunctionCall","src":"4317:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"4342:2:2","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4313:3:2"},"nodeType":"YulFunctionCall","src":"4313:32:2"},"nodeType":"YulIf","src":"4310:2:2"},{"nodeType":"YulVariableDeclaration","src":"4381:37:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4408:9:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4395:12:2"},"nodeType":"YulFunctionCall","src":"4395:23:2"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4385:6:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4427:28:2","value":{"kind":"number","nodeType":"YulLiteral","src":"4437:18:2","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4431:2:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"4482:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4491:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"4499:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4484:6:2"},"nodeType":"YulFunctionCall","src":"4484:22:2"},"nodeType":"YulExpressionStatement","src":"4484:22:2"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4470:6:2"},{"name":"_1","nodeType":"YulIdentifier","src":"4478:2:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4467:2:2"},"nodeType":"YulFunctionCall","src":"4467:14:2"},"nodeType":"YulIf","src":"4464:2:2"},{"nodeType":"YulVariableDeclaration","src":"4517:32:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4531:9:2"},{"name":"offset","nodeType":"YulIdentifier","src":"4542:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4527:3:2"},"nodeType":"YulFunctionCall","src":"4527:22:2"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4521:2:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"4597:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4606:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"4614:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4599:6:2"},"nodeType":"YulFunctionCall","src":"4599:22:2"},"nodeType":"YulExpressionStatement","src":"4599:22:2"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4576:2:2"},{"kind":"number","nodeType":"YulLiteral","src":"4580:4:2","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4572:3:2"},"nodeType":"YulFunctionCall","src":"4572:13:2"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4587:7:2"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4568:3:2"},"nodeType":"YulFunctionCall","src":"4568:27:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4561:6:2"},"nodeType":"YulFunctionCall","src":"4561:35:2"},"nodeType":"YulIf","src":"4558:2:2"},{"nodeType":"YulVariableDeclaration","src":"4632:30:2","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4659:2:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4646:12:2"},"nodeType":"YulFunctionCall","src":"4646:16:2"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4636:6:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"4689:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4698:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"4706:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4691:6:2"},"nodeType":"YulFunctionCall","src":"4691:22:2"},"nodeType":"YulExpressionStatement","src":"4691:22:2"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4677:6:2"},{"name":"_1","nodeType":"YulIdentifier","src":"4685:2:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4674:2:2"},"nodeType":"YulFunctionCall","src":"4674:14:2"},"nodeType":"YulIf","src":"4671:2:2"},{"body":{"nodeType":"YulBlock","src":"4776:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4785:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"4793:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4778:6:2"},"nodeType":"YulFunctionCall","src":"4778:22:2"},"nodeType":"YulExpressionStatement","src":"4778:22:2"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4738:2:2"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4746:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"4754:4:2","type":"","value":"0x60"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4742:3:2"},"nodeType":"YulFunctionCall","src":"4742:17:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4734:3:2"},"nodeType":"YulFunctionCall","src":"4734:26:2"},{"kind":"number","nodeType":"YulLiteral","src":"4762:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4730:3:2"},"nodeType":"YulFunctionCall","src":"4730:35:2"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4767:7:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4727:2:2"},"nodeType":"YulFunctionCall","src":"4727:48:2"},"nodeType":"YulIf","src":"4724:2:2"},{"nodeType":"YulAssignment","src":"4811:21:2","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4825:2:2"},{"kind":"number","nodeType":"YulLiteral","src":"4829:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4821:3:2"},"nodeType":"YulFunctionCall","src":"4821:11:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4811:6:2"}]},{"nodeType":"YulAssignment","src":"4841:16:2","value":{"name":"length","nodeType":"YulIdentifier","src":"4851:6:2"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4841:6:2"}]}]},"name":"abi_decode_tuple_t_array$_t_struct$_AssetConfigInput_$975_calldata_ptr_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4258:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4269:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4281:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4289:6:2","type":""}],"src":"4160:703:2"},{"body":{"nodeType":"YulBlock","src":"4946:219:2","statements":[{"body":{"nodeType":"YulBlock","src":"4992:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5001:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"5009:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4994:6:2"},"nodeType":"YulFunctionCall","src":"4994:22:2"},"nodeType":"YulExpressionStatement","src":"4994:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4967:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"4976:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4963:3:2"},"nodeType":"YulFunctionCall","src":"4963:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"4988:2:2","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4959:3:2"},"nodeType":"YulFunctionCall","src":"4959:32:2"},"nodeType":"YulIf","src":"4956:2:2"},{"nodeType":"YulVariableDeclaration","src":"5027:29:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5046:9:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5040:5:2"},"nodeType":"YulFunctionCall","src":"5040:16:2"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5031:5:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"5109:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5118:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"5126:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5111:6:2"},"nodeType":"YulFunctionCall","src":"5111:22:2"},"nodeType":"YulExpressionStatement","src":"5111:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5078:5:2"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5099:5:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5092:6:2"},"nodeType":"YulFunctionCall","src":"5092:13:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5085:6:2"},"nodeType":"YulFunctionCall","src":"5085:21:2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5075:2:2"},"nodeType":"YulFunctionCall","src":"5075:32:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5068:6:2"},"nodeType":"YulFunctionCall","src":"5068:40:2"},"nodeType":"YulIf","src":"5065:2:2"},{"nodeType":"YulAssignment","src":"5144:15:2","value":{"name":"value","nodeType":"YulIdentifier","src":"5154:5:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5144:6:2"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4912:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4923:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4935:6:2","type":""}],"src":"4868:297:2"},{"body":{"nodeType":"YulBlock","src":"5240:251:2","statements":[{"body":{"nodeType":"YulBlock","src":"5286:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5295:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"5303:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5288:6:2"},"nodeType":"YulFunctionCall","src":"5288:22:2"},"nodeType":"YulExpressionStatement","src":"5288:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5261:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"5270:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5257:3:2"},"nodeType":"YulFunctionCall","src":"5257:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"5282:2:2","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5253:3:2"},"nodeType":"YulFunctionCall","src":"5253:32:2"},"nodeType":"YulIf","src":"5250:2:2"},{"nodeType":"YulVariableDeclaration","src":"5321:36:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5347:9:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5334:12:2"},"nodeType":"YulFunctionCall","src":"5334:23:2"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5325:5:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"5435:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5444:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"5452:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5437:6:2"},"nodeType":"YulFunctionCall","src":"5437:22:2"},"nodeType":"YulExpressionStatement","src":"5437:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5379:5:2"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5390:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"5397:34:2","type":"","value":"0xffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5386:3:2"},"nodeType":"YulFunctionCall","src":"5386:46:2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5376:2:2"},"nodeType":"YulFunctionCall","src":"5376:57:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5369:6:2"},"nodeType":"YulFunctionCall","src":"5369:65:2"},"nodeType":"YulIf","src":"5366:2:2"},{"nodeType":"YulAssignment","src":"5470:15:2","value":{"name":"value","nodeType":"YulIdentifier","src":"5480:5:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5470:6:2"}]}]},"name":"abi_decode_tuple_t_uint128","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5206:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5217:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5229:6:2","type":""}],"src":"5170:321:2"},{"body":{"nodeType":"YulBlock","src":"5566:120:2","statements":[{"body":{"nodeType":"YulBlock","src":"5612:26:2","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5621:6:2"},{"name":"value0","nodeType":"YulIdentifier","src":"5629:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5614:6:2"},"nodeType":"YulFunctionCall","src":"5614:22:2"},"nodeType":"YulExpressionStatement","src":"5614:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5587:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"5596:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5583:3:2"},"nodeType":"YulFunctionCall","src":"5583:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"5608:2:2","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5579:3:2"},"nodeType":"YulFunctionCall","src":"5579:32:2"},"nodeType":"YulIf","src":"5576:2:2"},{"nodeType":"YulAssignment","src":"5647:33:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5670:9:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5657:12:2"},"nodeType":"YulFunctionCall","src":"5657:23:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5647:6:2"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5532:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5543:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5555:6:2","type":""}],"src":"5496:190:2"},{"body":{"nodeType":"YulBlock","src":"5812:282:2","statements":[{"body":{"nodeType":"YulBlock","src":"5859:26:2","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"5868:6:2"},{"name":"value2","nodeType":"YulIdentifier","src":"5876:6:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5861:6:2"},"nodeType":"YulFunctionCall","src":"5861:22:2"},"nodeType":"YulExpressionStatement","src":"5861:22:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5833:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"5842:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5829:3:2"},"nodeType":"YulFunctionCall","src":"5829:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"5854:3:2","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5825:3:2"},"nodeType":"YulFunctionCall","src":"5825:33:2"},"nodeType":"YulIf","src":"5822:2:2"},{"nodeType":"YulAssignment","src":"5894:33:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5917:9:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5904:12:2"},"nodeType":"YulFunctionCall","src":"5904:23:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5894:6:2"}]},{"nodeType":"YulAssignment","src":"5936:42:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5963:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"5974:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5959:3:2"},"nodeType":"YulFunctionCall","src":"5959:18:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5946:12:2"},"nodeType":"YulFunctionCall","src":"5946:32:2"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5936:6:2"}]},{"nodeType":"YulAssignment","src":"5987:50:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6022:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"6033:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6018:3:2"},"nodeType":"YulFunctionCall","src":"6018:18:2"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5997:20:2"},"nodeType":"YulFunctionCall","src":"5997:40:2"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5987:6:2"}]},{"nodeType":"YulAssignment","src":"6046:42:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6073:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"6084:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6069:3:2"},"nodeType":"YulFunctionCall","src":"6069:18:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6056:12:2"},"nodeType":"YulFunctionCall","src":"6056:32:2"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"6046:6:2"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5754:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5765:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5777:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5785:6:2","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5793:6:2","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5801:6:2","type":""}],"src":"5691:403:2"},{"body":{"nodeType":"YulBlock","src":"6150:267:2","statements":[{"nodeType":"YulVariableDeclaration","src":"6160:26:2","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6180:5:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6174:5:2"},"nodeType":"YulFunctionCall","src":"6174:12:2"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6164:6:2","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6202:3:2"},{"name":"length","nodeType":"YulIdentifier","src":"6207:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6195:6:2"},"nodeType":"YulFunctionCall","src":"6195:19:2"},"nodeType":"YulExpressionStatement","src":"6195:19:2"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6249:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"6256:4:2","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6245:3:2"},"nodeType":"YulFunctionCall","src":"6245:16:2"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6267:3:2"},{"kind":"number","nodeType":"YulLiteral","src":"6272:4:2","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6263:3:2"},"nodeType":"YulFunctionCall","src":"6263:14:2"},{"name":"length","nodeType":"YulIdentifier","src":"6279:6:2"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"6223:21:2"},"nodeType":"YulFunctionCall","src":"6223:63:2"},"nodeType":"YulExpressionStatement","src":"6223:63:2"},{"nodeType":"YulAssignment","src":"6295:116:2","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6310:3:2"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6323:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"6331:2:2","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6319:3:2"},"nodeType":"YulFunctionCall","src":"6319:15:2"},{"kind":"number","nodeType":"YulLiteral","src":"6336:66:2","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6315:3:2"},"nodeType":"YulFunctionCall","src":"6315:88:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6306:3:2"},"nodeType":"YulFunctionCall","src":"6306:98:2"},{"kind":"number","nodeType":"YulLiteral","src":"6406:4:2","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6302:3:2"},"nodeType":"YulFunctionCall","src":"6302:109:2"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6295:3:2"}]}]},"name":"abi_encode_t_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6127:5:2","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6134:3:2","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6142:3:2","type":""}],"src":"6099:318:2"},{"body":{"nodeType":"YulBlock","src":"6481:80:2","statements":[{"body":{"nodeType":"YulBlock","src":"6515:13:2","statements":[{"expression":{"arguments":[],"functionName":{"name":"invalid","nodeType":"YulIdentifier","src":"6517:7:2"},"nodeType":"YulFunctionCall","src":"6517:9:2"},"nodeType":"YulExpressionStatement","src":"6517:9:2"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6504:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"6511:1:2","type":"","value":"2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6501:2:2"},"nodeType":"YulFunctionCall","src":"6501:12:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6494:6:2"},"nodeType":"YulFunctionCall","src":"6494:20:2"},"nodeType":"YulIf","src":"6491:2:2"},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6544:3:2"},{"name":"value","nodeType":"YulIdentifier","src":"6549:5:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6537:6:2"},"nodeType":"YulFunctionCall","src":"6537:18:2"},"nodeType":"YulExpressionStatement","src":"6537:18:2"}]},"name":"abi_encode_t_enum$_DelegationType","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6465:5:2","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6472:3:2","type":""}],"src":"6422:139:2"},{"body":{"nodeType":"YulBlock","src":"6703:137:2","statements":[{"nodeType":"YulVariableDeclaration","src":"6713:27:2","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6733:6:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6727:5:2"},"nodeType":"YulFunctionCall","src":"6727:13:2"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6717:6:2","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6775:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"6783:4:2","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6771:3:2"},"nodeType":"YulFunctionCall","src":"6771:17:2"},{"name":"pos","nodeType":"YulIdentifier","src":"6790:3:2"},{"name":"length","nodeType":"YulIdentifier","src":"6795:6:2"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"6749:21:2"},"nodeType":"YulFunctionCall","src":"6749:53:2"},"nodeType":"YulExpressionStatement","src":"6749:53:2"},{"nodeType":"YulAssignment","src":"6811:23:2","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6822:3:2"},{"name":"length","nodeType":"YulIdentifier","src":"6827:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6818:3:2"},"nodeType":"YulFunctionCall","src":"6818:16:2"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6811:3:2"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6679:3:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6684:6:2","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6695:3:2","type":""}],"src":"6566:274:2"},{"body":{"nodeType":"YulBlock","src":"7093:196:2","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7110:3:2"},{"kind":"number","nodeType":"YulLiteral","src":"7115:66:2","type":"","value":"0x1901000000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7103:6:2"},"nodeType":"YulFunctionCall","src":"7103:79:2"},"nodeType":"YulExpressionStatement","src":"7103:79:2"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7202:3:2"},{"kind":"number","nodeType":"YulLiteral","src":"7207:1:2","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7198:3:2"},"nodeType":"YulFunctionCall","src":"7198:11:2"},{"name":"value0","nodeType":"YulIdentifier","src":"7211:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7191:6:2"},"nodeType":"YulFunctionCall","src":"7191:27:2"},"nodeType":"YulExpressionStatement","src":"7191:27:2"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7238:3:2"},{"kind":"number","nodeType":"YulLiteral","src":"7243:2:2","type":"","value":"34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7234:3:2"},"nodeType":"YulFunctionCall","src":"7234:12:2"},{"name":"value1","nodeType":"YulIdentifier","src":"7248:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7227:6:2"},"nodeType":"YulFunctionCall","src":"7227:28:2"},"nodeType":"YulExpressionStatement","src":"7227:28:2"},{"nodeType":"YulAssignment","src":"7264:19:2","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7275:3:2"},{"kind":"number","nodeType":"YulLiteral","src":"7280:2:2","type":"","value":"66"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7271:3:2"},"nodeType":"YulFunctionCall","src":"7271:12:2"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7264:3:2"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7061:3:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7066:6:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7074:6:2","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7085:3:2","type":""}],"src":"6845:444:2"},{"body":{"nodeType":"YulBlock","src":"7395:125:2","statements":[{"nodeType":"YulAssignment","src":"7405:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7417:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"7428:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7413:3:2"},"nodeType":"YulFunctionCall","src":"7413:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7405:4:2"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7447:9:2"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7462:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"7470:42:2","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7458:3:2"},"nodeType":"YulFunctionCall","src":"7458:55:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7440:6:2"},"nodeType":"YulFunctionCall","src":"7440:74:2"},"nodeType":"YulExpressionStatement","src":"7440:74:2"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7364:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7375:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7386:4:2","type":""}],"src":"7294:226:2"},{"body":{"nodeType":"YulBlock","src":"7682:241:2","statements":[{"nodeType":"YulAssignment","src":"7692:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7704:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"7715:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7700:3:2"},"nodeType":"YulFunctionCall","src":"7700:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7692:4:2"}]},{"nodeType":"YulVariableDeclaration","src":"7727:52:2","value":{"kind":"number","nodeType":"YulLiteral","src":"7737:42:2","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7731:2:2","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7795:9:2"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7810:6:2"},{"name":"_1","nodeType":"YulIdentifier","src":"7818:2:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7806:3:2"},"nodeType":"YulFunctionCall","src":"7806:15:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7788:6:2"},"nodeType":"YulFunctionCall","src":"7788:34:2"},"nodeType":"YulExpressionStatement","src":"7788:34:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7842:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"7853:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7838:3:2"},"nodeType":"YulFunctionCall","src":"7838:18:2"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7862:6:2"},{"name":"_1","nodeType":"YulIdentifier","src":"7870:2:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7858:3:2"},"nodeType":"YulFunctionCall","src":"7858:15:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7831:6:2"},"nodeType":"YulFunctionCall","src":"7831:43:2"},"nodeType":"YulExpressionStatement","src":"7831:43:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7894:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"7905:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7890:3:2"},"nodeType":"YulFunctionCall","src":"7890:18:2"},{"name":"value2","nodeType":"YulIdentifier","src":"7910:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7883:6:2"},"nodeType":"YulFunctionCall","src":"7883:34:2"},"nodeType":"YulExpressionStatement","src":"7883:34:2"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7635:9:2","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7646:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7654:6:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7662:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7673:4:2","type":""}],"src":"7525:398:2"},{"body":{"nodeType":"YulBlock","src":"8057:168:2","statements":[{"nodeType":"YulAssignment","src":"8067:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8079:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"8090:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8075:3:2"},"nodeType":"YulFunctionCall","src":"8075:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8067:4:2"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8109:9:2"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8124:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"8132:42:2","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8120:3:2"},"nodeType":"YulFunctionCall","src":"8120:55:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8102:6:2"},"nodeType":"YulFunctionCall","src":"8102:74:2"},"nodeType":"YulExpressionStatement","src":"8102:74:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8196:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"8207:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8192:3:2"},"nodeType":"YulFunctionCall","src":"8192:18:2"},{"name":"value1","nodeType":"YulIdentifier","src":"8212:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8185:6:2"},"nodeType":"YulFunctionCall","src":"8185:34:2"},"nodeType":"YulExpressionStatement","src":"8185:34:2"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8018:9:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8029:6:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8037:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8048:4:2","type":""}],"src":"7928:297:2"},{"body":{"nodeType":"YulBlock","src":"8325:92:2","statements":[{"nodeType":"YulAssignment","src":"8335:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8347:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"8358:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8343:3:2"},"nodeType":"YulFunctionCall","src":"8343:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8335:4:2"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8377:9:2"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8402:6:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8395:6:2"},"nodeType":"YulFunctionCall","src":"8395:14:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8388:6:2"},"nodeType":"YulFunctionCall","src":"8388:22:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8370:6:2"},"nodeType":"YulFunctionCall","src":"8370:41:2"},"nodeType":"YulExpressionStatement","src":"8370:41:2"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8294:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8305:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8316:4:2","type":""}],"src":"8230:187:2"},{"body":{"nodeType":"YulBlock","src":"8523:76:2","statements":[{"nodeType":"YulAssignment","src":"8533:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8545:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"8556:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8541:3:2"},"nodeType":"YulFunctionCall","src":"8541:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8533:4:2"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8575:9:2"},{"name":"value0","nodeType":"YulIdentifier","src":"8586:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8568:6:2"},"nodeType":"YulFunctionCall","src":"8568:25:2"},"nodeType":"YulExpressionStatement","src":"8568:25:2"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8492:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8503:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8514:4:2","type":""}],"src":"8422:177:2"},{"body":{"nodeType":"YulBlock","src":"8845:373:2","statements":[{"nodeType":"YulAssignment","src":"8855:27:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8867:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"8878:3:2","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8863:3:2"},"nodeType":"YulFunctionCall","src":"8863:19:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8855:4:2"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8898:9:2"},{"name":"value0","nodeType":"YulIdentifier","src":"8909:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8891:6:2"},"nodeType":"YulFunctionCall","src":"8891:25:2"},"nodeType":"YulExpressionStatement","src":"8891:25:2"},{"nodeType":"YulVariableDeclaration","src":"8925:52:2","value":{"kind":"number","nodeType":"YulLiteral","src":"8935:42:2","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8929:2:2","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8997:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"9008:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8993:3:2"},"nodeType":"YulFunctionCall","src":"8993:18:2"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9017:6:2"},{"name":"_1","nodeType":"YulIdentifier","src":"9025:2:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9013:3:2"},"nodeType":"YulFunctionCall","src":"9013:15:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8986:6:2"},"nodeType":"YulFunctionCall","src":"8986:43:2"},"nodeType":"YulExpressionStatement","src":"8986:43:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9049:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"9060:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9045:3:2"},"nodeType":"YulFunctionCall","src":"9045:18:2"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"9069:6:2"},{"name":"_1","nodeType":"YulIdentifier","src":"9077:2:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9065:3:2"},"nodeType":"YulFunctionCall","src":"9065:15:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9038:6:2"},"nodeType":"YulFunctionCall","src":"9038:43:2"},"nodeType":"YulExpressionStatement","src":"9038:43:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9101:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"9112:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9097:3:2"},"nodeType":"YulFunctionCall","src":"9097:18:2"},{"name":"value3","nodeType":"YulIdentifier","src":"9117:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9090:6:2"},"nodeType":"YulFunctionCall","src":"9090:34:2"},"nodeType":"YulExpressionStatement","src":"9090:34:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9144:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"9155:3:2","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9140:3:2"},"nodeType":"YulFunctionCall","src":"9140:19:2"},{"name":"value4","nodeType":"YulIdentifier","src":"9161:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9133:6:2"},"nodeType":"YulFunctionCall","src":"9133:35:2"},"nodeType":"YulExpressionStatement","src":"9133:35:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9188:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"9199:3:2","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9184:3:2"},"nodeType":"YulFunctionCall","src":"9184:19:2"},{"name":"value5","nodeType":"YulIdentifier","src":"9205:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9177:6:2"},"nodeType":"YulFunctionCall","src":"9177:35:2"},"nodeType":"YulExpressionStatement","src":"9177:35:2"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8774:9:2","type":""},{"name":"value5","nodeType":"YulTypedName","src":"8785:6:2","type":""},{"name":"value4","nodeType":"YulTypedName","src":"8793:6:2","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8801:6:2","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8809:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8817:6:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8825:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8836:4:2","type":""}],"src":"8604:614:2"},{"body":{"nodeType":"YulBlock","src":"9408:255:2","statements":[{"nodeType":"YulAssignment","src":"9418:27:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9430:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"9441:3:2","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9426:3:2"},"nodeType":"YulFunctionCall","src":"9426:19:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9418:4:2"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9461:9:2"},{"name":"value0","nodeType":"YulIdentifier","src":"9472:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9454:6:2"},"nodeType":"YulFunctionCall","src":"9454:25:2"},"nodeType":"YulExpressionStatement","src":"9454:25:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9499:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"9510:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9495:3:2"},"nodeType":"YulFunctionCall","src":"9495:18:2"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9519:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"9527:42:2","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9515:3:2"},"nodeType":"YulFunctionCall","src":"9515:55:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9488:6:2"},"nodeType":"YulFunctionCall","src":"9488:83:2"},"nodeType":"YulExpressionStatement","src":"9488:83:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9591:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"9602:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9587:3:2"},"nodeType":"YulFunctionCall","src":"9587:18:2"},{"name":"value2","nodeType":"YulIdentifier","src":"9607:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9580:6:2"},"nodeType":"YulFunctionCall","src":"9580:34:2"},"nodeType":"YulExpressionStatement","src":"9580:34:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9634:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"9645:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9630:3:2"},"nodeType":"YulFunctionCall","src":"9630:18:2"},{"name":"value3","nodeType":"YulIdentifier","src":"9650:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9623:6:2"},"nodeType":"YulFunctionCall","src":"9623:34:2"},"nodeType":"YulExpressionStatement","src":"9623:34:2"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9353:9:2","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9364:6:2","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9372:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9380:6:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9388:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9399:4:2","type":""}],"src":"9223:440:2"},{"body":{"nodeType":"YulBlock","src":"9881:299:2","statements":[{"nodeType":"YulAssignment","src":"9891:27:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9903:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"9914:3:2","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9899:3:2"},"nodeType":"YulFunctionCall","src":"9899:19:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9891:4:2"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9934:9:2"},{"name":"value0","nodeType":"YulIdentifier","src":"9945:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9927:6:2"},"nodeType":"YulFunctionCall","src":"9927:25:2"},"nodeType":"YulExpressionStatement","src":"9927:25:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9972:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"9983:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9968:3:2"},"nodeType":"YulFunctionCall","src":"9968:18:2"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9992:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"10000:42:2","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9988:3:2"},"nodeType":"YulFunctionCall","src":"9988:55:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9961:6:2"},"nodeType":"YulFunctionCall","src":"9961:83:2"},"nodeType":"YulExpressionStatement","src":"9961:83:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10064:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"10075:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10060:3:2"},"nodeType":"YulFunctionCall","src":"10060:18:2"},{"name":"value2","nodeType":"YulIdentifier","src":"10080:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10053:6:2"},"nodeType":"YulFunctionCall","src":"10053:34:2"},"nodeType":"YulExpressionStatement","src":"10053:34:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10107:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"10118:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10103:3:2"},"nodeType":"YulFunctionCall","src":"10103:18:2"},{"name":"value3","nodeType":"YulIdentifier","src":"10123:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10096:6:2"},"nodeType":"YulFunctionCall","src":"10096:34:2"},"nodeType":"YulExpressionStatement","src":"10096:34:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10150:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"10161:3:2","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10146:3:2"},"nodeType":"YulFunctionCall","src":"10146:19:2"},{"name":"value4","nodeType":"YulIdentifier","src":"10167:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10139:6:2"},"nodeType":"YulFunctionCall","src":"10139:35:2"},"nodeType":"YulExpressionStatement","src":"10139:35:2"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9818:9:2","type":""},{"name":"value4","nodeType":"YulTypedName","src":"9829:6:2","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9837:6:2","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9845:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9853:6:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9861:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9872:4:2","type":""}],"src":"9668:512:2"},{"body":{"nodeType":"YulBlock","src":"10398:299:2","statements":[{"nodeType":"YulAssignment","src":"10408:27:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10420:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"10431:3:2","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10416:3:2"},"nodeType":"YulFunctionCall","src":"10416:19:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10408:4:2"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10451:9:2"},{"name":"value0","nodeType":"YulIdentifier","src":"10462:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10444:6:2"},"nodeType":"YulFunctionCall","src":"10444:25:2"},"nodeType":"YulExpressionStatement","src":"10444:25:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10489:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"10500:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10485:3:2"},"nodeType":"YulFunctionCall","src":"10485:18:2"},{"name":"value1","nodeType":"YulIdentifier","src":"10505:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10478:6:2"},"nodeType":"YulFunctionCall","src":"10478:34:2"},"nodeType":"YulExpressionStatement","src":"10478:34:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10532:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"10543:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10528:3:2"},"nodeType":"YulFunctionCall","src":"10528:18:2"},{"name":"value2","nodeType":"YulIdentifier","src":"10548:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10521:6:2"},"nodeType":"YulFunctionCall","src":"10521:34:2"},"nodeType":"YulExpressionStatement","src":"10521:34:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10575:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"10586:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10571:3:2"},"nodeType":"YulFunctionCall","src":"10571:18:2"},{"name":"value3","nodeType":"YulIdentifier","src":"10591:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10564:6:2"},"nodeType":"YulFunctionCall","src":"10564:34:2"},"nodeType":"YulExpressionStatement","src":"10564:34:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10618:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"10629:3:2","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10614:3:2"},"nodeType":"YulFunctionCall","src":"10614:19:2"},{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"10639:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"10647:42:2","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10635:3:2"},"nodeType":"YulFunctionCall","src":"10635:55:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10607:6:2"},"nodeType":"YulFunctionCall","src":"10607:84:2"},"nodeType":"YulExpressionStatement","src":"10607:84:2"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10335:9:2","type":""},{"name":"value4","nodeType":"YulTypedName","src":"10346:6:2","type":""},{"name":"value3","nodeType":"YulTypedName","src":"10354:6:2","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10362:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10370:6:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10378:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10389:4:2","type":""}],"src":"10185:512:2"},{"body":{"nodeType":"YulBlock","src":"10883:217:2","statements":[{"nodeType":"YulAssignment","src":"10893:27:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10905:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"10916:3:2","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10901:3:2"},"nodeType":"YulFunctionCall","src":"10901:19:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10893:4:2"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10936:9:2"},{"name":"value0","nodeType":"YulIdentifier","src":"10947:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10929:6:2"},"nodeType":"YulFunctionCall","src":"10929:25:2"},"nodeType":"YulExpressionStatement","src":"10929:25:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10974:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"10985:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10970:3:2"},"nodeType":"YulFunctionCall","src":"10970:18:2"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10994:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"11002:4:2","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10990:3:2"},"nodeType":"YulFunctionCall","src":"10990:17:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10963:6:2"},"nodeType":"YulFunctionCall","src":"10963:45:2"},"nodeType":"YulExpressionStatement","src":"10963:45:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11028:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"11039:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11024:3:2"},"nodeType":"YulFunctionCall","src":"11024:18:2"},{"name":"value2","nodeType":"YulIdentifier","src":"11044:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11017:6:2"},"nodeType":"YulFunctionCall","src":"11017:34:2"},"nodeType":"YulExpressionStatement","src":"11017:34:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11071:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"11082:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11067:3:2"},"nodeType":"YulFunctionCall","src":"11067:18:2"},{"name":"value3","nodeType":"YulIdentifier","src":"11087:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11060:6:2"},"nodeType":"YulFunctionCall","src":"11060:34:2"},"nodeType":"YulExpressionStatement","src":"11060:34:2"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10828:9:2","type":""},{"name":"value3","nodeType":"YulTypedName","src":"10839:6:2","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10847:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10855:6:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10863:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10874:4:2","type":""}],"src":"10702:398:2"},{"body":{"nodeType":"YulBlock","src":"11224:100:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11241:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"11252:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11234:6:2"},"nodeType":"YulFunctionCall","src":"11234:21:2"},"nodeType":"YulExpressionStatement","src":"11234:21:2"},{"nodeType":"YulAssignment","src":"11264:54:2","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11291:6:2"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11303:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"11314:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11299:3:2"},"nodeType":"YulFunctionCall","src":"11299:18:2"}],"functionName":{"name":"abi_encode_t_bytes","nodeType":"YulIdentifier","src":"11272:18:2"},"nodeType":"YulFunctionCall","src":"11272:46:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11264:4:2"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11193:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11204:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11215:4:2","type":""}],"src":"11105:219:2"},{"body":{"nodeType":"YulBlock","src":"11444:125:2","statements":[{"nodeType":"YulAssignment","src":"11454:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11466:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"11477:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11462:3:2"},"nodeType":"YulFunctionCall","src":"11462:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11454:4:2"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11496:9:2"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11511:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"11519:42:2","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11507:3:2"},"nodeType":"YulFunctionCall","src":"11507:55:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11489:6:2"},"nodeType":"YulFunctionCall","src":"11489:74:2"},"nodeType":"YulExpressionStatement","src":"11489:74:2"}]},"name":"abi_encode_tuple_t_contract$_IERC20_$176__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11413:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11424:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11435:4:2","type":""}],"src":"11329:240:2"},{"body":{"nodeType":"YulBlock","src":"11696:125:2","statements":[{"nodeType":"YulAssignment","src":"11706:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11718:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"11729:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11714:3:2"},"nodeType":"YulFunctionCall","src":"11714:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11706:4:2"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11748:9:2"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11763:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"11771:42:2","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11759:3:2"},"nodeType":"YulFunctionCall","src":"11759:55:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11741:6:2"},"nodeType":"YulFunctionCall","src":"11741:74:2"},"nodeType":"YulExpressionStatement","src":"11741:74:2"}]},"name":"abi_encode_tuple_t_contract$_ITransferHook_$968__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11665:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11676:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11687:4:2","type":""}],"src":"11574:247:2"},{"body":{"nodeType":"YulBlock","src":"11941:103:2","statements":[{"nodeType":"YulAssignment","src":"11951:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11963:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"11974:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11959:3:2"},"nodeType":"YulFunctionCall","src":"11959:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11951:4:2"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12020:6:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"12028:9:2"}],"functionName":{"name":"abi_encode_t_enum$_DelegationType","nodeType":"YulIdentifier","src":"11986:33:2"},"nodeType":"YulFunctionCall","src":"11986:52:2"},"nodeType":"YulExpressionStatement","src":"11986:52:2"}]},"name":"abi_encode_tuple_t_enum$_DelegationType_$5__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11910:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11921:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11932:4:2","type":""}],"src":"11826:218:2"},{"body":{"nodeType":"YulBlock","src":"12170:100:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12187:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"12198:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12180:6:2"},"nodeType":"YulFunctionCall","src":"12180:21:2"},"nodeType":"YulExpressionStatement","src":"12180:21:2"},{"nodeType":"YulAssignment","src":"12210:54:2","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12237:6:2"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12249:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"12260:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12245:3:2"},"nodeType":"YulFunctionCall","src":"12245:18:2"}],"functionName":{"name":"abi_encode_t_bytes","nodeType":"YulIdentifier","src":"12218:18:2"},"nodeType":"YulFunctionCall","src":"12218:46:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12210:4:2"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12139:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12150:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12161:4:2","type":""}],"src":"12049:221:2"},{"body":{"nodeType":"YulBlock","src":"12449:225:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12466:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"12477:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12459:6:2"},"nodeType":"YulFunctionCall","src":"12459:21:2"},"nodeType":"YulExpressionStatement","src":"12459:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12500:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"12511:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12496:3:2"},"nodeType":"YulFunctionCall","src":"12496:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"12516:2:2","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12489:6:2"},"nodeType":"YulFunctionCall","src":"12489:30:2"},"nodeType":"YulExpressionStatement","src":"12489:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12539:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"12550:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12535:3:2"},"nodeType":"YulFunctionCall","src":"12535:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"12555:34:2","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12528:6:2"},"nodeType":"YulFunctionCall","src":"12528:62:2"},"nodeType":"YulExpressionStatement","src":"12528:62:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12610:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"12621:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12606:3:2"},"nodeType":"YulFunctionCall","src":"12606:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"12626:5:2","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12599:6:2"},"nodeType":"YulFunctionCall","src":"12599:33:2"},"nodeType":"YulExpressionStatement","src":"12599:33:2"},{"nodeType":"YulAssignment","src":"12641:27:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12653:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"12664:3:2","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12649:3:2"},"nodeType":"YulFunctionCall","src":"12649:19:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12641:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12426:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12440:4:2","type":""}],"src":"12275:399:2"},{"body":{"nodeType":"YulBlock","src":"12853:224:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12870:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"12881:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12863:6:2"},"nodeType":"YulFunctionCall","src":"12863:21:2"},"nodeType":"YulExpressionStatement","src":"12863:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12904:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"12915:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12900:3:2"},"nodeType":"YulFunctionCall","src":"12900:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"12920:2:2","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12893:6:2"},"nodeType":"YulFunctionCall","src":"12893:30:2"},"nodeType":"YulExpressionStatement","src":"12893:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12943:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"12954:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12939:3:2"},"nodeType":"YulFunctionCall","src":"12939:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"12959:34:2","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12932:6:2"},"nodeType":"YulFunctionCall","src":"12932:62:2"},"nodeType":"YulExpressionStatement","src":"12932:62:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13014:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"13025:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13010:3:2"},"nodeType":"YulFunctionCall","src":"13010:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"13030:4:2","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13003:6:2"},"nodeType":"YulFunctionCall","src":"13003:32:2"},"nodeType":"YulExpressionStatement","src":"13003:32:2"},{"nodeType":"YulAssignment","src":"13044:27:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13056:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"13067:3:2","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13052:3:2"},"nodeType":"YulFunctionCall","src":"13052:19:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13044:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12830:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12844:4:2","type":""}],"src":"12679:398:2"},{"body":{"nodeType":"YulBlock","src":"13256:177:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13273:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"13284:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13266:6:2"},"nodeType":"YulFunctionCall","src":"13266:21:2"},"nodeType":"YulExpressionStatement","src":"13266:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13307:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"13318:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13303:3:2"},"nodeType":"YulFunctionCall","src":"13303:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"13323:2:2","type":"","value":"27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13296:6:2"},"nodeType":"YulFunctionCall","src":"13296:30:2"},"nodeType":"YulExpressionStatement","src":"13296:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13346:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"13357:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13342:3:2"},"nodeType":"YulFunctionCall","src":"13342:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"13362:29:2","type":"","value":"SafeMath: addition overflow"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13335:6:2"},"nodeType":"YulFunctionCall","src":"13335:57:2"},"nodeType":"YulExpressionStatement","src":"13335:57:2"},{"nodeType":"YulAssignment","src":"13401:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13413:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"13424:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13409:3:2"},"nodeType":"YulFunctionCall","src":"13409:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13401:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13233:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13247:4:2","type":""}],"src":"13082:351:2"},{"body":{"nodeType":"YulBlock","src":"13612:169:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13629:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"13640:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13622:6:2"},"nodeType":"YulFunctionCall","src":"13622:21:2"},"nodeType":"YulExpressionStatement","src":"13622:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13663:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"13674:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13659:3:2"},"nodeType":"YulFunctionCall","src":"13659:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"13679:2:2","type":"","value":"19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13652:6:2"},"nodeType":"YulFunctionCall","src":"13652:30:2"},"nodeType":"YulExpressionStatement","src":"13652:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13702:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"13713:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13698:3:2"},"nodeType":"YulFunctionCall","src":"13698:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"13718:21:2","type":"","value":"INVALID_ZERO_AMOUNT"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13691:6:2"},"nodeType":"YulFunctionCall","src":"13691:49:2"},"nodeType":"YulExpressionStatement","src":"13691:49:2"},{"nodeType":"YulAssignment","src":"13749:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13761:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"13772:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13757:3:2"},"nodeType":"YulFunctionCall","src":"13757:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13749:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_33d2eb294587ef7b32eb48e48695ebfec45a9c8922ec7d1c444cfad1fb208e8d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13589:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13603:4:2","type":""}],"src":"13438:343:2"},{"body":{"nodeType":"YulBlock","src":"13960:182:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13977:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"13988:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13970:6:2"},"nodeType":"YulFunctionCall","src":"13970:21:2"},"nodeType":"YulExpressionStatement","src":"13970:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14011:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"14022:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14007:3:2"},"nodeType":"YulFunctionCall","src":"14007:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"14027:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14000:6:2"},"nodeType":"YulFunctionCall","src":"14000:30:2"},"nodeType":"YulExpressionStatement","src":"14000:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14050:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"14061:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14046:3:2"},"nodeType":"YulFunctionCall","src":"14046:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"14066:34:2","type":"","value":"SafeERC20: low-level call failed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14039:6:2"},"nodeType":"YulFunctionCall","src":"14039:62:2"},"nodeType":"YulExpressionStatement","src":"14039:62:2"},{"nodeType":"YulAssignment","src":"14110:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14122:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"14133:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14118:3:2"},"nodeType":"YulFunctionCall","src":"14118:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14110:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13937:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13951:4:2","type":""}],"src":"13786:356:2"},{"body":{"nodeType":"YulBlock","src":"14321:167:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14338:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"14349:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14331:6:2"},"nodeType":"YulFunctionCall","src":"14331:21:2"},"nodeType":"YulExpressionStatement","src":"14331:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14372:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"14383:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14368:3:2"},"nodeType":"YulFunctionCall","src":"14368:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"14388:2:2","type":"","value":"17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14361:6:2"},"nodeType":"YulFunctionCall","src":"14361:30:2"},"nodeType":"YulExpressionStatement","src":"14361:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14411:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"14422:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14407:3:2"},"nodeType":"YulFunctionCall","src":"14407:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"14427:19:2","type":"","value":"INVALID_SIGNATURE"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14400:6:2"},"nodeType":"YulFunctionCall","src":"14400:47:2"},"nodeType":"YulExpressionStatement","src":"14400:47:2"},{"nodeType":"YulAssignment","src":"14456:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14468:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"14479:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14464:3:2"},"nodeType":"YulFunctionCall","src":"14464:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14456:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_5e2e9eaa2d734966dea0900deacd15b20129fbce05255d633a3ce5ebca181b88__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14298:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14312:4:2","type":""}],"src":"14147:341:2"},{"body":{"nodeType":"YulBlock","src":"14667:171:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14684:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"14695:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14677:6:2"},"nodeType":"YulFunctionCall","src":"14677:21:2"},"nodeType":"YulExpressionStatement","src":"14677:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14718:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"14729:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14714:3:2"},"nodeType":"YulFunctionCall","src":"14714:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"14734:2:2","type":"","value":"21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14707:6:2"},"nodeType":"YulFunctionCall","src":"14707:30:2"},"nodeType":"YulExpressionStatement","src":"14707:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14757:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"14768:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14753:3:2"},"nodeType":"YulFunctionCall","src":"14753:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"14773:23:2","type":"","value":"INSUFFICIENT_COOLDOWN"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14746:6:2"},"nodeType":"YulFunctionCall","src":"14746:51:2"},"nodeType":"YulExpressionStatement","src":"14746:51:2"},{"nodeType":"YulAssignment","src":"14806:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14818:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"14829:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14814:3:2"},"nodeType":"YulFunctionCall","src":"14814:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14806:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_66cceaab4b8a6f427cff5482a526862a61c3ef92948b70aceb4a8f720a8f0ead__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14644:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14658:4:2","type":""}],"src":"14493:345:2"},{"body":{"nodeType":"YulBlock","src":"15017:223:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15034:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"15045:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15027:6:2"},"nodeType":"YulFunctionCall","src":"15027:21:2"},"nodeType":"YulExpressionStatement","src":"15027:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15068:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"15079:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15064:3:2"},"nodeType":"YulFunctionCall","src":"15064:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"15084:2:2","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15057:6:2"},"nodeType":"YulFunctionCall","src":"15057:30:2"},"nodeType":"YulExpressionStatement","src":"15057:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15107:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"15118:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15103:3:2"},"nodeType":"YulFunctionCall","src":"15103:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"15123:34:2","type":"","value":"SafeMath: multiplication overflo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15096:6:2"},"nodeType":"YulFunctionCall","src":"15096:62:2"},"nodeType":"YulExpressionStatement","src":"15096:62:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15178:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"15189:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15174:3:2"},"nodeType":"YulFunctionCall","src":"15174:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"15194:3:2","type":"","value":"w"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15167:6:2"},"nodeType":"YulFunctionCall","src":"15167:31:2"},"nodeType":"YulExpressionStatement","src":"15167:31:2"},{"nodeType":"YulAssignment","src":"15207:27:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15219:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"15230:3:2","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15215:3:2"},"nodeType":"YulFunctionCall","src":"15215:19:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15207:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14994:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15008:4:2","type":""}],"src":"14843:397:2"},{"body":{"nodeType":"YulBlock","src":"15419:236:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15436:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"15447:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15429:6:2"},"nodeType":"YulFunctionCall","src":"15429:21:2"},"nodeType":"YulExpressionStatement","src":"15429:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15470:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"15481:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15466:3:2"},"nodeType":"YulFunctionCall","src":"15466:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"15486:2:2","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15459:6:2"},"nodeType":"YulFunctionCall","src":"15459:30:2"},"nodeType":"YulExpressionStatement","src":"15459:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15509:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"15520:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15505:3:2"},"nodeType":"YulFunctionCall","src":"15505:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"15525:34:2","type":"","value":"Contract instance has already be"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15498:6:2"},"nodeType":"YulFunctionCall","src":"15498:62:2"},"nodeType":"YulExpressionStatement","src":"15498:62:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15580:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"15591:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15576:3:2"},"nodeType":"YulFunctionCall","src":"15576:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"15596:16:2","type":"","value":"en initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15569:6:2"},"nodeType":"YulFunctionCall","src":"15569:44:2"},"nodeType":"YulExpressionStatement","src":"15569:44:2"},{"nodeType":"YulAssignment","src":"15622:27:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15634:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"15645:3:2","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15630:3:2"},"nodeType":"YulFunctionCall","src":"15630:19:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15622:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_9fbba6c4dcac9134893b633b9564f36435b3f927c1d5fa152c5c14b20cecb1a4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15396:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15410:4:2","type":""}],"src":"15245:410:2"},{"body":{"nodeType":"YulBlock","src":"15834:168:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15851:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"15862:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15844:6:2"},"nodeType":"YulFunctionCall","src":"15844:21:2"},"nodeType":"YulExpressionStatement","src":"15844:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15885:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"15896:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15881:3:2"},"nodeType":"YulFunctionCall","src":"15881:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"15901:2:2","type":"","value":"18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15874:6:2"},"nodeType":"YulFunctionCall","src":"15874:30:2"},"nodeType":"YulExpressionStatement","src":"15874:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15924:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"15935:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15920:3:2"},"nodeType":"YulFunctionCall","src":"15920:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"15940:20:2","type":"","value":"INVALID_EXPIRATION"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15913:6:2"},"nodeType":"YulFunctionCall","src":"15913:48:2"},"nodeType":"YulExpressionStatement","src":"15913:48:2"},{"nodeType":"YulAssignment","src":"15970:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15982:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"15993:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15978:3:2"},"nodeType":"YulFunctionCall","src":"15978:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15970:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_9fe3e5cf49f72bf8a6a8455c3e990f8479f5dfa09ac808886f330a39b0029c2d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15811:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15825:4:2","type":""}],"src":"15660:342:2"},{"body":{"nodeType":"YulBlock","src":"16181:163:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16198:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"16209:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16191:6:2"},"nodeType":"YulFunctionCall","src":"16191:21:2"},"nodeType":"YulExpressionStatement","src":"16191:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16232:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"16243:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16228:3:2"},"nodeType":"YulFunctionCall","src":"16228:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"16248:2:2","type":"","value":"13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16221:6:2"},"nodeType":"YulFunctionCall","src":"16221:30:2"},"nodeType":"YulExpressionStatement","src":"16221:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16271:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"16282:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16267:3:2"},"nodeType":"YulFunctionCall","src":"16267:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"16287:15:2","type":"","value":"INVALID_NONCE"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16260:6:2"},"nodeType":"YulFunctionCall","src":"16260:43:2"},"nodeType":"YulExpressionStatement","src":"16260:43:2"},{"nodeType":"YulAssignment","src":"16312:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16324:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"16335:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16320:3:2"},"nodeType":"YulFunctionCall","src":"16320:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16312:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_a19e25beaf00f467d35fbe7e167b5794fca796dbfd417dd2accc8f5303300b99__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16158:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16172:4:2","type":""}],"src":"16007:337:2"},{"body":{"nodeType":"YulBlock","src":"16523:171:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16540:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"16551:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16533:6:2"},"nodeType":"YulFunctionCall","src":"16533:21:2"},"nodeType":"YulExpressionStatement","src":"16533:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16574:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"16585:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16570:3:2"},"nodeType":"YulFunctionCall","src":"16570:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"16590:2:2","type":"","value":"21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16563:6:2"},"nodeType":"YulFunctionCall","src":"16563:30:2"},"nodeType":"YulExpressionStatement","src":"16563:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16613:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"16624:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16609:3:2"},"nodeType":"YulFunctionCall","src":"16609:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"16629:23:2","type":"","value":"ONLY_EMISSION_MANAGER"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16602:6:2"},"nodeType":"YulFunctionCall","src":"16602:51:2"},"nodeType":"YulExpressionStatement","src":"16602:51:2"},{"nodeType":"YulAssignment","src":"16662:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16674:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"16685:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16670:3:2"},"nodeType":"YulFunctionCall","src":"16670:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16662:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_a28d34ff463a8cc689c6ec4b8c995983f85d0a40987242bc4cc3cec37303c18e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16500:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16514:4:2","type":""}],"src":"16349:345:2"},{"body":{"nodeType":"YulBlock","src":"16873:163:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16890:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"16901:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16883:6:2"},"nodeType":"YulFunctionCall","src":"16883:21:2"},"nodeType":"YulExpressionStatement","src":"16883:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16924:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"16935:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16920:3:2"},"nodeType":"YulFunctionCall","src":"16920:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"16940:2:2","type":"","value":"13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16913:6:2"},"nodeType":"YulFunctionCall","src":"16913:30:2"},"nodeType":"YulExpressionStatement","src":"16913:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16963:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"16974:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16959:3:2"},"nodeType":"YulFunctionCall","src":"16959:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"16979:15:2","type":"","value":"INVALID_OWNER"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16952:6:2"},"nodeType":"YulFunctionCall","src":"16952:43:2"},"nodeType":"YulExpressionStatement","src":"16952:43:2"},{"nodeType":"YulAssignment","src":"17004:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17016:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"17027:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17012:3:2"},"nodeType":"YulFunctionCall","src":"17012:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17004:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_a30e2b4f22d955e30086ae3aef0adfd87eec9d0d3f055d6aa9af61f522dda886__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16850:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16864:4:2","type":""}],"src":"16699:337:2"},{"body":{"nodeType":"YulBlock","src":"17215:223:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17232:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"17243:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17225:6:2"},"nodeType":"YulFunctionCall","src":"17225:21:2"},"nodeType":"YulExpressionStatement","src":"17225:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17266:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"17277:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17262:3:2"},"nodeType":"YulFunctionCall","src":"17262:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"17282:2:2","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17255:6:2"},"nodeType":"YulFunctionCall","src":"17255:30:2"},"nodeType":"YulExpressionStatement","src":"17255:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17305:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"17316:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17301:3:2"},"nodeType":"YulFunctionCall","src":"17301:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"17321:34:2","type":"","value":"ERC20: burn from the zero addres"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17294:6:2"},"nodeType":"YulFunctionCall","src":"17294:62:2"},"nodeType":"YulExpressionStatement","src":"17294:62:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17376:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"17387:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17372:3:2"},"nodeType":"YulFunctionCall","src":"17372:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"17392:3:2","type":"","value":"s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17365:6:2"},"nodeType":"YulFunctionCall","src":"17365:31:2"},"nodeType":"YulExpressionStatement","src":"17365:31:2"},{"nodeType":"YulAssignment","src":"17405:27:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17417:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"17428:3:2","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17413:3:2"},"nodeType":"YulFunctionCall","src":"17413:19:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17405:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17192:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17206:4:2","type":""}],"src":"17041:397:2"},{"body":{"nodeType":"YulBlock","src":"17617:227:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17634:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"17645:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17627:6:2"},"nodeType":"YulFunctionCall","src":"17627:21:2"},"nodeType":"YulExpressionStatement","src":"17627:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17668:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"17679:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17664:3:2"},"nodeType":"YulFunctionCall","src":"17664:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"17684:2:2","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17657:6:2"},"nodeType":"YulFunctionCall","src":"17657:30:2"},"nodeType":"YulExpressionStatement","src":"17657:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17707:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"17718:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17703:3:2"},"nodeType":"YulFunctionCall","src":"17703:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"17723:34:2","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17696:6:2"},"nodeType":"YulFunctionCall","src":"17696:62:2"},"nodeType":"YulExpressionStatement","src":"17696:62:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17778:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"17789:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17774:3:2"},"nodeType":"YulFunctionCall","src":"17774:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"17794:7:2","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17767:6:2"},"nodeType":"YulFunctionCall","src":"17767:35:2"},"nodeType":"YulExpressionStatement","src":"17767:35:2"},{"nodeType":"YulAssignment","src":"17811:27:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17823:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"17834:3:2","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17819:3:2"},"nodeType":"YulFunctionCall","src":"17819:19:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17811:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17594:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17608:4:2","type":""}],"src":"17443:401:2"},{"body":{"nodeType":"YulBlock","src":"18023:173:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18040:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"18051:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18033:6:2"},"nodeType":"YulFunctionCall","src":"18033:21:2"},"nodeType":"YulExpressionStatement","src":"18033:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18074:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"18085:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18070:3:2"},"nodeType":"YulFunctionCall","src":"18070:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"18090:2:2","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18063:6:2"},"nodeType":"YulFunctionCall","src":"18063:30:2"},"nodeType":"YulExpressionStatement","src":"18063:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18113:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"18124:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18109:3:2"},"nodeType":"YulFunctionCall","src":"18109:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"18129:25:2","type":"","value":"UNSTAKE_WINDOW_FINISHED"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18102:6:2"},"nodeType":"YulFunctionCall","src":"18102:53:2"},"nodeType":"YulExpressionStatement","src":"18102:53:2"},{"nodeType":"YulAssignment","src":"18164:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18176:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"18187:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18172:3:2"},"nodeType":"YulFunctionCall","src":"18172:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18164:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6959acf2335419e4a75195e2fb1c276a96baa5b7fab6be19b14b9420a4bd962__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18000:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18014:4:2","type":""}],"src":"17849:347:2"},{"body":{"nodeType":"YulBlock","src":"18375:226:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18392:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"18403:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18385:6:2"},"nodeType":"YulFunctionCall","src":"18385:21:2"},"nodeType":"YulExpressionStatement","src":"18385:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18426:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"18437:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18422:3:2"},"nodeType":"YulFunctionCall","src":"18422:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"18442:2:2","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18415:6:2"},"nodeType":"YulFunctionCall","src":"18415:30:2"},"nodeType":"YulExpressionStatement","src":"18415:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18465:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"18476:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18461:3:2"},"nodeType":"YulFunctionCall","src":"18461:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"18481:34:2","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18454:6:2"},"nodeType":"YulFunctionCall","src":"18454:62:2"},"nodeType":"YulExpressionStatement","src":"18454:62:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18536:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"18547:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18532:3:2"},"nodeType":"YulFunctionCall","src":"18532:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"18552:6:2","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18525:6:2"},"nodeType":"YulFunctionCall","src":"18525:34:2"},"nodeType":"YulExpressionStatement","src":"18525:34:2"},{"nodeType":"YulAssignment","src":"18568:27:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18580:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"18591:3:2","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18576:3:2"},"nodeType":"YulFunctionCall","src":"18576:19:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18568:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18352:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18366:4:2","type":""}],"src":"18201:400:2"},{"body":{"nodeType":"YulBlock","src":"18780:170:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18797:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"18808:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18790:6:2"},"nodeType":"YulFunctionCall","src":"18790:21:2"},"nodeType":"YulExpressionStatement","src":"18790:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18831:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"18842:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18827:3:2"},"nodeType":"YulFunctionCall","src":"18827:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"18847:2:2","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18820:6:2"},"nodeType":"YulFunctionCall","src":"18820:30:2"},"nodeType":"YulExpressionStatement","src":"18820:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18870:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"18881:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18866:3:2"},"nodeType":"YulFunctionCall","src":"18866:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"18886:22:2","type":"","value":"INVALID_BLOCK_NUMBER"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18859:6:2"},"nodeType":"YulFunctionCall","src":"18859:50:2"},"nodeType":"YulExpressionStatement","src":"18859:50:2"},{"nodeType":"YulAssignment","src":"18918:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18930:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"18941:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18926:3:2"},"nodeType":"YulFunctionCall","src":"18926:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18918:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_dd61c748dcfe71393203093270c457f6ceb8834cce0160376620e7b2f811559c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18757:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18771:4:2","type":""}],"src":"18606:344:2"},{"body":{"nodeType":"YulBlock","src":"19129:232:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19146:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"19157:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19139:6:2"},"nodeType":"YulFunctionCall","src":"19139:21:2"},"nodeType":"YulExpressionStatement","src":"19139:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19180:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"19191:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19176:3:2"},"nodeType":"YulFunctionCall","src":"19176:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"19196:2:2","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19169:6:2"},"nodeType":"YulFunctionCall","src":"19169:30:2"},"nodeType":"YulExpressionStatement","src":"19169:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19219:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"19230:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19215:3:2"},"nodeType":"YulFunctionCall","src":"19215:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"19235:34:2","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19208:6:2"},"nodeType":"YulFunctionCall","src":"19208:62:2"},"nodeType":"YulExpressionStatement","src":"19208:62:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19290:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"19301:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19286:3:2"},"nodeType":"YulFunctionCall","src":"19286:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"19306:12:2","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19279:6:2"},"nodeType":"YulFunctionCall","src":"19279:40:2"},"nodeType":"YulExpressionStatement","src":"19279:40:2"},{"nodeType":"YulAssignment","src":"19328:27:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19340:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"19351:3:2","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19336:3:2"},"nodeType":"YulFunctionCall","src":"19336:19:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19328:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19106:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19120:4:2","type":""}],"src":"18955:406:2"},{"body":{"nodeType":"YulBlock","src":"19540:177:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19557:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"19568:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19550:6:2"},"nodeType":"YulFunctionCall","src":"19550:21:2"},"nodeType":"YulExpressionStatement","src":"19550:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19591:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"19602:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19587:3:2"},"nodeType":"YulFunctionCall","src":"19587:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"19607:2:2","type":"","value":"27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19580:6:2"},"nodeType":"YulFunctionCall","src":"19580:30:2"},"nodeType":"YulExpressionStatement","src":"19580:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19630:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"19641:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19626:3:2"},"nodeType":"YulFunctionCall","src":"19626:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"19646:29:2","type":"","value":"INVALID_BALANCE_ON_COOLDOWN"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19619:6:2"},"nodeType":"YulFunctionCall","src":"19619:57:2"},"nodeType":"YulExpressionStatement","src":"19619:57:2"},{"nodeType":"YulAssignment","src":"19685:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19697:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"19708:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19693:3:2"},"nodeType":"YulFunctionCall","src":"19693:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19685:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_e5f9ee9777b2bbd505a43328a4cc6b61e9df46610a556d5402b9bc072df973d7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19517:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19531:4:2","type":""}],"src":"19366:351:2"},{"body":{"nodeType":"YulBlock","src":"19896:167:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19913:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"19924:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19906:6:2"},"nodeType":"YulFunctionCall","src":"19906:21:2"},"nodeType":"YulExpressionStatement","src":"19906:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19947:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"19958:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19943:3:2"},"nodeType":"YulFunctionCall","src":"19943:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"19963:2:2","type":"","value":"17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19936:6:2"},"nodeType":"YulFunctionCall","src":"19936:30:2"},"nodeType":"YulExpressionStatement","src":"19936:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19986:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"19997:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19982:3:2"},"nodeType":"YulFunctionCall","src":"19982:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"20002:19:2","type":"","value":"INVALID_DELEGATEE"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19975:6:2"},"nodeType":"YulFunctionCall","src":"19975:47:2"},"nodeType":"YulExpressionStatement","src":"19975:47:2"},{"nodeType":"YulAssignment","src":"20031:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20043:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"20054:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20039:3:2"},"nodeType":"YulFunctionCall","src":"20039:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20031:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_f448a4555410856eaebeffbdb1aef2dfca19f9de0904eb1029e0bbcd0330450f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19873:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19887:4:2","type":""}],"src":"19722:341:2"},{"body":{"nodeType":"YulBlock","src":"20242:181:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20259:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"20270:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20252:6:2"},"nodeType":"YulFunctionCall","src":"20252:21:2"},"nodeType":"YulExpressionStatement","src":"20252:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20293:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"20304:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20289:3:2"},"nodeType":"YulFunctionCall","src":"20289:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"20309:2:2","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20282:6:2"},"nodeType":"YulFunctionCall","src":"20282:30:2"},"nodeType":"YulExpressionStatement","src":"20282:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20332:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"20343:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20328:3:2"},"nodeType":"YulFunctionCall","src":"20328:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"20348:33:2","type":"","value":"SafeERC20: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20321:6:2"},"nodeType":"YulFunctionCall","src":"20321:61:2"},"nodeType":"YulExpressionStatement","src":"20321:61:2"},{"nodeType":"YulAssignment","src":"20391:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20403:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"20414:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20399:3:2"},"nodeType":"YulFunctionCall","src":"20399:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20391:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_f6ce7bfd656f35145dec774d6f7e67f4cba158373d2dd7a0f8273e232f86148d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20219:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20233:4:2","type":""}],"src":"20068:355:2"},{"body":{"nodeType":"YulBlock","src":"20602:181:2","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20619:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"20630:2:2","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20612:6:2"},"nodeType":"YulFunctionCall","src":"20612:21:2"},"nodeType":"YulExpressionStatement","src":"20612:21:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20653:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"20664:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20649:3:2"},"nodeType":"YulFunctionCall","src":"20649:18:2"},{"kind":"number","nodeType":"YulLiteral","src":"20669:2:2","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20642:6:2"},"nodeType":"YulFunctionCall","src":"20642:30:2"},"nodeType":"YulExpressionStatement","src":"20642:30:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20692:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"20703:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20688:3:2"},"nodeType":"YulFunctionCall","src":"20688:18:2"},{"kind":"string","nodeType":"YulLiteral","src":"20708:33:2","type":"","value":"ERC20: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20681:6:2"},"nodeType":"YulFunctionCall","src":"20681:61:2"},"nodeType":"YulExpressionStatement","src":"20681:61:2"},{"nodeType":"YulAssignment","src":"20751:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20763:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"20774:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20759:3:2"},"nodeType":"YulFunctionCall","src":"20759:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20751:4:2"}]}]},"name":"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20579:9:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20593:4:2","type":""}],"src":"20428:355:2"},{"body":{"nodeType":"YulBlock","src":"20889:117:2","statements":[{"nodeType":"YulAssignment","src":"20899:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20911:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"20922:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20907:3:2"},"nodeType":"YulFunctionCall","src":"20907:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20899:4:2"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20941:9:2"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20956:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"20964:34:2","type":"","value":"0xffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20952:3:2"},"nodeType":"YulFunctionCall","src":"20952:47:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20934:6:2"},"nodeType":"YulFunctionCall","src":"20934:66:2"},"nodeType":"YulExpressionStatement","src":"20934:66:2"}]},"name":"abi_encode_tuple_t_uint128__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20858:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20869:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20880:4:2","type":""}],"src":"20788:218:2"},{"body":{"nodeType":"YulBlock","src":"21140:190:2","statements":[{"nodeType":"YulAssignment","src":"21150:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21162:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"21173:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21158:3:2"},"nodeType":"YulFunctionCall","src":"21158:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21150:4:2"}]},{"nodeType":"YulVariableDeclaration","src":"21185:44:2","value":{"kind":"number","nodeType":"YulLiteral","src":"21195:34:2","type":"","value":"0xffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"21189:2:2","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21245:9:2"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21260:6:2"},{"name":"_1","nodeType":"YulIdentifier","src":"21268:2:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21256:3:2"},"nodeType":"YulFunctionCall","src":"21256:15:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21238:6:2"},"nodeType":"YulFunctionCall","src":"21238:34:2"},"nodeType":"YulExpressionStatement","src":"21238:34:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21292:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"21303:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21288:3:2"},"nodeType":"YulFunctionCall","src":"21288:18:2"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"21312:6:2"},{"name":"_1","nodeType":"YulIdentifier","src":"21320:2:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21308:3:2"},"nodeType":"YulFunctionCall","src":"21308:15:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21281:6:2"},"nodeType":"YulFunctionCall","src":"21281:43:2"},"nodeType":"YulExpressionStatement","src":"21281:43:2"}]},"name":"abi_encode_tuple_t_uint128_t_uint128__to_t_uint128_t_uint128__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21101:9:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21112:6:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21120:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21131:4:2","type":""}],"src":"21011:319:2"},{"body":{"nodeType":"YulBlock","src":"21492:233:2","statements":[{"nodeType":"YulAssignment","src":"21502:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21514:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"21525:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21510:3:2"},"nodeType":"YulFunctionCall","src":"21510:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21502:4:2"}]},{"nodeType":"YulVariableDeclaration","src":"21537:44:2","value":{"kind":"number","nodeType":"YulLiteral","src":"21547:34:2","type":"","value":"0xffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"21541:2:2","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21597:9:2"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21612:6:2"},{"name":"_1","nodeType":"YulIdentifier","src":"21620:2:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21608:3:2"},"nodeType":"YulFunctionCall","src":"21608:15:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21590:6:2"},"nodeType":"YulFunctionCall","src":"21590:34:2"},"nodeType":"YulExpressionStatement","src":"21590:34:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21644:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"21655:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21640:3:2"},"nodeType":"YulFunctionCall","src":"21640:18:2"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"21664:6:2"},{"name":"_1","nodeType":"YulIdentifier","src":"21672:2:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21660:3:2"},"nodeType":"YulFunctionCall","src":"21660:15:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21633:6:2"},"nodeType":"YulFunctionCall","src":"21633:43:2"},"nodeType":"YulExpressionStatement","src":"21633:43:2"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21696:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"21707:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21692:3:2"},"nodeType":"YulFunctionCall","src":"21692:18:2"},{"name":"value2","nodeType":"YulIdentifier","src":"21712:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21685:6:2"},"nodeType":"YulFunctionCall","src":"21685:34:2"},"nodeType":"YulExpressionStatement","src":"21685:34:2"}]},"name":"abi_encode_tuple_t_uint128_t_uint128_t_uint256__to_t_uint128_t_uint128_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21445:9:2","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21456:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21464:6:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21472:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21483:4:2","type":""}],"src":"21335:390:2"},{"body":{"nodeType":"YulBlock","src":"21831:76:2","statements":[{"nodeType":"YulAssignment","src":"21841:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21853:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"21864:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21849:3:2"},"nodeType":"YulFunctionCall","src":"21849:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21841:4:2"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21883:9:2"},{"name":"value0","nodeType":"YulIdentifier","src":"21894:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21876:6:2"},"nodeType":"YulFunctionCall","src":"21876:25:2"},"nodeType":"YulExpressionStatement","src":"21876:25:2"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21800:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21811:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21822:4:2","type":""}],"src":"21730:177:2"},{"body":{"nodeType":"YulBlock","src":"22055:146:2","statements":[{"nodeType":"YulAssignment","src":"22065:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22077:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"22088:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22073:3:2"},"nodeType":"YulFunctionCall","src":"22073:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22065:4:2"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22107:9:2"},{"name":"value0","nodeType":"YulIdentifier","src":"22118:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22100:6:2"},"nodeType":"YulFunctionCall","src":"22100:25:2"},"nodeType":"YulExpressionStatement","src":"22100:25:2"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22168:6:2"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22180:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"22191:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22176:3:2"},"nodeType":"YulFunctionCall","src":"22176:18:2"}],"functionName":{"name":"abi_encode_t_enum$_DelegationType","nodeType":"YulIdentifier","src":"22134:33:2"},"nodeType":"YulFunctionCall","src":"22134:61:2"},"nodeType":"YulExpressionStatement","src":"22134:61:2"}]},"name":"abi_encode_tuple_t_uint256_t_enum$_DelegationType_$5__to_t_uint256_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22016:9:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22027:6:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22035:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22046:4:2","type":""}],"src":"21912:289:2"},{"body":{"nodeType":"YulBlock","src":"22303:87:2","statements":[{"nodeType":"YulAssignment","src":"22313:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22325:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"22336:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22321:3:2"},"nodeType":"YulFunctionCall","src":"22321:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22313:4:2"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22355:9:2"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22370:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"22378:4:2","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22366:3:2"},"nodeType":"YulFunctionCall","src":"22366:17:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22348:6:2"},"nodeType":"YulFunctionCall","src":"22348:36:2"},"nodeType":"YulExpressionStatement","src":"22348:36:2"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22272:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22283:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22294:4:2","type":""}],"src":"22206:184:2"},{"body":{"nodeType":"YulBlock","src":"22448:205:2","statements":[{"nodeType":"YulVariableDeclaration","src":"22458:10:2","value":{"kind":"number","nodeType":"YulLiteral","src":"22467:1:2","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"22462:1:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"22527:63:2","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"22552:3:2"},{"name":"i","nodeType":"YulIdentifier","src":"22557:1:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22548:3:2"},"nodeType":"YulFunctionCall","src":"22548:11:2"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"22571:3:2"},{"name":"i","nodeType":"YulIdentifier","src":"22576:1:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22567:3:2"},"nodeType":"YulFunctionCall","src":"22567:11:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22561:5:2"},"nodeType":"YulFunctionCall","src":"22561:18:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22541:6:2"},"nodeType":"YulFunctionCall","src":"22541:39:2"},"nodeType":"YulExpressionStatement","src":"22541:39:2"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"22488:1:2"},{"name":"length","nodeType":"YulIdentifier","src":"22491:6:2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22485:2:2"},"nodeType":"YulFunctionCall","src":"22485:13:2"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"22499:19:2","statements":[{"nodeType":"YulAssignment","src":"22501:15:2","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"22510:1:2"},{"kind":"number","nodeType":"YulLiteral","src":"22513:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22506:3:2"},"nodeType":"YulFunctionCall","src":"22506:10:2"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"22501:1:2"}]}]},"pre":{"nodeType":"YulBlock","src":"22481:3:2","statements":[]},"src":"22477:113:2"},{"body":{"nodeType":"YulBlock","src":"22616:31:2","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"22629:3:2"},{"name":"length","nodeType":"YulIdentifier","src":"22634:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22625:3:2"},"nodeType":"YulFunctionCall","src":"22625:16:2"},{"kind":"number","nodeType":"YulLiteral","src":"22643:1:2","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22618:6:2"},"nodeType":"YulFunctionCall","src":"22618:27:2"},"nodeType":"YulExpressionStatement","src":"22618:27:2"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"22605:1:2"},{"name":"length","nodeType":"YulIdentifier","src":"22608:6:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22602:2:2"},"nodeType":"YulFunctionCall","src":"22602:13:2"},"nodeType":"YulIf","src":"22599:2:2"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"22426:3:2","type":""},{"name":"dst","nodeType":"YulTypedName","src":"22431:3:2","type":""},{"name":"length","nodeType":"YulTypedName","src":"22436:6:2","type":""}],"src":"22395:258:2"}]},"contents":"{\n    { }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_t_enum$_DelegationType(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(lt(value, 2)) { revert(0, 0) }\n    }\n    function abi_decode_t_uint8(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(value4, value4) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := abi_decode_t_uint8(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n        value6 := calldataload(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_addresst_enum$_DelegationType_$5(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_enum$_DelegationType(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_enum$_DelegationType_$5t_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(value4, value4) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_enum$_DelegationType(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := abi_decode_t_uint8(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n        value6 := calldataload(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_uint256t_enum$_DelegationType_$5(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := abi_decode_t_enum$_DelegationType(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(value4, value4) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := abi_decode_t_uint8(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n    }\n    function abi_decode_tuple_t_array$_t_struct$_AssetConfigInput_$975_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value0, value0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value0, value0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(value0, value0) }\n        if gt(add(add(_2, mul(length, 0x60)), 32), dataEnd) { revert(value0, value0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint128(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffff))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_addresst_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value2, value2) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := abi_decode_t_address(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_t_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_t_enum$_DelegationType(value, pos)\n    {\n        if iszero(lt(value, 2)) { invalid() }\n        mstore(pos, value)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, 0x1901000000000000000000000000000000000000000000000000000000000000)\n        mstore(add(pos, 2), value0)\n        mstore(add(pos, 34), value1)\n        end := add(pos, 66)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_t_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$176__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_ITransferHook_$968__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_enum$_DelegationType_$5__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        abi_encode_t_enum$_DelegationType(value0, headStart)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_t_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"SafeMath: addition overflow\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_33d2eb294587ef7b32eb48e48695ebfec45a9c8922ec7d1c444cfad1fb208e8d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"INVALID_ZERO_AMOUNT\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"SafeERC20: low-level call failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_5e2e9eaa2d734966dea0900deacd15b20129fbce05255d633a3ce5ebca181b88__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"INVALID_SIGNATURE\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_66cceaab4b8a6f427cff5482a526862a61c3ef92948b70aceb4a8f720a8f0ead__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"INSUFFICIENT_COOLDOWN\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"SafeMath: multiplication overflo\")\n        mstore(add(headStart, 96), \"w\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9fbba6c4dcac9134893b633b9564f36435b3f927c1d5fa152c5c14b20cecb1a4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Contract instance has already be\")\n        mstore(add(headStart, 96), \"en initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9fe3e5cf49f72bf8a6a8455c3e990f8479f5dfa09ac808886f330a39b0029c2d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"INVALID_EXPIRATION\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a19e25beaf00f467d35fbe7e167b5794fca796dbfd417dd2accc8f5303300b99__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"INVALID_NONCE\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a28d34ff463a8cc689c6ec4b8c995983f85d0a40987242bc4cc3cec37303c18e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"ONLY_EMISSION_MANAGER\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a30e2b4f22d955e30086ae3aef0adfd87eec9d0d3f055d6aa9af61f522dda886__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"INVALID_OWNER\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC20: burn from the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c6959acf2335419e4a75195e2fb1c276a96baa5b7fab6be19b14b9420a4bd962__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"UNSTAKE_WINDOW_FINISHED\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_dd61c748dcfe71393203093270c457f6ceb8834cce0160376620e7b2f811559c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"INVALID_BLOCK_NUMBER\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e5f9ee9777b2bbd505a43328a4cc6b61e9df46610a556d5402b9bc072df973d7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"INVALID_BALANCE_ON_COOLDOWN\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f448a4555410856eaebeffbdb1aef2dfca19f9de0904eb1029e0bbcd0330450f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"INVALID_DELEGATEE\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f6ce7bfd656f35145dec774d6f7e67f4cba158373d2dd7a0f8273e232f86148d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"SafeERC20: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint128__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_uint128_t_uint128__to_t_uint128_t_uint128__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_uint128_t_uint128_t_uint256__to_t_uint128_t_uint128_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_enum$_DelegationType_$5__to_t_uint256_t_uint8__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        abi_encode_t_enum$_DelegationType(value1, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n}","id":2,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1195":[{"length":32,"start":3909},{"length":32,"start":13617},{"length":32,"start":13686},{"length":32,"start":13731}],"1197":[{"length":32,"start":5185},{"length":32,"start":6350}],"2435":[{"length":32,"start":2316},{"length":32,"start":2663},{"length":32,"start":5028}],"2437":[{"length":32,"start":4118},{"length":32,"start":4322}],"2439":[{"length":32,"start":1971},{"length":32,"start":2105},{"length":32,"start":3114},{"length":32,"start":7165}],"2442":[{"length":32,"start":2065},{"length":32,"start":2769},{"length":32,"start":7128}],"2445":[{"length":32,"start":3945},{"length":32,"start":4377}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106103365760003560e01c8063919cd40f116101b2578063b2f4201d116100f9578063d505accf116100a2578063dde43cba1161007c578063dde43cba14610623578063f11b81881461062b578063f1cc432a1461064d578063f713d8a81461066057610336565b8063d505accf146105ea578063dc937e1c146105fd578063dd62ed3e1461061057610336565b8063c3863ada116100d3578063c3863ada146105c7578063c3cda520146105cf578063cbcbb507146105e257610336565b8063b2f4201d1461058e578063b9844d8d146105a1578063c2ffbb91146105b457610336565b8063a457c2d71161015b578063aaf5eb6811610135578063aaf5eb6814610560578063adc9772e14610568578063b2a5dbfa1461057b57610336565b8063a457c2d714610532578063a9059cbb14610545578063aa9fbe021461055857610336565b8063981b24d01161018c578063981b24d01461050457806399248ea7146105175780639a99b4f01461051f57610336565b8063919cd40f146104ec578063946776cd146104f457806395d89b41146104fc57610336565b8063395093511161028157806372b49d631161022a5780637bb73c97116102045780637bb73c97146104ab5780637e90d7ef146104be5780638129fc1c146104d15780638dbefee2146104d957610336565b806372b49d6314610493578063781603761461049b578063787a08a6146104a357610336565b80635c19a95c1161025b5780635c19a95c1461045a5780636f50458d1461046d57806370a082311461048057610336565b8063395093511461041e57806341cbf54a146104315780635b3cc0cf1461043957610336565b806330adf81f116102e35780633373ee4c116102bd5780633373ee4c146103fb578063359c4a961461040e5780633644e5151461041657610336565b806330adf81f146103c9578063312f6b83146103d1578063313ce567146103e657610336565b806318160ddd1161031457806318160ddd146103995780631e9a6950146103a157806323b872dd146103b657610336565b806306fdde031461033b578063091030c314610359578063095ea7b314610379575b600080fd5b610343610673565b6040516103509190613e44565b60405180910390f35b61036c6103673660046138f3565b610727565b6040516103509190613d39565b61038c610387366004613a3d565b610739565b6040516103509190613d2e565b61036c610757565b6103b46103af366004613a3d565b61075d565b005b61038c6103c436600461393f565b61099f565b61036c610a41565b6103d9610a65565b6040516103509190613cb6565b6103ee610a89565b6040516103509190614505565b61036c61040936600461390d565b610a92565b61036c610acf565b61036c610af3565b61038c61042c366004613a3d565b610af9565b61036c610b54565b61044c610447366004613a3d565b610b78565b6040516103509291906144a1565b6103b46104683660046138f3565b610bbf565b6103d961047b3660046139e3565b610bda565b61036c61048e3660046138f3565b610bfc565b61036c610c28565b610343610c4c565b6103b4610c85565b61036c6104b93660046138f3565b610cfe565b61036c6104cc3660046138f3565b610d10565b6103b4610d22565b61036c6104e73660046138f3565b610e7a565b61036c610f43565b6103d9610f67565b610343610f8b565b61036c610512366004613bb8565b61100a565b6103d9611014565b6103b461052d366004613a3d565b611038565b61038c610540366004613a3d565b6111aa565b61038c610553366004613a3d565b61121f565b61036c611233565b6103ee611257565b6103b4610576366004613a3d565b61125c565b6103b4610589366004613af8565b611429565b61036c61059c3660046139e3565b61164b565b61036c6105af3660046138f3565b611673565b61036c6105c2366004613a66565b611685565b6103d96116ae565b6103b46105dd366004613aa1565b6116ca565b6103d96118cc565b6103b46105f836600461397a565b6118f0565b6103b461060b3660046139e3565b611b0c565b61036c61061e36600461390d565b611b1b565b61036c611b53565b61063e6106393660046138f3565b611b58565b604051610350939291906144c4565b61036c61065b366004613bd0565b611b9c565b6103b461066e366004613a0c565b611c9e565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561071d5780601f106106f25761010080835404028352916020019161071d565b820191906000526020600020905b81548152906001019060200180831161070057829003601f168201915b5050505050905090565b603e6020526000908152604090205481565b600061074d610746611f14565b8484611f18565b5060015b92915050565b60025490565b8061079d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490613f56565b60405180910390fd5b336000908152603e60205260409020546107d7817f0000000000000000000000000000000000000000000000000000000000000000611ea1565b421161080f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490613ff9565b7f000000000000000000000000000000000000000000000000000000000000000061086461085d837f0000000000000000000000000000000000000000000000000000000000000000611ea1565b4290612027565b111561089c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614280565b60006108a733610bfc565b905060008184116108b857836108ba565b815b90506108c833836001612069565b506108d33382612127565b6108dd8282612027565b6108f257336000908152603e60205260408120555b61093373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168683612257565b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd12200efa34901b99367694174c3b0d32c99585fdf37c7c26892136ddd0836d9836040516109909190613d39565b60405180910390a35050505050565b60006109ac8484846122f8565b610a36846109b8611f14565b610a31856040518060600160405280602881526020016145886028913973ffffffffffffffffffffffffffffffffffffffff8a16600090815260016020526040812090610a03611f14565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604001600020549190612405565b611f18565b5060015b9392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b7f000000000000000000000000000000000000000000000000000000000000000081565b60055460ff1690565b73ffffffffffffffffffffffffffffffffffffffff8082166000908152603c60209081526040808320938616835260029093019052205492915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60435481565b600061074d610b06611f14565b84610a318560016000610b17611f14565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918c168152925290205490611ea1565b7f9a9a49b990ba9bb39f8048c490a40ab25c18f55d208d5fbcf958261a9b48716d81565b60066020908152600092835260408084209091529082529020546fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041682565b610bcb3382600061244b565b610bd73382600161244b565b50565b600080610be68361258e565b92505050610bf484826125c8565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081905260409020545b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b610c8e33610bfc565b610cc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906143a8565b336000818152603e6020526040808220429055517ff52f50426b32362d3e6bb8cb36b7074756b224622def6352a59eac7f66ebe6e89190a2565b60076020526000908152604090205481565b603d6020526000908152604090205481565b6000610d2c612600565b90506009548111610d69576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107949061408d565b6009819055467f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f610d98610673565b8051602091820120604080518082018252600181527f31000000000000000000000000000000000000000000000000000000000000009084015251610e0493927fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6918691309101613ded565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529181528151602092830120604355306000908152603c909252902080546fffffffffffffffffffffffffffffffff167360985020000000000000000000000000000000001790555050565b60408051600180825281830190925260009160609190816020015b610e9d613861565b815260200190600190039081610e9557905050905060405180606001604052803073ffffffffffffffffffffffffffffffffffffffff168152602001610ee285610bfc565b8152602001610eef610757565b81525081600081518110610eff57fe5b6020026020010181905250610a3a610f178483612605565b73ffffffffffffffffffffffffffffffffffffffff85166000908152603d602052604090205490611ea1565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561071d5780601f106106f25761010080835404028352916020019161071d565b6000610751610757565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061104e3361104733610bfc565b6000612069565b905060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831461107f5782611081565b815b90506110cd816040518060400160405280600e81526020017f494e56414c49445f414d4f554e54000000000000000000000000000000000000815250846124059092919063ffffffff16565b336000908152603d602052604090205561113f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000008684612733565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9310ccfcb8de723f578a9e4282ea9f521f05ae40dc08f3068dfad528a65ee3c78360405161119c9190613d39565b60405180910390a350505050565b600061074d6111b7611f14565b84610a31856040518060600160405280602581526020016145b060259139600160006111e1611f14565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918d16815292529020549190612405565b600061074d61122c611f14565b84846122f8565b7f10d8d059343739efce7dad10d09f0806da52b252b3e6a7951920d2d6ec4102e581565b601281565b80611293576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490613f56565b600061129e83610bfc565b905060006112b58430846112b0610757565b612754565b9050801561134d577f2468f9268c60ad90e2d49edb0032c8a001e733ae888b3ab8e982edf535be1a7684826040516112ee929190613d08565b60405180910390a173ffffffffffffffffffffffffffffffffffffffff84166000908152603d60205260409020546113269082611ea1565b73ffffffffffffffffffffffffffffffffffffffff85166000908152603d60205260409020555b61135a6000848685611b9c565b73ffffffffffffffffffffffffffffffffffffffff85166000908152603e602052604090205561138a848461282d565b6113cc73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016333086612733565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5dac0c1b1112564a045ba943c9d50270893e8e826c49be8e7073adc713ab7bd78560405161119c9190613d39565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614611498576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614158565b60005b81811015611646576000603c60008585858181106114b557fe5b90506060020160400160208101906114cd91906138f3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061154c84848481811061151857fe5b905060600201604001602081019061153091906138f3565b8286868681811061153d57fe5b90506060020160200135612922565b5083838381811061155957fe5b61156f9260206060909202019081019150613b88565b81547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff919091161781558383838181106115b757fe5b90506060020160400160208101906115cf91906138f3565b73ffffffffffffffffffffffffffffffffffffffff167f87fa03892a0556cb6b8f97e6d533a150d4d55fcbf275fff5fa003fa636bcc7fa85858581811061161257fe5b6116289260206060909202019081019150613b88565b6040516116359190614484565b60405180910390a25060010161149b565b505050565b60008060006116598461258e565b509150915061166a82828743612a21565b95945050505050565b60446020526000908152604090205481565b60008060006116938461258e565b50915091506116a482828888612a21565b9695505050505050565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b60007f9a9a49b990ba9bb39f8048c490a40ab25c18f55d208d5fbcf958261a9b48716d8787876040516020016117039493929190613d83565b604051602081830303815290604052805190602001209050600060435482604051602001611732929190613c80565b60405160208183030381529060405280519060200120905060006001828787876040516000815260200160405260405161176f9493929190613e26565b6020604051602081039080840390855afa158015611791573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116611809576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490613fc2565b73ffffffffffffffffffffffffffffffffffffffff81166000908152604460205260409020805460018101909155881461186f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614121565b864211156118a9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906140ea565b6118b5818a600061244b565b6118c1818a600161244b565b505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff871661193d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107949061418f565b83421115611977576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906140ea565b73ffffffffffffffffffffffffffffffffffffffff871660009081526044602090815260408083205460435491519093926119de917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918d918d918d9189918e9101613d42565b60405160208183030381529060405280519060200120604051602001611a05929190613c80565b60405160208183030381529060405280519060200120905060018186868660405160008152602001604052604051611a409493929190613e26565b6020604051602081039080840390855afa158015611a62573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614611ad0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490613fc2565b611adb826001611ea1565b73ffffffffffffffffffffffffffffffffffffffff8a166000908152604460205260409020556118c1898989611f18565b611b1733838361244b565b5050565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b600381565b603c60205260009081526040902080546001909101546fffffffffffffffffffffffffffffffff808316927001000000000000000000000000000000009004169083565b73ffffffffffffffffffffffffffffffffffffffff82166000908152603e602052604081205480611bd1576000915050610bf4565b6000611c277f0000000000000000000000000000000000000000000000000000000000000000611c21427f0000000000000000000000000000000000000000000000000000000000000000612027565b90612027565b905081811115611c3a5760009150611c94565b6000878211611c495787611c4b565b425b905082811015611c6057829350505050610bf4565b611c90611c6d8887611ea1565b611c8a611c7a8887612d39565b611c848b86612d39565b90611ea1565b90612d8d565b9250505b5095945050505050565b60007f10d8d059343739efce7dad10d09f0806da52b252b3e6a7951920d2d6ec4102e588886001811115611cce57fe5b8888604051602001611ce4959493929190613db4565b604051602081830303815290604052805190602001209050600060435482604051602001611d13929190613c80565b604051602081830303815290604052805190602001209050600060018287878760405160008152602001604052604051611d509493929190613e26565b6020604051602081039080840390855afa158015611d72573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116611dea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490613fc2565b73ffffffffffffffffffffffffffffffffffffffff811660009081526044602052604090208054600181019091558814611e50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614121565b86421115611e8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906140ea565b611e95818b8b61244b565b50505050505050505050565b600082820183811015610a3a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490613f1f565b600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b3390565b73ffffffffffffffffffffffffffffffffffffffff8316611f65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906142b7565b73ffffffffffffffffffffffffffffffffffffffff8216611fb2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490613ec2565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061201a908590613d39565b60405180910390a3505050565b6000610a3a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612405565b60008061207a8530866112b0610757565b73ffffffffffffffffffffffffffffffffffffffff86166000908152603d6020526040812054919250906120ae9083611ea1565b9050811561166a5783156120e55773ffffffffffffffffffffffffffffffffffffffff86166000908152603d602052604090208190555b7f2468f9268c60ad90e2d49edb0032c8a001e733ae888b3ab8e982edf535be1a768683604051612116929190613d08565b60405180910390a195945050505050565b73ffffffffffffffffffffffffffffffffffffffff8216612174576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906141c6565b61218082600083612dcf565b6121ca816040518060600160405280602281526020016145406022913973ffffffffffffffffffffffffffffffffffffffff85166000908152602081905260409020549190612405565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020556002546121fd9082612027565b60025560405160009073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061224b908590613d39565b60405180910390a35050565b6116468363a9059cbb60e01b8484604051602401612276929190613d08565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612f53565b600061230384610bfc565b905061231184826001612069565b508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146123f457600061235084610bfc565b905061235e84826001612069565b5073ffffffffffffffffffffffffffffffffffffffff85166000908152603e602052604090205461239181858785611b9c565b73ffffffffffffffffffffffffffffffffffffffff86166000908152603e602052604090205582841480156123c557508015155b156123f15773ffffffffffffffffffffffffffffffffffffffff86166000908152603e60205260408120555b50505b6123ff8484846130a0565b50505050565b60008184841115612443576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107949190613e44565b505050900390565b73ffffffffffffffffffffffffffffffffffffffff8216612498576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906143df565b60006124a38261258e565b9250505060006124b285610bfc565b905060006124c086846125c8565b73ffffffffffffffffffffffffffffffffffffffff878116600090815260208690526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001691881691909117905590506125218186848761322a565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fe8d51c8e11bd570db1734c8ec775785330e77007feed45c43b608ef33ff914bd8660405161257e9190613e57565b60405180910390a3505050505050565b600080808084600181111561259f57fe5b14156125b557506006915060079050603f6125c1565b50604091506041905060425b9193909250565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526020839052604081205490911680610a3a5783915050610751565b600390565b600080805b835181101561272b576000603c600086848151811061262557fe5b6020908102919091018101515173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160009081206001810154815488519294506126b0926fffffffffffffffffffffffffffffffff80831692700100000000000000000000000000000000900416908a908890811061269f57fe5b602002602001015160400151613500565b905061271f6127188785815181106126c457fe5b602002602001015160200151838560020160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613614565b8590611ea1565b9350505060010161260a565b509392505050565b6123ff846323b872dd60e01b85858560405160240161227693929190613cd7565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152603c60209081526040808320938816835260028401909152812054909190828061279c888588612922565b90508083146128215786156127b9576127b6878285613614565b91505b73ffffffffffffffffffffffffffffffffffffffff808a1660008181526002870160205260409081902084905551918a16917fbb123b5c06d5408bbea3c4fef481578175cfb432e3b482c6186f02ed9086585b90612818908590613d39565b60405180910390a35b50979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff821661287a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107949061444d565b61288660008383612dcf565b6002546128939082611ea1565b60025573ffffffffffffffffffffffffffffffffffffffff82166000908152602081905260409020546128c69082611ea1565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081905260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061224b908590613d39565b600182015482546000919070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff164281141561296357509050610a3a565b84546000906129879084906fffffffffffffffffffffffffffffffff168488613500565b90508281146129e8578086600101819055508673ffffffffffffffffffffffffffffffffffffffff167f5777ca300dfe5bead41006fbce4389794dbc0ed8d6cccebfaf94630aa04184bc826040516129df9190613d39565b60405180910390a25b85546fffffffffffffffffffffffffffffffff428116700100000000000000000000000000000000029116178655925050509392505050565b600043821115612a5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614314565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020859052604090205480612a9957612a9184610bfc565b915050610bf4565b73ffffffffffffffffffffffffffffffffffffffff84166000908152602087815260408083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff850184529091529020546fffffffffffffffffffffffffffffffff168310612b815773ffffffffffffffffffffffffffffffffffffffff84166000908152602087815260408083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909401835292905220546fffffffffffffffffffffffffffffffff700100000000000000000000000000000000909104169050610bf4565b73ffffffffffffffffffffffffffffffffffffffff84166000908152602087815260408083208380529091529020546fffffffffffffffffffffffffffffffff16831015612bd3576000915050610bf4565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82015b81811115612cd8576002828203048103612c11613898565b5073ffffffffffffffffffffffffffffffffffffffff8716600090815260208a815260408083208484528252918290208251808401909352546fffffffffffffffffffffffffffffffff8082168085527001000000000000000000000000000000009092041691830191909152871415612ca757602001516fffffffffffffffffffffffffffffffff169450610bf49350505050565b80516fffffffffffffffffffffffffffffffff16871115612cca57819350612cd1565b6001820392505b5050612bf9565b5073ffffffffffffffffffffffffffffffffffffffff851660009081526020888152604080832093835292905220546fffffffffffffffffffffffffffffffff70010000000000000000000000000000000090910416915050949350505050565b600082612d4857506000610751565b82820282848281612d5557fe5b0414610a3a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614030565b6000610a3a83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613636565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152603f6020526040808220548584168352912054908216911681612e0d578491505b73ffffffffffffffffffffffffffffffffffffffff8116612e2b5750825b612e38828285600061322a565b73ffffffffffffffffffffffffffffffffffffffff808616600090815260426020526040808220548784168352912054908216911681612e76578691505b73ffffffffffffffffffffffffffffffffffffffff8116612e945750845b612ea1828287600161322a565b60085473ffffffffffffffffffffffffffffffffffffffff168015612f49576040517f4a39314900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690634a39314990612f16908b908b908b90600401613cd7565b600060405180830381600087803b158015612f3057600080fd5b505af1158015612f44573d6000803e3d6000fd5b505050505b5050505050505050565b612f728273ffffffffffffffffffffffffffffffffffffffff16613687565b612fa8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614416565b600060608373ffffffffffffffffffffffffffffffffffffffff1683604051612fd19190613c64565b6000604051808303816000865af19150503d806000811461300e576040519150601f19603f3d011682016040523d82523d6000602084013e613013565b606091505b50915091508161304f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490613f8d565b8051156123ff578080602001905181019061306a9190613b68565b6123ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107949061434b565b73ffffffffffffffffffffffffffffffffffffffff83166130ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614223565b73ffffffffffffffffffffffffffffffffffffffff821661313a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490613e65565b613145838383612dcf565b61318f816040518060600160405280602681526020016145626026913973ffffffffffffffffffffffffffffffffffffffff86166000908152602081905260409020549190612405565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526020819052604080822093909355908416815220546131cb9082611ea1565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526020819052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061201a908590613d39565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415613263576123ff565b60008061326f8361258e565b50909250905073ffffffffffffffffffffffffffffffffffffffff8616156133b95773ffffffffffffffffffffffffffffffffffffffff8616600090815260208290526040812054801561333b5773ffffffffffffffffffffffffffffffffffffffff88166000908152602085815260408083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8501845290915290205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff169150613347565b61334488610bfc565b91505b61335d84848a85613358818c612027565b6136c0565b73ffffffffffffffffffffffffffffffffffffffff88167fa0a19463ee116110c9b282012d9b65cc5522dc38a9520340cbaf3142e550127f61339f8489612027565b876040516133ae9291906144f1565b60405180910390a250505b73ffffffffffffffffffffffffffffffffffffffff8516156134f85773ffffffffffffffffffffffffffffffffffffffff8516600090815260208290526040812054801561347f5773ffffffffffffffffffffffffffffffffffffffff87166000908152602085815260408083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8501845290915290205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16915061348b565b61348887610bfc565b91505b61349c84848985613358818c611ea1565b73ffffffffffffffffffffffffffffffffffffffff87167fa0a19463ee116110c9b282012d9b65cc5522dc38a9520340cbaf3142e550127f6134de8489611ea1565b876040516134ed9291906144f1565b60405180910390a250505b505050505050565b600083158061350d575081155b80613529575042836fffffffffffffffffffffffffffffffff16145b8061356657507f0000000000000000000000000000000000000000000000000000000000000000836fffffffffffffffffffffffffffffffff1610155b15613572575083610bf4565b60007f000000000000000000000000000000000000000000000000000000000000000042116135a157426135c3565b7f00000000000000000000000000000000000000000000000000000000000000005b905060006135e3826fffffffffffffffffffffffffffffffff8716612027565b905061360987611c8486611c8a670de0b6b3a76400006136038c88612d39565b90612d39565b979650505050505050565b6000610bf4670de0b6b3a7640000611c8a61362f8686612027565b8790612d39565b60008183613671576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107949190613e44565b50600083858161367d57fe5b0495945050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610bf4575050151592915050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602085815260408083205491889052909120439190811580159061374557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82016000908152602082905260409020546fffffffffffffffffffffffffffffffff8481169116145b156137ae577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8201600090815260208290526040902080546fffffffffffffffffffffffffffffffff808716700100000000000000000000000000000000029116179055612f49565b6040805180820182526fffffffffffffffffffffffffffffffff8086168252868116602080840191825260008781528682528581209451855493518516700100000000000000000000000000000000029085167fffffffffffffffffffffffffffffffff00000000000000000000000000000000909416939093179093169190911790925573ffffffffffffffffffffffffffffffffffffffff8916815290899052206001830190555050505050505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b604080518082019091526000808252602082015290565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c2357600080fd5b803560028110610c2357600080fd5b803560ff81168114610c2357600080fd5b600060208284031215613904578081fd5b610a3a826138af565b6000806040838503121561391f578081fd5b613928836138af565b9150613936602084016138af565b90509250929050565b600080600060608486031215613953578081fd5b61395c846138af565b925061396a602085016138af565b9150604084013590509250925092565b600080600080600080600060e0888a031215613994578283fd5b61399d886138af565b96506139ab602089016138af565b955060408801359450606088013593506139c7608089016138e2565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156139f5578182fd5b6139fe836138af565b9150613936602084016138d3565b600080600080600080600060e0888a031215613a26578283fd5b613a2f886138af565b96506139ab602089016138d3565b60008060408385031215613a4f578182fd5b613a58836138af565b946020939093013593505050565b600080600060608486031215613a7a578283fd5b613a83846138af565b925060208401359150613a98604085016138d3565b90509250925092565b60008060008060008060c08789031215613ab9578182fd5b613ac2876138af565b95506020870135945060408701359350613ade606088016138e2565b92506080870135915060a087013590509295509295509295565b60008060208385031215613b0a578182fd5b823567ffffffffffffffff80821115613b21578384fd5b818501915085601f830112613b34578384fd5b813581811115613b42578485fd5b866020606083028501011115613b56578485fd5b60209290920196919550909350505050565b600060208284031215613b79578081fd5b81518015158114610a3a578182fd5b600060208284031215613b99578081fd5b81356fffffffffffffffffffffffffffffffff81168114610a3a578182fd5b600060208284031215613bc9578081fd5b5035919050565b60008060008060808587031215613be5578182fd5b8435935060208501359250613bfc604086016138af565b9396929550929360600135925050565b60008151808452613c24816020860160208601614513565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60028110613c6057fe5b9052565b60008251613c76818460208701614513565b9190910192915050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b90815260200190565b95865273ffffffffffffffffffffffffffffffffffffffff94851660208701529290931660408501526060840152608083019190915260a082015260c00190565b93845273ffffffffffffffffffffffffffffffffffffffff9290921660208401526040830152606082015260800190565b94855273ffffffffffffffffffffffffffffffffffffffff93909316602085015260408401919091526060830152608082015260a00190565b94855260208501939093526040840191909152606083015273ffffffffffffffffffffffffffffffffffffffff16608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610a3a6020830184613c0c565b602081016107518284613c56565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201527f6573730000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526013908201527f494e56414c49445f5a45524f5f414d4f554e5400000000000000000000000000604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b60208082526011908201527f494e56414c49445f5349474e4154555245000000000000000000000000000000604082015260600190565b60208082526015908201527f494e53554646494349454e545f434f4f4c444f574e0000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201527f656e20696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b60208082526012908201527f494e56414c49445f45585049524154494f4e0000000000000000000000000000604082015260600190565b6020808252600d908201527f494e56414c49445f4e4f4e434500000000000000000000000000000000000000604082015260600190565b60208082526015908201527f4f4e4c595f454d495353494f4e5f4d414e414745520000000000000000000000604082015260600190565b6020808252600d908201527f494e56414c49445f4f574e455200000000000000000000000000000000000000604082015260600190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526017908201527f554e5354414b455f57494e444f575f46494e4953484544000000000000000000604082015260600190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460408201527f7265737300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f494e56414c49445f424c4f434b5f4e554d424552000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f494e56414c49445f42414c414e43455f4f4e5f434f4f4c444f574e0000000000604082015260600190565b60208082526011908201527f494e56414c49445f44454c454741544545000000000000000000000000000000604082015260600190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b6fffffffffffffffffffffffffffffffff91909116815260200190565b6fffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6fffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b82815260408101610a3a6020830184613c56565b60ff91909116815260200190565b60005b8381101561452e578181015183820152602001614516565b838111156123ff575050600091015256fe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220d9afcb6de361626b27fc92962c175da28aa67a46f2ee48ab626d5a4a8f4d156664736f6c63430007050033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x336 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x919CD40F GT PUSH2 0x1B2 JUMPI DUP1 PUSH4 0xB2F4201D GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xD505ACCF GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xDDE43CBA GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xDDE43CBA EQ PUSH2 0x623 JUMPI DUP1 PUSH4 0xF11B8188 EQ PUSH2 0x62B JUMPI DUP1 PUSH4 0xF1CC432A EQ PUSH2 0x64D JUMPI DUP1 PUSH4 0xF713D8A8 EQ PUSH2 0x660 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x5EA JUMPI DUP1 PUSH4 0xDC937E1C EQ PUSH2 0x5FD JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x610 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0xC3863ADA GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0xC3863ADA EQ PUSH2 0x5C7 JUMPI DUP1 PUSH4 0xC3CDA520 EQ PUSH2 0x5CF JUMPI DUP1 PUSH4 0xCBCBB507 EQ PUSH2 0x5E2 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0xB2F4201D EQ PUSH2 0x58E JUMPI DUP1 PUSH4 0xB9844D8D EQ PUSH2 0x5A1 JUMPI DUP1 PUSH4 0xC2FFBB91 EQ PUSH2 0x5B4 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x15B JUMPI DUP1 PUSH4 0xAAF5EB68 GT PUSH2 0x135 JUMPI DUP1 PUSH4 0xAAF5EB68 EQ PUSH2 0x560 JUMPI DUP1 PUSH4 0xADC9772E EQ PUSH2 0x568 JUMPI DUP1 PUSH4 0xB2A5DBFA EQ PUSH2 0x57B JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x532 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x545 JUMPI DUP1 PUSH4 0xAA9FBE02 EQ PUSH2 0x558 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0x981B24D0 GT PUSH2 0x18C JUMPI DUP1 PUSH4 0x981B24D0 EQ PUSH2 0x504 JUMPI DUP1 PUSH4 0x99248EA7 EQ PUSH2 0x517 JUMPI DUP1 PUSH4 0x9A99B4F0 EQ PUSH2 0x51F JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0x919CD40F EQ PUSH2 0x4EC JUMPI DUP1 PUSH4 0x946776CD EQ PUSH2 0x4F4 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x4FC JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0x39509351 GT PUSH2 0x281 JUMPI DUP1 PUSH4 0x72B49D63 GT PUSH2 0x22A JUMPI DUP1 PUSH4 0x7BB73C97 GT PUSH2 0x204 JUMPI DUP1 PUSH4 0x7BB73C97 EQ PUSH2 0x4AB JUMPI DUP1 PUSH4 0x7E90D7EF EQ PUSH2 0x4BE JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x4D1 JUMPI DUP1 PUSH4 0x8DBEFEE2 EQ PUSH2 0x4D9 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0x72B49D63 EQ PUSH2 0x493 JUMPI DUP1 PUSH4 0x78160376 EQ PUSH2 0x49B JUMPI DUP1 PUSH4 0x787A08A6 EQ PUSH2 0x4A3 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0x5C19A95C GT PUSH2 0x25B JUMPI DUP1 PUSH4 0x5C19A95C EQ PUSH2 0x45A JUMPI DUP1 PUSH4 0x6F50458D EQ PUSH2 0x46D JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x480 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x41E JUMPI DUP1 PUSH4 0x41CBF54A EQ PUSH2 0x431 JUMPI DUP1 PUSH4 0x5B3CC0CF EQ PUSH2 0x439 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0x30ADF81F GT PUSH2 0x2E3 JUMPI DUP1 PUSH4 0x3373EE4C GT PUSH2 0x2BD JUMPI DUP1 PUSH4 0x3373EE4C EQ PUSH2 0x3FB JUMPI DUP1 PUSH4 0x359C4A96 EQ PUSH2 0x40E JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x416 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0x30ADF81F EQ PUSH2 0x3C9 JUMPI DUP1 PUSH4 0x312F6B83 EQ PUSH2 0x3D1 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x3E6 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x314 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x399 JUMPI DUP1 PUSH4 0x1E9A6950 EQ PUSH2 0x3A1 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x3B6 JUMPI PUSH2 0x336 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x33B JUMPI DUP1 PUSH4 0x91030C3 EQ PUSH2 0x359 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x379 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x343 PUSH2 0x673 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x350 SWAP2 SWAP1 PUSH2 0x3E44 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x36C PUSH2 0x367 CALLDATASIZE PUSH1 0x4 PUSH2 0x38F3 JUMP JUMPDEST PUSH2 0x727 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x350 SWAP2 SWAP1 PUSH2 0x3D39 JUMP JUMPDEST PUSH2 0x38C PUSH2 0x387 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A3D JUMP JUMPDEST PUSH2 0x739 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x350 SWAP2 SWAP1 PUSH2 0x3D2E JUMP JUMPDEST PUSH2 0x36C PUSH2 0x757 JUMP JUMPDEST PUSH2 0x3B4 PUSH2 0x3AF CALLDATASIZE PUSH1 0x4 PUSH2 0x3A3D JUMP JUMPDEST PUSH2 0x75D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x38C PUSH2 0x3C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x393F JUMP JUMPDEST PUSH2 0x99F JUMP JUMPDEST PUSH2 0x36C PUSH2 0xA41 JUMP JUMPDEST PUSH2 0x3D9 PUSH2 0xA65 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x350 SWAP2 SWAP1 PUSH2 0x3CB6 JUMP JUMPDEST PUSH2 0x3EE PUSH2 0xA89 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x350 SWAP2 SWAP1 PUSH2 0x4505 JUMP JUMPDEST PUSH2 0x36C PUSH2 0x409 CALLDATASIZE PUSH1 0x4 PUSH2 0x390D JUMP JUMPDEST PUSH2 0xA92 JUMP JUMPDEST PUSH2 0x36C PUSH2 0xACF JUMP JUMPDEST PUSH2 0x36C PUSH2 0xAF3 JUMP JUMPDEST PUSH2 0x38C PUSH2 0x42C CALLDATASIZE PUSH1 0x4 PUSH2 0x3A3D JUMP JUMPDEST PUSH2 0xAF9 JUMP JUMPDEST PUSH2 0x36C PUSH2 0xB54 JUMP JUMPDEST PUSH2 0x44C PUSH2 0x447 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A3D JUMP JUMPDEST PUSH2 0xB78 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x350 SWAP3 SWAP2 SWAP1 PUSH2 0x44A1 JUMP JUMPDEST PUSH2 0x3B4 PUSH2 0x468 CALLDATASIZE PUSH1 0x4 PUSH2 0x38F3 JUMP JUMPDEST PUSH2 0xBBF JUMP JUMPDEST PUSH2 0x3D9 PUSH2 0x47B CALLDATASIZE PUSH1 0x4 PUSH2 0x39E3 JUMP JUMPDEST PUSH2 0xBDA JUMP JUMPDEST PUSH2 0x36C PUSH2 0x48E CALLDATASIZE PUSH1 0x4 PUSH2 0x38F3 JUMP JUMPDEST PUSH2 0xBFC JUMP JUMPDEST PUSH2 0x36C PUSH2 0xC28 JUMP JUMPDEST PUSH2 0x343 PUSH2 0xC4C JUMP JUMPDEST PUSH2 0x3B4 PUSH2 0xC85 JUMP JUMPDEST PUSH2 0x36C PUSH2 0x4B9 CALLDATASIZE PUSH1 0x4 PUSH2 0x38F3 JUMP JUMPDEST PUSH2 0xCFE JUMP JUMPDEST PUSH2 0x36C PUSH2 0x4CC CALLDATASIZE PUSH1 0x4 PUSH2 0x38F3 JUMP JUMPDEST PUSH2 0xD10 JUMP JUMPDEST PUSH2 0x3B4 PUSH2 0xD22 JUMP JUMPDEST PUSH2 0x36C PUSH2 0x4E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x38F3 JUMP JUMPDEST PUSH2 0xE7A JUMP JUMPDEST PUSH2 0x36C PUSH2 0xF43 JUMP JUMPDEST PUSH2 0x3D9 PUSH2 0xF67 JUMP JUMPDEST PUSH2 0x343 PUSH2 0xF8B JUMP JUMPDEST PUSH2 0x36C PUSH2 0x512 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BB8 JUMP JUMPDEST PUSH2 0x100A JUMP JUMPDEST PUSH2 0x3D9 PUSH2 0x1014 JUMP JUMPDEST PUSH2 0x3B4 PUSH2 0x52D CALLDATASIZE PUSH1 0x4 PUSH2 0x3A3D JUMP JUMPDEST PUSH2 0x1038 JUMP JUMPDEST PUSH2 0x38C PUSH2 0x540 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A3D JUMP JUMPDEST PUSH2 0x11AA JUMP JUMPDEST PUSH2 0x38C PUSH2 0x553 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A3D JUMP JUMPDEST PUSH2 0x121F JUMP JUMPDEST PUSH2 0x36C PUSH2 0x1233 JUMP JUMPDEST PUSH2 0x3EE PUSH2 0x1257 JUMP JUMPDEST PUSH2 0x3B4 PUSH2 0x576 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A3D JUMP JUMPDEST PUSH2 0x125C JUMP JUMPDEST PUSH2 0x3B4 PUSH2 0x589 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AF8 JUMP JUMPDEST PUSH2 0x1429 JUMP JUMPDEST PUSH2 0x36C PUSH2 0x59C CALLDATASIZE PUSH1 0x4 PUSH2 0x39E3 JUMP JUMPDEST PUSH2 0x164B JUMP JUMPDEST PUSH2 0x36C PUSH2 0x5AF CALLDATASIZE PUSH1 0x4 PUSH2 0x38F3 JUMP JUMPDEST PUSH2 0x1673 JUMP JUMPDEST PUSH2 0x36C PUSH2 0x5C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A66 JUMP JUMPDEST PUSH2 0x1685 JUMP JUMPDEST PUSH2 0x3D9 PUSH2 0x16AE JUMP JUMPDEST PUSH2 0x3B4 PUSH2 0x5DD CALLDATASIZE PUSH1 0x4 PUSH2 0x3AA1 JUMP JUMPDEST PUSH2 0x16CA JUMP JUMPDEST PUSH2 0x3D9 PUSH2 0x18CC JUMP JUMPDEST PUSH2 0x3B4 PUSH2 0x5F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x397A JUMP JUMPDEST PUSH2 0x18F0 JUMP JUMPDEST PUSH2 0x3B4 PUSH2 0x60B CALLDATASIZE PUSH1 0x4 PUSH2 0x39E3 JUMP JUMPDEST PUSH2 0x1B0C JUMP JUMPDEST PUSH2 0x36C PUSH2 0x61E CALLDATASIZE PUSH1 0x4 PUSH2 0x390D JUMP JUMPDEST PUSH2 0x1B1B JUMP JUMPDEST PUSH2 0x36C PUSH2 0x1B53 JUMP JUMPDEST PUSH2 0x63E PUSH2 0x639 CALLDATASIZE PUSH1 0x4 PUSH2 0x38F3 JUMP JUMPDEST PUSH2 0x1B58 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x350 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x44C4 JUMP JUMPDEST PUSH2 0x36C PUSH2 0x65B CALLDATASIZE PUSH1 0x4 PUSH2 0x3BD0 JUMP JUMPDEST PUSH2 0x1B9C JUMP JUMPDEST PUSH2 0x3B4 PUSH2 0x66E CALLDATASIZE PUSH1 0x4 PUSH2 0x3A0C JUMP JUMPDEST PUSH2 0x1C9E JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x71D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6F2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x71D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x700 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x3E PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74D PUSH2 0x746 PUSH2 0x1F14 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x1F18 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST DUP1 PUSH2 0x79D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x3F56 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x7D7 DUP2 PUSH32 0x0 PUSH2 0x1EA1 JUMP JUMPDEST TIMESTAMP GT PUSH2 0x80F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x3FF9 JUMP JUMPDEST PUSH32 0x0 PUSH2 0x864 PUSH2 0x85D DUP4 PUSH32 0x0 PUSH2 0x1EA1 JUMP JUMPDEST TIMESTAMP SWAP1 PUSH2 0x2027 JUMP JUMPDEST GT ISZERO PUSH2 0x89C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x4280 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8A7 CALLER PUSH2 0xBFC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 DUP5 GT PUSH2 0x8B8 JUMPI DUP4 PUSH2 0x8BA JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP PUSH2 0x8C8 CALLER DUP4 PUSH1 0x1 PUSH2 0x2069 JUMP JUMPDEST POP PUSH2 0x8D3 CALLER DUP3 PUSH2 0x2127 JUMP JUMPDEST PUSH2 0x8DD DUP3 DUP3 PUSH2 0x2027 JUMP JUMPDEST PUSH2 0x8F2 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3E PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE JUMPDEST PUSH2 0x933 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP7 DUP4 PUSH2 0x2257 JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xD12200EFA34901B99367694174C3B0D32C99585FDF37C7C26892136DDD0836D9 DUP4 PUSH1 0x40 MLOAD PUSH2 0x990 SWAP2 SWAP1 PUSH2 0x3D39 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9AC DUP5 DUP5 DUP5 PUSH2 0x22F8 JUMP JUMPDEST PUSH2 0xA36 DUP5 PUSH2 0x9B8 PUSH2 0x1F14 JUMP JUMPDEST PUSH2 0xA31 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x4588 PUSH1 0x28 SWAP2 CODECOPY PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0xA03 PUSH2 0x1F14 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x2405 JUMP JUMPDEST PUSH2 0x1F18 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP4 ADD SWAP1 MSTORE KECCAK256 SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x43 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74D PUSH2 0xB06 PUSH2 0x1F14 JUMP JUMPDEST DUP5 PUSH2 0xA31 DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0xB17 PUSH2 0x1F14 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP13 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 PUSH2 0x1EA1 JUMP JUMPDEST PUSH32 0x9A9A49B990BA9BB39F8048C490A40AB25C18F55D208D5FBCF958261A9B48716D DUP2 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND SWAP2 PUSH17 0x100000000000000000000000000000000 SWAP1 DIV AND DUP3 JUMP JUMPDEST PUSH2 0xBCB CALLER DUP3 PUSH1 0x0 PUSH2 0x244B JUMP JUMPDEST PUSH2 0xBD7 CALLER DUP3 PUSH1 0x1 PUSH2 0x244B JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xBE6 DUP4 PUSH2 0x258E JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0xBF4 DUP5 DUP3 PUSH2 0x25C8 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH2 0xC8E CALLER PUSH2 0xBFC JUMP JUMPDEST PUSH2 0xCC4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x43A8 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3E PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 TIMESTAMP SWAP1 SSTORE MLOAD PUSH32 0xF52F50426B32362D3E6BB8CB36B7074756B224622DEF6352A59EAC7F66EBE6E8 SWAP2 SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3D PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD2C PUSH2 0x2600 JUMP JUMPDEST SWAP1 POP PUSH1 0x9 SLOAD DUP2 GT PUSH2 0xD69 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x408D JUMP JUMPDEST PUSH1 0x9 DUP2 SWAP1 SSTORE CHAINID PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0xD98 PUSH2 0x673 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP5 ADD MSTORE MLOAD PUSH2 0xE04 SWAP4 SWAP3 PUSH32 0xC89EFDAA54C0F20C7ADF612882DF0950F5A951637E0307CDCB4C672F298B8BC6 SWAP2 DUP7 SWAP2 ADDRESS SWAP2 ADD PUSH2 0x3DED JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x43 SSTORE ADDRESS PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3C SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0x6098502000000000000000000000000000000000 OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x60 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xE9D PUSH2 0x3861 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xE95 JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEE2 DUP6 PUSH2 0xBFC JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEEF PUSH2 0x757 JUMP JUMPDEST DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xEFF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0xA3A PUSH2 0xF17 DUP5 DUP4 PUSH2 0x2605 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 PUSH2 0x1EA1 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x71D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6F2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x71D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x751 PUSH2 0x757 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104E CALLER PUSH2 0x1047 CALLER PUSH2 0xBFC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2069 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 EQ PUSH2 0x107F JUMPI DUP3 PUSH2 0x1081 JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP PUSH2 0x10CD DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x494E56414C49445F414D4F554E54000000000000000000000000000000000000 DUP2 MSTORE POP DUP5 PUSH2 0x2405 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x113F PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x0 DUP7 DUP5 PUSH2 0x2733 JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x9310CCFCB8DE723F578A9E4282EA9F521F05AE40DC08F3068DFAD528A65EE3C7 DUP4 PUSH1 0x40 MLOAD PUSH2 0x119C SWAP2 SWAP1 PUSH2 0x3D39 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74D PUSH2 0x11B7 PUSH2 0x1F14 JUMP JUMPDEST DUP5 PUSH2 0xA31 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x45B0 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x11E1 PUSH2 0x1F14 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP14 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x2405 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74D PUSH2 0x122C PUSH2 0x1F14 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x22F8 JUMP JUMPDEST PUSH32 0x10D8D059343739EFCE7DAD10D09F0806DA52B252B3E6A7951920D2D6EC4102E5 DUP2 JUMP JUMPDEST PUSH1 0x12 DUP2 JUMP JUMPDEST DUP1 PUSH2 0x1293 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x3F56 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x129E DUP4 PUSH2 0xBFC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x12B5 DUP5 ADDRESS DUP5 PUSH2 0x12B0 PUSH2 0x757 JUMP JUMPDEST PUSH2 0x2754 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x134D JUMPI PUSH32 0x2468F9268C60AD90E2D49EDB0032C8A001E733AE888B3AB8E982EDF535BE1A76 DUP5 DUP3 PUSH1 0x40 MLOAD PUSH2 0x12EE SWAP3 SWAP2 SWAP1 PUSH2 0x3D08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1326 SWAP1 DUP3 PUSH2 0x1EA1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH2 0x135A PUSH1 0x0 DUP5 DUP7 DUP6 PUSH2 0x1B9C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x138A DUP5 DUP5 PUSH2 0x282D JUMP JUMPDEST PUSH2 0x13CC PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND CALLER ADDRESS DUP7 PUSH2 0x2733 JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x5DAC0C1B1112564A045BA943C9D50270893E8E826C49BE8E7073ADC713AB7BD7 DUP6 PUSH1 0x40 MLOAD PUSH2 0x119C SWAP2 SWAP1 PUSH2 0x3D39 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x1498 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x4158 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1646 JUMPI PUSH1 0x0 PUSH1 0x3C PUSH1 0x0 DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0x14B5 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x60 MUL ADD PUSH1 0x40 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x14CD SWAP2 SWAP1 PUSH2 0x38F3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x154C DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0x1518 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x60 MUL ADD PUSH1 0x40 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1530 SWAP2 SWAP1 PUSH2 0x38F3 JUMP JUMPDEST DUP3 DUP7 DUP7 DUP7 DUP2 DUP2 LT PUSH2 0x153D JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x60 MUL ADD PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x2922 JUMP JUMPDEST POP DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0x1559 JUMPI INVALID JUMPDEST PUSH2 0x156F SWAP3 PUSH1 0x20 PUSH1 0x60 SWAP1 SWAP3 MUL ADD SWAP1 DUP2 ADD SWAP2 POP PUSH2 0x3B88 JUMP JUMPDEST DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND OR DUP2 SSTORE DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0x15B7 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x60 MUL ADD PUSH1 0x40 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x15CF SWAP2 SWAP1 PUSH2 0x38F3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x87FA03892A0556CB6B8F97E6D533A150D4D55FCBF275FFF5FA003FA636BCC7FA DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0x1612 JUMPI INVALID JUMPDEST PUSH2 0x1628 SWAP3 PUSH1 0x20 PUSH1 0x60 SWAP1 SWAP3 MUL ADD SWAP1 DUP2 ADD SWAP2 POP PUSH2 0x3B88 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1635 SWAP2 SWAP1 PUSH2 0x4484 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 0x1 ADD PUSH2 0x149B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1659 DUP5 PUSH2 0x258E JUMP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x166A DUP3 DUP3 DUP8 NUMBER PUSH2 0x2A21 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x44 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1693 DUP5 PUSH2 0x258E JUMP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x16A4 DUP3 DUP3 DUP9 DUP9 PUSH2 0x2A21 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x9A9A49B990BA9BB39F8048C490A40AB25C18F55D208D5FBCF958261A9B48716D DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1703 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3D83 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH1 0x43 SLOAD DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1732 SWAP3 SWAP2 SWAP1 PUSH2 0x3C80 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP3 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x176F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3E26 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1791 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x1809 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x3FC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x44 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE DUP9 EQ PUSH2 0x186F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x4121 JUMP JUMPDEST DUP7 TIMESTAMP GT ISZERO PUSH2 0x18A9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x40EA JUMP JUMPDEST PUSH2 0x18B5 DUP2 DUP11 PUSH1 0x0 PUSH2 0x244B JUMP JUMPDEST PUSH2 0x18C1 DUP2 DUP11 PUSH1 0x1 PUSH2 0x244B JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH2 0x193D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x418F JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x1977 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x40EA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x44 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x43 SLOAD SWAP2 MLOAD SWAP1 SWAP4 SWAP3 PUSH2 0x19DE SWAP2 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 SWAP2 DUP14 SWAP2 DUP14 SWAP2 DUP14 SWAP2 DUP10 SWAP2 DUP15 SWAP2 ADD PUSH2 0x3D42 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1A05 SWAP3 SWAP2 SWAP1 PUSH2 0x3C80 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x1 DUP2 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1A40 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3E26 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A62 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1AD0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x3FC2 JUMP JUMPDEST PUSH2 0x1ADB DUP3 PUSH1 0x1 PUSH2 0x1EA1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x44 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x18C1 DUP10 DUP10 DUP10 PUSH2 0x1F18 JUMP JUMPDEST PUSH2 0x1B17 CALLER DUP4 DUP4 PUSH2 0x244B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH1 0x3C PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND SWAP3 PUSH17 0x100000000000000000000000000000000 SWAP1 DIV AND SWAP1 DUP4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3E PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 PUSH2 0x1BD1 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0xBF4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C27 PUSH32 0x0 PUSH2 0x1C21 TIMESTAMP PUSH32 0x0 PUSH2 0x2027 JUMP JUMPDEST SWAP1 PUSH2 0x2027 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x1C3A JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x1C94 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP3 GT PUSH2 0x1C49 JUMPI DUP8 PUSH2 0x1C4B JUMP JUMPDEST TIMESTAMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x1C60 JUMPI DUP3 SWAP4 POP POP POP POP PUSH2 0xBF4 JUMP JUMPDEST PUSH2 0x1C90 PUSH2 0x1C6D DUP9 DUP8 PUSH2 0x1EA1 JUMP JUMPDEST PUSH2 0x1C8A PUSH2 0x1C7A DUP9 DUP8 PUSH2 0x2D39 JUMP JUMPDEST PUSH2 0x1C84 DUP12 DUP7 PUSH2 0x2D39 JUMP JUMPDEST SWAP1 PUSH2 0x1EA1 JUMP JUMPDEST SWAP1 PUSH2 0x2D8D JUMP JUMPDEST SWAP3 POP POP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x10D8D059343739EFCE7DAD10D09F0806DA52B252B3E6A7951920D2D6EC4102E5 DUP9 DUP9 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1CCE JUMPI INVALID JUMPDEST DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1CE4 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3DB4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH1 0x43 SLOAD DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D13 SWAP3 SWAP2 SWAP1 PUSH2 0x3C80 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP3 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1D50 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3E26 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1D72 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x1DEA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x3FC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x44 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE DUP9 EQ PUSH2 0x1E50 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x4121 JUMP JUMPDEST DUP7 TIMESTAMP GT ISZERO PUSH2 0x1E8A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x40EA JUMP JUMPDEST PUSH2 0x1E95 DUP2 DUP12 DUP12 PUSH2 0x244B JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xA3A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x3F1F JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x1F65 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x42B7 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x1FB2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x3EC2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x201A SWAP1 DUP6 SWAP1 PUSH2 0x3D39 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA3A DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH2 0x2405 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x207A DUP6 ADDRESS DUP7 PUSH2 0x12B0 PUSH2 0x757 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3D PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x20AE SWAP1 DUP4 PUSH2 0x1EA1 JUMP JUMPDEST SWAP1 POP DUP2 ISZERO PUSH2 0x166A JUMPI DUP4 ISZERO PUSH2 0x20E5 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE JUMPDEST PUSH32 0x2468F9268C60AD90E2D49EDB0032C8A001E733AE888B3AB8E982EDF535BE1A76 DUP7 DUP4 PUSH1 0x40 MLOAD PUSH2 0x2116 SWAP3 SWAP2 SWAP1 PUSH2 0x3D08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x2174 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x41C6 JUMP JUMPDEST PUSH2 0x2180 DUP3 PUSH1 0x0 DUP4 PUSH2 0x2DCF JUMP JUMPDEST PUSH2 0x21CA DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x4540 PUSH1 0x22 SWAP2 CODECOPY PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x2405 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x2 SLOAD PUSH2 0x21FD SWAP1 DUP3 PUSH2 0x2027 JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x224B SWAP1 DUP6 SWAP1 PUSH2 0x3D39 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x1646 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2276 SWAP3 SWAP2 SWAP1 PUSH2 0x3D08 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x2F53 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2303 DUP5 PUSH2 0xBFC JUMP JUMPDEST SWAP1 POP PUSH2 0x2311 DUP5 DUP3 PUSH1 0x1 PUSH2 0x2069 JUMP JUMPDEST POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x23F4 JUMPI PUSH1 0x0 PUSH2 0x2350 DUP5 PUSH2 0xBFC JUMP JUMPDEST SWAP1 POP PUSH2 0x235E DUP5 DUP3 PUSH1 0x1 PUSH2 0x2069 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2391 DUP2 DUP6 DUP8 DUP6 PUSH2 0x1B9C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE DUP3 DUP5 EQ DUP1 ISZERO PUSH2 0x23C5 JUMPI POP DUP1 ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x23F1 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3E PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE JUMPDEST POP POP JUMPDEST PUSH2 0x23FF DUP5 DUP5 DUP5 PUSH2 0x30A0 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x2443 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP2 SWAP1 PUSH2 0x3E44 JUMP JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x2498 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x43DF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24A3 DUP3 PUSH2 0x258E JUMP JUMPDEST SWAP3 POP POP POP PUSH1 0x0 PUSH2 0x24B2 DUP6 PUSH2 0xBFC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x24C0 DUP7 DUP5 PUSH2 0x25C8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP7 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP9 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP1 POP PUSH2 0x2521 DUP2 DUP7 DUP5 DUP8 PUSH2 0x322A JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xE8D51C8E11BD570DB1734C8EC775785330E77007FEED45C43B608EF33FF914BD DUP7 PUSH1 0x40 MLOAD PUSH2 0x257E SWAP2 SWAP1 PUSH2 0x3E57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x259F JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x25B5 JUMPI POP PUSH1 0x6 SWAP2 POP PUSH1 0x7 SWAP1 POP PUSH1 0x3F PUSH2 0x25C1 JUMP JUMPDEST POP PUSH1 0x40 SWAP2 POP PUSH1 0x41 SWAP1 POP PUSH1 0x42 JUMPDEST SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 AND DUP1 PUSH2 0xA3A JUMPI DUP4 SWAP2 POP POP PUSH2 0x751 JUMP JUMPDEST PUSH1 0x3 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x272B JUMPI PUSH1 0x0 PUSH1 0x3C PUSH1 0x0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2625 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD DUP2 SLOAD DUP9 MLOAD SWAP3 SWAP5 POP PUSH2 0x26B0 SWAP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND SWAP3 PUSH17 0x100000000000000000000000000000000 SWAP1 DIV AND SWAP1 DUP11 SWAP1 DUP9 SWAP1 DUP2 LT PUSH2 0x269F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x3500 JUMP JUMPDEST SWAP1 POP PUSH2 0x271F PUSH2 0x2718 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x26C4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP4 DUP6 PUSH1 0x2 ADD PUSH1 0x0 DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x3614 JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x1EA1 JUMP JUMPDEST SWAP4 POP POP POP PUSH1 0x1 ADD PUSH2 0x260A JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x23FF DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2276 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3CD7 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE PUSH1 0x2 DUP5 ADD SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP3 DUP1 PUSH2 0x279C DUP9 DUP6 DUP9 PUSH2 0x2922 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 EQ PUSH2 0x2821 JUMPI DUP7 ISZERO PUSH2 0x27B9 JUMPI PUSH2 0x27B6 DUP8 DUP3 DUP6 PUSH2 0x3614 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP11 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP8 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD SWAP2 DUP11 AND SWAP2 PUSH32 0xBB123B5C06D5408BBEA3C4FEF481578175CFB432E3B482C6186F02ED9086585B SWAP1 PUSH2 0x2818 SWAP1 DUP6 SWAP1 PUSH2 0x3D39 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x287A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x444D JUMP JUMPDEST PUSH2 0x2886 PUSH1 0x0 DUP4 DUP4 PUSH2 0x2DCF JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x2893 SWAP1 DUP3 PUSH2 0x1EA1 JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x28C6 SWAP1 DUP3 PUSH2 0x1EA1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x224B SWAP1 DUP6 SWAP1 PUSH2 0x3D39 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD DUP3 SLOAD PUSH1 0x0 SWAP2 SWAP1 PUSH17 0x100000000000000000000000000000000 SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND TIMESTAMP DUP2 EQ ISZERO PUSH2 0x2963 JUMPI POP SWAP1 POP PUSH2 0xA3A JUMP JUMPDEST DUP5 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x2987 SWAP1 DUP5 SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP9 PUSH2 0x3500 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 EQ PUSH2 0x29E8 JUMPI DUP1 DUP7 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x5777CA300DFE5BEAD41006FBCE4389794DBC0ED8D6CCCEBFAF94630AA04184BC DUP3 PUSH1 0x40 MLOAD PUSH2 0x29DF SWAP2 SWAP1 PUSH2 0x3D39 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST DUP6 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF TIMESTAMP DUP2 AND PUSH17 0x100000000000000000000000000000000 MUL SWAP2 AND OR DUP7 SSTORE SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 NUMBER DUP3 GT ISZERO PUSH2 0x2A5D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x4314 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x2A99 JUMPI PUSH2 0x2A91 DUP5 PUSH2 0xBFC JUMP JUMPDEST SWAP2 POP POP PUSH2 0xBF4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP8 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 ADD DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 LT PUSH2 0x2B81 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP8 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP5 ADD DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH17 0x100000000000000000000000000000000 SWAP1 SWAP2 DIV AND SWAP1 POP PUSH2 0xBF4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP8 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 DUP1 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 LT ISZERO PUSH2 0x2BD3 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0xBF4 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 ADD JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x2CD8 JUMPI PUSH1 0x2 DUP3 DUP3 SUB DIV DUP2 SUB PUSH2 0x2C11 PUSH2 0x3898 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP11 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND DUP1 DUP6 MSTORE PUSH17 0x100000000000000000000000000000000 SWAP1 SWAP3 DIV AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP8 EQ ISZERO PUSH2 0x2CA7 JUMPI PUSH1 0x20 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP5 POP PUSH2 0xBF4 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 GT ISZERO PUSH2 0x2CCA JUMPI DUP2 SWAP4 POP PUSH2 0x2CD1 JUMP JUMPDEST PUSH1 0x1 DUP3 SUB SWAP3 POP JUMPDEST POP POP PUSH2 0x2BF9 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP9 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH17 0x100000000000000000000000000000000 SWAP1 SWAP2 DIV AND SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2D48 JUMPI POP PUSH1 0x0 PUSH2 0x751 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x2D55 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0xA3A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x4030 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA3A DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH2 0x3636 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3F PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD DUP6 DUP5 AND DUP4 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 DUP3 AND SWAP2 AND DUP2 PUSH2 0x2E0D JUMPI DUP5 SWAP2 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x2E2B JUMPI POP DUP3 JUMPDEST PUSH2 0x2E38 DUP3 DUP3 DUP6 PUSH1 0x0 PUSH2 0x322A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x42 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD DUP8 DUP5 AND DUP4 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 DUP3 AND SWAP2 AND DUP2 PUSH2 0x2E76 JUMPI DUP7 SWAP2 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x2E94 JUMPI POP DUP5 JUMPDEST PUSH2 0x2EA1 DUP3 DUP3 DUP8 PUSH1 0x1 PUSH2 0x322A JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 ISZERO PUSH2 0x2F49 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4A39314900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH4 0x4A393149 SWAP1 PUSH2 0x2F16 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x3CD7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2F44 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2F72 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3687 JUMP JUMPDEST PUSH2 0x2FA8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x4416 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x2FD1 SWAP2 SWAP1 PUSH2 0x3C64 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x300E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3013 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x304F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x3F8D JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x23FF JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x306A SWAP2 SWAP1 PUSH2 0x3B68 JUMP JUMPDEST PUSH2 0x23FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x434B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x30ED JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x4223 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x313A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP1 PUSH2 0x3E65 JUMP JUMPDEST PUSH2 0x3145 DUP4 DUP4 DUP4 PUSH2 0x2DCF JUMP JUMPDEST PUSH2 0x318F DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x4562 PUSH1 0x26 SWAP2 CODECOPY PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x2405 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x31CB SWAP1 DUP3 PUSH2 0x1EA1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x201A SWAP1 DUP6 SWAP1 PUSH2 0x3D39 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x3263 JUMPI PUSH2 0x23FF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x326F DUP4 PUSH2 0x258E JUMP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND ISZERO PUSH2 0x33B9 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x333B JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 ADD DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH17 0x100000000000000000000000000000000 SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH2 0x3347 JUMP JUMPDEST PUSH2 0x3344 DUP9 PUSH2 0xBFC JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x335D DUP5 DUP5 DUP11 DUP6 PUSH2 0x3358 DUP2 DUP13 PUSH2 0x2027 JUMP JUMPDEST PUSH2 0x36C0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND PUSH32 0xA0A19463EE116110C9B282012D9B65CC5522DC38A9520340CBAF3142E550127F PUSH2 0x339F DUP5 DUP10 PUSH2 0x2027 JUMP JUMPDEST DUP8 PUSH1 0x40 MLOAD PUSH2 0x33AE SWAP3 SWAP2 SWAP1 PUSH2 0x44F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND ISZERO PUSH2 0x34F8 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x347F JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 ADD DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH17 0x100000000000000000000000000000000 SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH2 0x348B JUMP JUMPDEST PUSH2 0x3488 DUP8 PUSH2 0xBFC JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x349C DUP5 DUP5 DUP10 DUP6 PUSH2 0x3358 DUP2 DUP13 PUSH2 0x1EA1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH32 0xA0A19463EE116110C9B282012D9B65CC5522DC38A9520340CBAF3142E550127F PUSH2 0x34DE DUP5 DUP10 PUSH2 0x1EA1 JUMP JUMPDEST DUP8 PUSH1 0x40 MLOAD PUSH2 0x34ED SWAP3 SWAP2 SWAP1 PUSH2 0x44F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x350D JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x3529 JUMPI POP TIMESTAMP DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x3566 JUMPI POP PUSH32 0x0 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO JUMPDEST ISZERO PUSH2 0x3572 JUMPI POP DUP4 PUSH2 0xBF4 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 TIMESTAMP GT PUSH2 0x35A1 JUMPI TIMESTAMP PUSH2 0x35C3 JUMP JUMPDEST PUSH32 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x35E3 DUP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH2 0x2027 JUMP JUMPDEST SWAP1 POP PUSH2 0x3609 DUP8 PUSH2 0x1C84 DUP7 PUSH2 0x1C8A PUSH8 0xDE0B6B3A7640000 PUSH2 0x3603 DUP13 DUP9 PUSH2 0x2D39 JUMP JUMPDEST SWAP1 PUSH2 0x2D39 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBF4 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1C8A PUSH2 0x362F DUP7 DUP7 PUSH2 0x2027 JUMP JUMPDEST DUP8 SWAP1 PUSH2 0x2D39 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x3671 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x794 SWAP2 SWAP1 PUSH2 0x3E44 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP6 DUP2 PUSH2 0x367D JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EXTCODEHASH PUSH32 0xC5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470 DUP2 DUP2 EQ DUP1 ISZERO SWAP1 PUSH2 0xBF4 JUMPI POP POP ISZERO ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD SWAP2 DUP9 SWAP1 MSTORE SWAP1 SWAP2 KECCAK256 NUMBER SWAP2 SWAP1 DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x3745 JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 ADD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x37AE JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 ADD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH17 0x100000000000000000000000000000000 MUL SWAP2 AND OR SWAP1 SSTORE PUSH2 0x2F49 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND DUP3 MSTORE DUP7 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 DUP3 MSTORE PUSH1 0x0 DUP8 DUP2 MSTORE DUP7 DUP3 MSTORE DUP6 DUP2 KECCAK256 SWAP5 MLOAD DUP6 SLOAD SWAP4 MLOAD DUP6 AND PUSH17 0x100000000000000000000000000000000 MUL SWAP1 DUP6 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP3 SSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND DUP2 MSTORE SWAP1 DUP10 SWAP1 MSTORE KECCAK256 PUSH1 0x1 DUP4 ADD SWAP1 SSTORE POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xC23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x2 DUP2 LT PUSH2 0xC23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xC23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3904 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xA3A DUP3 PUSH2 0x38AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x391F JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x3928 DUP4 PUSH2 0x38AF JUMP JUMPDEST SWAP2 POP PUSH2 0x3936 PUSH1 0x20 DUP5 ADD PUSH2 0x38AF JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3953 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x395C DUP5 PUSH2 0x38AF JUMP JUMPDEST SWAP3 POP PUSH2 0x396A PUSH1 0x20 DUP6 ADD PUSH2 0x38AF JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x3994 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x399D DUP9 PUSH2 0x38AF JUMP JUMPDEST SWAP7 POP PUSH2 0x39AB PUSH1 0x20 DUP10 ADD PUSH2 0x38AF JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH2 0x39C7 PUSH1 0x80 DUP10 ADD PUSH2 0x38E2 JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x39F5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x39FE DUP4 PUSH2 0x38AF JUMP JUMPDEST SWAP2 POP PUSH2 0x3936 PUSH1 0x20 DUP5 ADD PUSH2 0x38D3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x3A26 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3A2F DUP9 PUSH2 0x38AF JUMP JUMPDEST SWAP7 POP PUSH2 0x39AB PUSH1 0x20 DUP10 ADD PUSH2 0x38D3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3A4F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3A58 DUP4 PUSH2 0x38AF JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3A7A JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3A83 DUP5 PUSH2 0x38AF JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH2 0x3A98 PUSH1 0x40 DUP6 ADD PUSH2 0x38D3 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3AB9 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3AC2 DUP8 PUSH2 0x38AF JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH2 0x3ADE PUSH1 0x60 DUP9 ADD PUSH2 0x38E2 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3B0A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3B21 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3B34 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x3B42 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 PUSH1 0x60 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x3B56 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3B79 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xA3A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3B99 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xA3A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3BC9 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3BE5 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH2 0x3BFC PUSH1 0x40 DUP7 ADD PUSH2 0x38AF JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x3C24 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x4513 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0x3C60 JUMPI INVALID JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x3C76 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x4513 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND PUSH1 0x20 DUP8 ADD MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0xA3A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3C0C JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x751 DUP3 DUP5 PUSH2 0x3C56 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F5A45524F5F414D4F554E5400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F5349474E4154555245000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E53554646494349454E545F434F4F4C444F574E0000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206D756C7469706C69636174696F6E206F766572666C6F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7700000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x436F6E747261637420696E7374616E63652068617320616C7265616479206265 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x656E20696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F45585049524154494F4E0000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F4E4F4E434500000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F4E4C595F454D495353494F4E5F4D414E414745520000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F4F574E455200000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x554E5354414B455F57494E444F575F46494E4953484544000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F424C4F434B5F4E554D424552000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F42414C414E43455F4F4E5F434F4F4C444F574E0000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F44454C454741544545000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A2063616C6C20746F206E6F6E2D636F6E747261637400 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 DUP2 ADD PUSH2 0xA3A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3C56 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x452E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x4516 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x23FF JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH3 0x75726E KECCAK256 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E636545524332 ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x2062616C616E636545524332303A207472616E73 PUSH7 0x657220616D6F75 PUSH15 0x74206578636565647320616C6C6F77 PUSH2 0x6E63 PUSH6 0x45524332303A KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x7358221220D9AF 0xCB PUSH14 0xE361626B27FC92962C175DA28AA6 PUSH27 0x46F2EE48AB626D5A4A8F4D156664736F6C63430007050033000000 ","sourceMap":"46839:16355:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15472:75;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;47566:51;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;17388:156::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;16451:92::-;;;:::i;51025:971::-;;;;;;:::i;:::-;;:::i;:::-;;17978:343;;;;;;:::i;:::-;;:::i;48274:141::-;;;:::i;47128:36::-;;;:::i;:::-;;;;;;;:::i;16324:75::-;;;:::i;:::-;;;;;;;:::i;35468:128::-;;;;;;:::i;:::-;;:::i;47335:39::-;;;:::i;48040:31::-;;;:::i;18690:205::-;;;;;;:::i;:::-;;:::i;36033:117::-;;;:::i;46082:72::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;36803:211::-;;;;;;:::i;:::-;;:::i;37125:291::-;;;;;;:::i;:::-;;:::i;16593:111::-;;;;;;:::i;:::-;;:::i;47208:41::-;;;:::i;48075:50::-;;;:::i;52117:230::-;;;:::i;46158:57::-;;;;;;:::i;:::-;;:::i;47507:55::-;;;;;;:::i;:::-;;:::i;49576:558::-;;;:::i;56859:468::-;;;;;;:::i;:::-;;:::i;28220:41::-;;;:::i;47464:38::-;;;:::i;15650:79::-;;;:::i;38917:122::-;;;;;;:::i;:::-;;:::i;47168:36::-;;;:::i;52502:490::-;;;;;;:::i;:::-;;:::i;19352:318::-;;;;;;:::i;:::-;;:::i;16889:162::-;;;;;;:::i;:::-;;:::i;35884:144::-;;;:::i;28312:36::-;;;:::i;50138:740::-;;;;;;:::i;:::-;;:::i;28960:709::-;;;;;;:::i;:::-;;:::i;37595:406::-;;;;;;:::i;:::-;;:::i;48481:42::-;;;;;;:::i;:::-;;:::i;38111:424::-;;;;;;:::i;:::-;;:::i;46501:36::-;;;:::i;62480:712::-;;;;;;:::i;:::-;;:::i;28266:41::-;;;:::i;57953:742::-;;;;;;:::i;:::-;;:::i;36507:157::-;;;;;;:::i;:::-;;:::i;17101:165::-;;;;;;:::i;:::-;;:::i;47087:36::-;;;:::i;28353:43::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;55690:1025::-;;;;;;:::i;:::-;;:::i;61362:718::-;;;;;;:::i;:::-;;:::i;15472:75::-;15537:5;15530:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15509:13;;15530:12;;15537:5;;15530:12;;15537:5;15530:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15472:75;:::o;47566:51::-;;;;;;;;;;;;;:::o;17388:156::-;17471:4;17483:39;17492:12;:10;:12::i;:::-;17506:7;17515:6;17483:8;:39::i;:::-;-1:-1:-1;17535:4:0;17388:156;;;;;:::o;16451:92::-;16526:12;;16451:92;:::o;51025:971::-;51101:11;51093:43;;;;;;;;;;;;:::i;:::-;;;;;;;;;51223:10;51173:30;51206:28;;;:16;:28;;;;;;51273:44;51206:28;51300:16;51273:26;:44::i;:::-;51255:15;:62;51240:114;;;;;;;;;;;;:::i;:::-;51444:14;51375:65;51395:44;:22;51422:16;51395:26;:44::i;:::-;51375:15;;:19;:65::i;:::-;:83;;51360:137;;;;;;;;;;;;:::i;:::-;51503:30;51536:21;51546:10;51536:9;:21::i;:::-;51503:54;;51564:22;51599;51590:6;:31;51589:67;;51650:6;51589:67;;;51625:22;51589:67;51564:92;;51663:72;51694:10;51706:22;51730:4;51663:30;:72::i;:::-;;51742:33;51748:10;51760:14;51742:5;:33::i;:::-;51786:42;:22;51813:14;51786:26;:42::i;:::-;51782:100;;51860:10;51874:1;51843:28;;;:16;:28;;;;;:32;51782:100;51888:53;:33;51895:12;51888:33;51922:2;51926:14;51888:33;:53::i;:::-;51972:2;51953:38;;51960:10;51953:38;;;51976:14;51953:38;;;;;;:::i;:::-;;;;;;;;51025:971;;;;;:::o;17978:343::-;18100:4;18112:36;18122:6;18130:9;18141:6;18112:9;:36::i;:::-;18154:145;18170:6;18184:12;:10;:12::i;:::-;18204:89;18242:6;18204:89;;;;;;;;;;;;;;;;;:19;;;;;;;:11;:19;;;;;;18224:12;:10;:12::i;:::-;18204:33;;;;;;;;;;;;;-1:-1:-1;18204:33:0;;;:89;:37;:89::i;:::-;18154:8;:145::i;:::-;-1:-1:-1;18312:4:0;17978:343;;;;;;:::o;48274:141::-;48320:95;48274:141;:::o;47128:36::-;;;:::o;16324:75::-;16385:9;;;;16324:75;:::o;35468:128::-;35566:13;;;;35544:7;35566:13;;;:6;:13;;;;;;;;:25;;;;;:19;;;;:25;;;;35468:128;;;;:::o;47335:39::-;;;:::o;48040:31::-;;;;:::o;18690:205::-;18778:4;18790:83;18799:12;:10;:12::i;:::-;18813:7;18822:50;18861:10;18822:11;:25;18834:12;:10;:12::i;:::-;18822:25;;;;;;;;;;;;;;;;;;-1:-1:-1;18822:25:0;;;:34;;;;;;;;;;;:38;:50::i;36033:117::-;36081:69;36033:117;:::o;46082:72::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;36803:211::-;36864:67;36880:10;36892:9;36903:27;36864:15;:67::i;:::-;36937:72;36953:10;36965:9;36976:32;36937:15;:72::i;:::-;36803:211;:::o;37125:291::-;37251:7;37273:45;37322:40;37347:14;37322:24;:40::i;:::-;37268:94;;;;37376:35;37390:9;37401;37376:13;:35::i;:::-;37369:42;37125:291;-1:-1:-1;;;;37125:291:0:o;16593:111::-;16681:18;;;16659:7;16681:18;;;;;;;;;;;16593:111;;;;:::o;47208:41::-;;;:::o;48075:50::-;48115:10;;;;;;;;;;;;;;;;;48075:50;:::o;52117:230::-;52169:21;52179:10;52169:9;:21::i;:::-;52161:66;;;;;;;;;;;;:::i;:::-;52281:10;52264:28;;;;:16;:28;;;;;;52295:15;52264:46;;52322:20;;;52264:28;52322:20;52117:230::o;46158:57::-;;;;;;;;;;;;;:::o;47507:55::-;;;;;;;;;;;;;:::o;49576:558::-;27218:16;27237:13;:11;:13::i;:::-;27218:32;;27275:23;;27264:8;:34;27256:93;;;;;;;;;;;;:::i;:::-;27356:23;:34;;;49706:9:::1;48175:95;49822:6;:4;:6::i;:::-;49806:24:::0;;::::1;::::0;;::::1;::::0;48115:10:::1;::::0;;;;::::1;::::0;;::::1;::::0;;::::1;::::0;;::::1;::::0;49763:151;::::1;::::0;;49840:26;;49876:7;;49901:4:::1;::::0;49763:151:::1;;:::i;:::-;;::::0;;;;::::1;::::0;;;;;;;49746:174;;49763:151:::1;49746:174:::0;;::::1;::::0;49727:16:::1;:193:::0;50075:4:::1;50030:27;50060:21:::0;;;:6:::1;:21:::0;;;;;50087:42;;::::1;;::::0;::::1;::::0;;-1:-1:-1;;49576:558:0:o;56859:468::-;57011:41;;;57050:1;57011:41;;;;;;;;;56930:7;;56945:57;;57011:41;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;56945:107;;57079:151;;;;;;;;57145:4;57079:151;;;;;;57172:17;57182:6;57172:9;:17::i;:::-;57079:151;;;;57210:13;:11;:13::i;:::-;57079:151;;;57058:15;57074:1;57058:18;;;;;;;;;;;;;:172;;;;57243:79;57276:45;57297:6;57305:15;57276:20;:45::i;:::-;57243:28;;;;;;;:20;:28;;;;;;;:32;:79::i;28220:41::-;;;:::o;47464:38::-;;;:::o;15650:79::-;15717:7;15710:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15689:13;;15710:14;;15717:7;;15710:14;;15717:7;15710:14;;;;;;;;;;;;;;;;;;;;;;;;38917:122;38993:7;39015:19;:17;:19::i;47168:36::-;;;:::o;52502:490::-;52576:23;52608:72;52639:10;52651:21;52661:10;52651:9;:21::i;:::-;52674:5;52608:30;:72::i;:::-;52576:104;;52686:21;52721:17;52711:6;:27;52710:56;;52760:6;52710:56;;;52742:15;52710:56;52686:80;;52808:52;52828:13;52808:52;;;;;;;;;;;;;;;;;:15;:19;;:52;;;;;:::i;:::-;52794:10;52773:32;;;;:20;:32;;;;;:87;52867:63;:12;52773:32;52867:29;52897:13;52912:2;52916:13;52867:29;:63::i;:::-;52969:2;52942:45;;52957:10;52942:45;;;52973:13;52942:45;;;;;;:::i;:::-;;;;;;;;52502:490;;;;:::o;19352:318::-;19457:4;19471:177;19487:12;:10;:12::i;:::-;19507:7;19522:120;19570:15;19522:120;;;;;;;;;;;;;;;;;:11;:25;19534:12;:10;:12::i;:::-;19522:25;;;;;;;;;;;;;;;;;;-1:-1:-1;19522:25:0;;;:34;;;;;;;;;;;:120;:38;:120::i;16889:162::-;16975:4;16987:42;16997:12;:10;:12::i;:::-;17011:9;17022:6;16987:9;:42::i;35884:144::-;35940:88;35884:144;:::o;28312:36::-;28346:2;28312:36;:::o;50138:740::-;50221:11;50213:43;;;;;;;;;;;;:::i;:::-;50262:21;50286;50296:10;50286:9;:21::i;:::-;50262:45;;50314:22;50345:81;50370:10;50390:4;50397:13;50412;:11;:13::i;:::-;50345:24;:81::i;:::-;50314:112;-1:-1:-1;50436:19:0;;50432:182;;50470:42;50485:10;50497:14;50470:42;;;;;;;:::i;:::-;;;;;;;;50555:32;;;;;;;:20;:32;;;;;;:52;;50592:14;50555:36;:52::i;:::-;50520:32;;;;;;;:20;:32;;;;;:87;50432:182;50651:62;50676:1;50679:6;50687:10;50699:13;50651:24;:62::i;:::-;50620:28;;;;;;;:16;:28;;;;;:93;50720:25;50637:10;50738:6;50720:5;:25::i;:::-;50751:72;:37;50758:12;50751:37;50789:10;50809:4;50816:6;50751:37;:72::i;:::-;50854:10;50835:38;;50842:10;50835:38;;;50866:6;50835:38;;;;;;:::i;28960:709::-;29092:10;:30;29106:16;29092:30;;29084:64;;;;;;;;;;;;:::i;:::-;29160:9;29155:510;29175:28;;;29155:510;;;29218:29;29250:6;:44;29257:17;;29275:1;29257:20;;;;;;;;;;;;:36;;;;;;;;;;:::i;:::-;29250:44;;;;;;;;;;;;;;;29218:76;;29303:142;29338:17;;29356:1;29338:20;;;;;;;;;;;;:36;;;;;;;;;;:::i;:::-;29384:11;29405:17;;29423:1;29405:20;;;;;;;;;;;;:32;;;29303:25;:142::i;:::-;;29486:17;;29504:1;29486:20;;;;;;;:38;;;:20;;;;;:38;;;;-1:-1:-1;29486:38:0;:::i;:::-;29454:70;;;;;;;;;;;;29566:17;;29584:1;29566:20;;;;;;;;;;;;:36;;;;;;;;;;:::i;:::-;29538:120;;;29612:17;;29630:1;29612:20;;;;;;;:38;;;:20;;;;;:38;;;;-1:-1:-1;29612:38:0;:::i;:::-;29538:120;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;29205:3:0;;29155:510;;;;28960:709;;:::o;37595:406::-;37713:7;37738:66;37812:51;37874:40;37899:14;37874:24;:40::i;:::-;37730:184;;;;;37928:68;37949:9;37960:15;37977:4;37983:12;37928:20;:68::i;:::-;37921:75;37595:406;-1:-1:-1;;;;;37595:406:0:o;48481:42::-;;;;;;;;;;;;;:::o;38111:424::-;38250:7;38273:66;38347:51;38409:40;38434:14;38409:24;:40::i;:::-;38265:184;;;;;38463:67;38484:9;38495:15;38512:4;38518:11;38463:20;:67::i;:::-;38456:74;38111:424;-1:-1:-1;;;;;;38111:424:0:o;46501:36::-;;;;;;:::o;62480:712::-;62625:18;36081:69;62686:9;62697:5;62704:6;62656:55;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;62646:66;;;;;;62625:87;;62718:14;62774:16;;62792:10;62745:58;;;;;;;;;:::i;:::-;;;;;;;;;;;;;62735:69;;;;;;62718:86;;62810:17;62830:26;62840:6;62848:1;62851;62854;62830:26;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;62830:26:0;;;;;;-1:-1:-1;;62870:23:0;;;62862:53;;;;;;;;;;;;:::i;:::-;62938:18;;;;;;;:7;:18;;;;;:20;;;;;;;;62929:29;;62921:55;;;;;;;;;;;;:::i;:::-;63009:6;62990:15;:25;;62982:56;;;;;;;;;;;;:::i;:::-;63044:66;63060:9;63071;63082:27;63044:15;:66::i;:::-;63116:71;63132:9;63143;63154:32;63116:15;:71::i;:::-;62480:712;;;;;;;;;:::o;28266:41::-;;;:::o;57953:742::-;58120:19;;;58112:45;;;;;;;;;;;;:::i;:::-;58221:8;58202:15;:27;;58194:58;;;;;;;;;;;;:::i;:::-;58286:14;;;58258:25;58286:14;;;:7;:14;;;;;;;;;58398:16;;58436:79;;58286:14;;58258:25;58436:79;;48320:95;;58294:5;;58471:7;;58480:5;;58286:14;;58506:8;;58436:79;;:::i;:::-;;;;;;;;;;;;;58426:90;;;;;;58348:178;;;;;;;;;:::i;:::-;;;;;;;;;;;;;58329:205;;;;;;58306:228;;58558:26;58568:6;58576:1;58579;58582;58558:26;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;58549:35;;:5;:35;;;58541:65;;;;;;;;;;;;:::i;:::-;58629:24;:17;58651:1;58629:21;:24::i;:::-;58612:14;;;;;;;:7;:14;;;;;:41;58659:31;58620:5;58675:7;58684:5;58659:8;:31::i;36507:157::-;36605:54;36621:10;36633:9;36644:14;36605:15;:54::i;:::-;36507:157;;:::o;17101:165::-;17234:18;;;;17210:7;17234:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;17101:165::o;47087:36::-;47122:1;47087:36;:::o;28353:43::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;55690:1025::-;55904:27;;;55859:7;55904:27;;;:16;:27;;;;;;55941:24;55937:53;;55982:1;55975:8;;;;;55937:53;55996:37;56042:57;56084:14;56042:37;:15;56062:16;56042:19;:37::i;:::-;:41;;:57::i;:::-;55996:103;;56142:19;56110:29;:51;56106:573;;;56193:1;56171:23;;56106:573;;;56215:29;56288:21;56256:29;:53;56255:117;;56351:21;56255:117;;;56323:15;56255:117;56215:157;;56409:19;56385:21;:43;56381:292;;;56447:19;56440:26;;;;;;;56381:292;56513:151;56633:30;:15;56653:9;56633:19;:30::i;:::-;56525:82;56572:34;:9;56586:19;56572:13;:34::i;:::-;56525:42;:15;56545:21;56525:19;:42::i;:::-;:46;;:82::i;:::-;56513:119;;:151::i;:::-;56491:173;;56106:573;;-1:-1:-1;56691:19:0;55690:1025;-1:-1:-1;;;;;55690:1025:0:o;61362:718::-;61548:18;35940:88;61632:9;61651:14;61643:23;;;;;;;;61668:5;61675:6;61594:88;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;61575:115;;;;;;61548:142;;61696:14;61752:16;;61770:10;61723:58;;;;;;;;;:::i;:::-;;;;;;;;;;;;;61713:69;;;;;;61696:86;;61788:17;61808:26;61818:6;61826:1;61829;61832;61808:26;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;61808:26:0;;;;;;-1:-1:-1;;61848:23:0;;;61840:53;;;;;;;;;;;;:::i;:::-;61916:18;;;;;;;:7;:18;;;;;:20;;;;;;;;61907:29;;61899:55;;;;;;;;;;;;:::i;:::-;61987:6;61968:15;:25;;61960:56;;;;;;;;;;;;:::i;:::-;62022:53;62038:9;62049;62060:14;62022:15;:53::i;:::-;61362:718;;;;;;;;;;:::o;6845:162::-;6903:7;6930:5;;;6949:6;;;;6941:46;;;;;;;;;;;;:::i;22957:82::-;23013:9;:21;;;;;;;;;;;;;;;22957:82::o;3071:98::-;3154:10;3071:98;:::o;22312:338::-;22425:19;;;22417:68;;;;;;;;;;;;:::i;:::-;22499:21;;;22491:68;;;;;;;;;;;;:::i;:::-;22566:18;;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;;:36;;;22613:32;;;;;22596:6;;22613:32;:::i;:::-;;;;;;;;22312:338;;;:::o;7251:128::-;7309:7;7331:43;7335:1;7338;7331:43;;;;;;;;;;;;;;;;;:3;:43::i;54361:539::-;54490:7;54505:22;54536:73;54561:4;54575;54582:11;54595:13;:11;:13::i;54536:73::-;54642:26;;;54615:24;54642:26;;;:20;:26;;;;;;54505:104;;-1:-1:-1;54615:24:0;54642:46;;54505:104;54642:30;:46::i;:::-;54615:73;-1:-1:-1;54699:19:0;;54695:171;;54732:13;54728:83;;;54757:26;;;;;;;:20;:26;;;;;:45;;;54728:83;54823:36;54838:4;54844:14;54823:36;;;;;;;:::i;:::-;;;;;;;;54879:16;54361:539;-1:-1:-1;;;;;54361:539:0:o;21527:388::-;21606:21;;;21598:67;;;;;;;;;;;;:::i;:::-;21672:49;21693:7;21710:1;21714:6;21672:20;:49::i;:::-;21749:68;21772:6;21749:68;;;;;;;;;;;;;;;;;:18;;;:9;:18;;;;;;;;;;;;:68;:22;:68::i;:::-;21728:18;;;:9;:18;;;;;;;;;;:89;21838:12;;:24;;21855:6;21838:16;:24::i;:::-;21823:12;:39;21873:37;;21899:1;;21873:37;;;;;;;;21903:6;;21873:37;:::i;:::-;;;;;;;;21527:388;;:::o;24923:184::-;25017:85;25036:5;25066:23;;;25091:2;25095:5;25043:58;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25017:18;:85::i;53193:822::-;53294:21;53318:15;53328:4;53318:9;:15::i;:::-;53294:39;;53353:57;53384:4;53390:13;53405:4;53353:30;:57::i;:::-;;53446:2;53438:10;;:4;:10;;;53434:537;;53458:19;53480:13;53490:2;53480:9;:13::i;:::-;53458:35;;53501:53;53532:2;53536:11;53549:4;53501:30;:53::i;:::-;-1:-1:-1;53596:22:0;;;53563:30;53596:22;;;:16;:22;;;;;;53649:113;53596:22;53715:6;53731:2;53743:11;53649:24;:113::i;:::-;53626:20;;;;;;;:16;:20;;;;;:136;53864:23;;;:54;;;;-1:-1:-1;53891:27:0;;;53864:54;53860:105;;;53930:22;;;53955:1;53930:22;;;:16;:22;;;;;:26;53860:105;53434:537;;;53977:33;53993:4;53999:2;54003:6;53977:15;:33::i;:::-;53193:822;;;;:::o;7643:189::-;7745:7;7776:12;7768:6;;;;7760:29;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;7807:5:0;;;7643:189::o;39259:602::-;39392:23;;;39384:53;;;;;;;;;;;;:::i;:::-;39449:45;39498:40;39523:14;39498:24;:40::i;:::-;39444:94;;;;39545:24;39572:20;39582:9;39572;:20::i;:::-;39545:47;;39599:25;39627:35;39641:9;39652;39627:13;:35::i;:::-;39669:20;;;;;;;;;;;;;;;:32;;;;;;;;;;;;;39599:63;-1:-1:-1;39708:84:0;39599:63;39669:32;39759:16;39777:14;39708:20;:84::i;:::-;39830:9;39803:53;;39819:9;39803:53;;;39841:14;39803:53;;;;;;:::i;:::-;;;;;;;;39259:602;;;;;;:::o;60266:612::-;60386:56;;;;60595:14;:45;;;;;;;;;60591:283;;;-1:-1:-1;60658:16:0;;-1:-1:-1;60676:22:0;;-1:-1:-1;60700:16:0;60650:67;;60591:283;-1:-1:-1;60755:26:0;;-1:-1:-1;60791:32:0;;-1:-1:-1;60833:26:0;60591:283;60266:612;;;;;:::o;45306:299::-;45475:20;;;;45430:7;45475:20;;;;;;;;;;;45430:7;;45475:20;45506:31;45502:68;;45554:9;45547:16;;;;;57431:90;47122:1;57431:90;:::o;32853:675::-;32982:7;;;33032:465;33056:6;:13;33052:1;:17;33032:465;;;33084:29;33116:6;:33;33123:6;33130:1;33123:9;;;;;;;;;;;;;;;;;;;:25;33116:33;;;;;;;;;;;;33123:25;33116:33;;;33212:17;;;;33241:29;;33325:9;;33116:33;;-1:-1:-1;33186:170:0;;33241:29;;;;;33282:31;;;;;33325:6;;33332:1;;33325:9;;;;;;;;;;;;:21;;;33186:14;:170::i;:::-;33157:199;;33382:108;33410:72;33422:6;33429:1;33422:9;;;;;;;;;;;;;;:22;;;33446:10;33458:11;:17;;:23;33476:4;33458:23;;;;;;;;;;;;;;;;33410:11;:72::i;:::-;33382:14;;:18;:108::i;:::-;33365:125;-1:-1:-1;;;33071:3:0;;33032:465;;;-1:-1:-1;33509:14:0;32853:675;-1:-1:-1;;;32853:675:0:o;25111:216::-;25227:95;25246:5;25276:27;;;25305:4;25311:2;25315:5;25253:68;;;;;;;;;;:::i;31174:641::-;31363:13;;;;31318:7;31363:13;;;:6;:13;;;;;;;;31402:21;;;;;:15;;;:21;;;;;;31318:7;;31363:13;31318:7;;31481:56;31370:5;31363:13;31525:11;31481:25;:56::i;:::-;31462:75;;31561:8;31548:9;:21;31544:239;;31583:17;;31579:105;;31629:46;31641:12;31655:8;31665:9;31629:11;:46::i;:::-;31612:63;;31579:105;31692:21;;;;;;;;:15;;;:21;;;;;;;:32;;;31737:39;;;;;;;;;31716:8;;31737:39;:::i;:::-;;;;;;;;31544:239;-1:-1:-1;31796:14:0;31174:641;-1:-1:-1;;;;;;;31174:641:0:o;20884:348::-;20963:21;;;20955:65;;;;;;;;;;;;:::i;:::-;21027:49;21056:1;21060:7;21069:6;21027:20;:49::i;:::-;21098:12;;:24;;21115:6;21098:16;:24::i;:::-;21083:12;:39;21149:18;;;:9;:18;;;;;;;;;;;:30;;21172:6;21149:22;:30::i;:::-;21128:18;;;:9;:18;;;;;;;;;;;:51;;;;21190:37;;21128:18;;:9;21190:37;;;;21220:6;;21190:37;:::i;30080:689::-;30260:17;;;;30313:31;;30226:7;;30260:17;30313:31;;;;;30355:15;:38;;30351:74;;;-1:-1:-1;30410:8:0;-1:-1:-1;30403:15:0;;30351:74;30481:29;;30431:16;;30456:89;;30471:8;;30481:29;;30512:19;30533:11;30456:14;:89::i;:::-;30431:114;;30568:8;30556;:20;30552:126;;30606:8;30586:11;:17;;:28;;;;30645:15;30627:44;;;30662:8;30627:44;;;;;;:::i;:::-;;;;;;;;30552:126;30684:58;;;30726:15;30684:58;;;;;;;;;30756:8;-1:-1:-1;;;30080:689:0;;;;;:::o;41897:1211::-;42126:7;42164:12;42149:11;:27;;42141:60;;;;;;;;;;;;:::i;:::-;42233:21;;;42208:22;42233:21;;;;;;;;;;;42265:19;42261:62;;42301:15;42311:4;42301:9;:15::i;:::-;42294:22;;;;;42261:62;42372:15;;;;;;;;;;;;;;;42388:18;;;42372:35;;;;;;;:47;;;:62;-1:-1:-1;42368:131:0;;42451:15;;;;;;;;;;;;;;;42467:18;;;;42451:35;;;;;;:41;;;;;;;;-1:-1:-1;42444:48:0;;42368:131;42549:15;;;;;;;;;;;;;;;:18;;;;;;;;:30;;;:44;-1:-1:-1;42545:73:0;;;42610:1;42603:8;;;;;42545:73;42624:13;42663:18;;;42687:376;42702:5;42694;:13;42687:376;;;42760:1;42743:13;;;42742:19;42734:27;;42796:24;;:::i;:::-;-1:-1:-1;42823:15:0;;;;;;;;;;;;;;;:23;;;;;;;;;42796:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;42858:35;;42854:203;;;42912:14;;;42905:21;;;-1:-1:-1;42905:21:0;;-1:-1:-1;;;;42905:21:0;42854:203;42945:20;;:34;;;-1:-1:-1;42941:116:0;;;42999:6;42991:14;;42941:116;;;43047:1;43038:6;:10;43030:18;;42941:116;42687:376;;;;;-1:-1:-1;43075:15:0;;;;;;;;;;;;;;;:22;;;;;;;:28;;;;;;;;-1:-1:-1;;41897:1211:0;;;;;;:::o;8052:419::-;8110:7;8335:6;8331:35;;-1:-1:-1;8358:1:0;8351:8;;8331:35;8384:5;;;8388:1;8384;:5;:1;8403:5;;;;;:10;8395:56;;;;;;;;;;;;:::i;8902:124::-;8960:7;8982:39;8986:1;8989;8982:39;;;;;;;;;;;;;;;;;:3;:39::i;59050:1212::-;59192:22;;;;59162:27;59192:22;;;:16;:22;;;;;;;59248:20;;;;;;;;59192:22;;;;59248:20;59279:33;59275:80;;59344:4;59322:26;;59275:80;59364:31;;;59360:74;;-1:-1:-1;59425:2:0;59360:74;59440:127;59468:19;59495:17;59520:6;59534:27;59440:20;:127::i;:::-;59607:32;;;;59574:30;59607:32;;;:26;:32;;;;;;;59676:30;;;;;;;;59607:32;;;;59676:30;59717:36;59713:86;;59788:4;59763:29;;59713:86;59808:34;;;59804:80;;-1:-1:-1;59875:2:0;59804:80;59890:138;59918:22;59948:20;59976:6;59990:32;59890:20;:138::i;:::-;60139:15;;;;60164:34;;60160:98;;60208:43;;;;;:25;;;;;;:43;;60234:4;;60240:2;;60244:6;;60208:43;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;60160:98;59050:1212;;;;;;;;:::o;25680:555::-;25763:27;25771:5;25763:25;;;:27::i;:::-;25755:71;;;;;;;;;;;;:::i;:::-;25889:12;25903:23;25938:5;25930:19;;25950:4;25930:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25888:67;;;;25969:7;25961:52;;;;;;;;;;;;:::i;:::-;26024:17;;:21;26020:211;;26158:10;26147:30;;;;;;;;;;;;:::i;:::-;26139:85;;;;;;;;;;;;:::i;20114:520::-;20231:20;;;20223:70;;;;;;;;;;;;:::i;:::-;20307:23;;;20299:71;;;;;;;;;;;;:::i;:::-;20377:47;20398:6;20406:9;20417:6;20377:20;:47::i;:::-;20451:71;20473:6;20451:71;;;;;;;;;;;;;;;;;:17;;;:9;:17;;;;;;;;;;;;:71;:21;:71::i;:::-;20431:17;;;;:9;:17;;;;;;;;;;;:91;;;;20551:20;;;;;;;:32;;20576:6;20551:24;:32::i;:::-;20528:20;;;;:9;:20;;;;;;;;;;;;:55;;;;20594:35;;;;;;;;;;20622:6;;20594:35;:::i;40204:1390::-;40354:2;40346:10;;:4;:10;;;40342:37;;;40366:7;;40342:37;40393:66;40467:51;40529:40;40554:14;40529:24;:40::i;:::-;-1:-1:-1;40385:184:0;;-1:-1:-1;40385:184:0;-1:-1:-1;40580:18:0;;;;40576:514;;40665:21;;;40608:16;40665:21;;;;;;;;;;;40699:23;;40695:155;;40745:15;;;;;;;;;;;;;;;40761:22;;;40745:39;;;;;;;:45;;;;;;;-1:-1:-1;40695:155:0;;;40826:15;40836:4;40826:9;:15::i;:::-;40815:26;;40695:155;40858:146;40882:9;40901:15;40926:4;40948:8;40975:20;40948:8;40988:6;40975:12;:20::i;:::-;40858:14;:146::i;:::-;41018:65;;;;41046:20;:8;41059:6;41046:12;:20::i;:::-;41068:14;41018:65;;;;;;;:::i;:::-;;;;;;;;40576:514;;;41099:16;;;;41095:495;;41180:19;;;41125:16;41180:19;;;;;;;;;;;41211:21;;41207:147;;41255:13;;;;;;;;;;;;;;;41269:20;;;41255:35;;;;;;;:41;;;;;;;-1:-1:-1;41207:147:0;;;41332:13;41342:2;41332:9;:13::i;:::-;41321:24;;41207:147;41362:144;41386:9;41405:15;41430:2;41450:8;41477:20;41450:8;41490:6;41477:12;:20::i;41362:144::-;41520:63;;;;41546:20;:8;41559:6;41546:12;:20::i;:::-;41568:14;41520:63;;;;;;;:::i;:::-;;;;;;;;41095:495;;;40204:1390;;;;;;:::o;34565:693::-;34732:7;34758:22;;;:49;;-1:-1:-1;34790:17:0;;34758:49;:97;;;;34840:15;34817:19;:38;;;34758:97;:146;;;;34888:16;34865:19;:39;;;;34758:146;34747:198;;;-1:-1:-1;34926:12:0;34919:19;;34747:198;34951:24;35002:16;34984:15;:34;:71;;35040:15;34984:71;;;35021:16;34984:71;34951:104;-1:-1:-1;35061:17:0;35081:41;34951:104;35081:41;;;:20;:41::i;:::-;35061:61;-1:-1:-1;35141:112:0;35233:12;35141:78;35206:12;35141:60;35178:22;35141:32;:17;35061:61;35141:21;:32::i;:::-;:36;;:60::i;:112::-;35128:125;34565:693;-1:-1:-1;;;;;;;34565:693:0:o;33873:239::-;34004:7;34026:81;34084:22;34026:53;34051:27;:12;34068:9;34051:16;:27::i;:::-;34026:20;;:24;:53::i;9477:332::-;9579:7;9671:12;9664:5;9656:28;;;;;;;;;;;;;:::i;:::-;;9690:9;9706:1;9702;:5;;;;;;;9477:332;-1:-1:-1;;;;;9477:332:0:o;11651:586::-;11711:4;12150:20;;11997:66;12189:23;;;;;;:42;;-1:-1:-1;;12216:15:0;;;12181:51;-1:-1:-1;;11651:586:0:o;44152:813::-;44468:22;;;44387:20;44468:22;;;;;;;;;;;;44550:16;;;;;;;44418:12;;44468:22;44635:24;;;;;:101;;-1:-1:-1;44684:23:0;;;44669:39;;;;;;;;;;;:51;:67;;;;:51;;:67;44635:101;44624:337;;;44766:23;;;44751:39;;;;;;;;;;;:56;;;;;;;;;;;;;44624:337;;;44866:32;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;44828:35:0;;;;;;;;;:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;44906:22;;;;;;;;;;44828:70;44931:23;;44906:48;;44152:813;;;;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;14:198:2:-;84:20;;144:42;133:54;;123:65;;113:2;;202:1;199;192:12;217:158;300:20;;349:1;339:12;;329:2;;365:1;362;355:12;380:158;448:20;;508:4;497:16;;487:27;;477:2;;528:1;525;518:12;543:198;;655:2;643:9;634:7;630:23;626:32;623:2;;;676:6;668;661:22;623:2;704:31;725:9;704:31;:::i;746:274::-;;;875:2;863:9;854:7;850:23;846:32;843:2;;;896:6;888;881:22;843:2;924:31;945:9;924:31;:::i;:::-;914:41;;974:40;1010:2;999:9;995:18;974:40;:::i;:::-;964:50;;833:187;;;;;:::o;1025:342::-;;;;1171:2;1159:9;1150:7;1146:23;1142:32;1139:2;;;1192:6;1184;1177:22;1139:2;1220:31;1241:9;1220:31;:::i;:::-;1210:41;;1270:40;1306:2;1295:9;1291:18;1270:40;:::i;:::-;1260:50;;1357:2;1346:9;1342:18;1329:32;1319:42;;1129:238;;;;;:::o;1372:622::-;;;;;;;;1584:3;1572:9;1563:7;1559:23;1555:33;1552:2;;;1606:6;1598;1591:22;1552:2;1634:31;1655:9;1634:31;:::i;:::-;1624:41;;1684:40;1720:2;1709:9;1705:18;1684:40;:::i;:::-;1674:50;;1771:2;1760:9;1756:18;1743:32;1733:42;;1822:2;1811:9;1807:18;1794:32;1784:42;;1845:39;1879:3;1868:9;1864:19;1845:39;:::i;:::-;1835:49;;1931:3;1920:9;1916:19;1903:33;1893:43;;1983:3;1972:9;1968:19;1955:33;1945:43;;1542:452;;;;;;;;;;:::o;1999:303::-;;;2144:2;2132:9;2123:7;2119:23;2115:32;2112:2;;;2165:6;2157;2150:22;2112:2;2193:31;2214:9;2193:31;:::i;:::-;2183:41;;2243:53;2292:2;2281:9;2277:18;2243:53;:::i;2307:651::-;;;;;;;;2535:3;2523:9;2514:7;2510:23;2506:33;2503:2;;;2557:6;2549;2542:22;2503:2;2585:31;2606:9;2585:31;:::i;:::-;2575:41;;2635:53;2684:2;2673:9;2669:18;2635:53;:::i;2963:266::-;;;3092:2;3080:9;3071:7;3067:23;3063:32;3060:2;;;3113:6;3105;3098:22;3060:2;3141:31;3162:9;3141:31;:::i;:::-;3131:41;3219:2;3204:18;;;;3191:32;;-1:-1:-1;;;3050:179:2:o;3234:371::-;;;;3396:2;3384:9;3375:7;3371:23;3367:32;3364:2;;;3417:6;3409;3402:22;3364:2;3445:31;3466:9;3445:31;:::i;:::-;3435:41;;3523:2;3512:9;3508:18;3495:32;3485:42;;3546:53;3595:2;3584:9;3580:18;3546:53;:::i;:::-;3536:63;;3354:251;;;;;:::o;3610:545::-;;;;;;;3805:3;3793:9;3784:7;3780:23;3776:33;3773:2;;;3827:6;3819;3812:22;3773:2;3855:31;3876:9;3855:31;:::i;:::-;3845:41;;3933:2;3922:9;3918:18;3905:32;3895:42;;3984:2;3973:9;3969:18;3956:32;3946:42;;4007:38;4041:2;4030:9;4026:18;4007:38;:::i;:::-;3997:48;;4092:3;4081:9;4077:19;4064:33;4054:43;;4144:3;4133:9;4129:19;4116:33;4106:43;;3763:392;;;;;;;;:::o;4160:703::-;;;4342:2;4330:9;4321:7;4317:23;4313:32;4310:2;;;4363:6;4355;4348:22;4310:2;4408:9;4395:23;4437:18;4478:2;4470:6;4467:14;4464:2;;;4499:6;4491;4484:22;4464:2;4542:6;4531:9;4527:22;4517:32;;4587:7;4580:4;4576:2;4572:13;4568:27;4558:2;;4614:6;4606;4599:22;4558:2;4659;4646:16;4685:2;4677:6;4674:14;4671:2;;;4706:6;4698;4691:22;4671:2;4767:7;4762:2;4754:4;4746:6;4742:17;4738:2;4734:26;4730:35;4727:48;4724:2;;;4793:6;4785;4778:22;4724:2;4829;4821:11;;;;;4851:6;;-1:-1:-1;4300:563:2;;-1:-1:-1;;;;4300:563:2:o;4868:297::-;;4988:2;4976:9;4967:7;4963:23;4959:32;4956:2;;;5009:6;5001;4994:22;4956:2;5046:9;5040:16;5099:5;5092:13;5085:21;5078:5;5075:32;5065:2;;5126:6;5118;5111:22;5170:321;;5282:2;5270:9;5261:7;5257:23;5253:32;5250:2;;;5303:6;5295;5288:22;5250:2;5347:9;5334:23;5397:34;5390:5;5386:46;5379:5;5376:57;5366:2;;5452:6;5444;5437:22;5496:190;;5608:2;5596:9;5587:7;5583:23;5579:32;5576:2;;;5629:6;5621;5614:22;5576:2;-1:-1:-1;5657:23:2;;5566:120;-1:-1:-1;5566:120:2:o;5691:403::-;;;;;5854:3;5842:9;5833:7;5829:23;5825:33;5822:2;;;5876:6;5868;5861:22;5822:2;5917:9;5904:23;5894:33;;5974:2;5963:9;5959:18;5946:32;5936:42;;5997:40;6033:2;6022:9;6018:18;5997:40;:::i;:::-;5812:282;;;;-1:-1:-1;5987:50:2;;6084:2;6069:18;6056:32;;-1:-1:-1;;5812:282:2:o;6099:318::-;;6180:5;6174:12;6207:6;6202:3;6195:19;6223:63;6279:6;6272:4;6267:3;6263:14;6256:4;6249:5;6245:16;6223:63;:::i;:::-;6331:2;6319:15;6336:66;6315:88;6306:98;;;;6406:4;6302:109;;6150:267;-1:-1:-1;;6150:267:2:o;6422:139::-;6511:1;6504:5;6501:12;6491:2;;6517:9;6491:2;6537:18;;6481:80::o;6566:274::-;;6733:6;6727:13;6749:53;6795:6;6790:3;6783:4;6775:6;6771:17;6749:53;:::i;:::-;6818:16;;;;;6703:137;-1:-1:-1;;6703:137:2:o;6845:444::-;7115:66;7103:79;;7207:1;7198:11;;7191:27;;;;7243:2;7234:12;;7227:28;7280:2;7271:12;;7093:196::o;7294:226::-;7470:42;7458:55;;;;7440:74;;7428:2;7413:18;;7395:125::o;7525:398::-;7737:42;7806:15;;;7788:34;;7858:15;;;;7853:2;7838:18;;7831:43;7905:2;7890:18;;7883:34;;;;7715:2;7700:18;;7682:241::o;7928:297::-;8132:42;8120:55;;;;8102:74;;8207:2;8192:18;;8185:34;8090:2;8075:18;;8057:168::o;8230:187::-;8395:14;;8388:22;8370:41;;8358:2;8343:18;;8325:92::o;8422:177::-;8568:25;;;8556:2;8541:18;;8523:76::o;8604:614::-;8891:25;;;8935:42;9013:15;;;9008:2;8993:18;;8986:43;9065:15;;;;9060:2;9045:18;;9038:43;9112:2;9097:18;;9090:34;9155:3;9140:19;;9133:35;;;;9199:3;9184:19;;9177:35;8878:3;8863:19;;8845:373::o;9223:440::-;9454:25;;;9527:42;9515:55;;;;9510:2;9495:18;;9488:83;9602:2;9587:18;;9580:34;9645:2;9630:18;;9623:34;9441:3;9426:19;;9408:255::o;9668:512::-;9927:25;;;10000:42;9988:55;;;;9983:2;9968:18;;9961:83;10075:2;10060:18;;10053:34;;;;10118:2;10103:18;;10096:34;10161:3;10146:19;;10139:35;9914:3;9899:19;;9881:299::o;10185:512::-;10444:25;;;10500:2;10485:18;;10478:34;;;;10543:2;10528:18;;10521:34;;;;10586:2;10571:18;;10564:34;10647:42;10635:55;10629:3;10614:19;;10607:84;10431:3;10416:19;;10398:299::o;10702:398::-;10929:25;;;11002:4;10990:17;;;;10985:2;10970:18;;10963:45;11039:2;11024:18;;11017:34;11082:2;11067:18;;11060:34;10916:3;10901:19;;10883:217::o;11105:219::-;;11252:2;11241:9;11234:21;11272:46;11314:2;11303:9;11299:18;11291:6;11272:46;:::i;11826:218::-;11974:2;11959:18;;11986:52;11963:9;12020:6;11986:52;:::i;12275:399::-;12477:2;12459:21;;;12516:2;12496:18;;;12489:30;12555:34;12550:2;12535:18;;12528:62;12626:5;12621:2;12606:18;;12599:33;12664:3;12649:19;;12449:225::o;12679:398::-;12881:2;12863:21;;;12920:2;12900:18;;;12893:30;12959:34;12954:2;12939:18;;12932:62;13030:4;13025:2;13010:18;;13003:32;13067:3;13052:19;;12853:224::o;13082:351::-;13284:2;13266:21;;;13323:2;13303:18;;;13296:30;13362:29;13357:2;13342:18;;13335:57;13424:2;13409:18;;13256:177::o;13438:343::-;13640:2;13622:21;;;13679:2;13659:18;;;13652:30;13718:21;13713:2;13698:18;;13691:49;13772:2;13757:18;;13612:169::o;13786:356::-;13988:2;13970:21;;;14007:18;;;14000:30;14066:34;14061:2;14046:18;;14039:62;14133:2;14118:18;;13960:182::o;14147:341::-;14349:2;14331:21;;;14388:2;14368:18;;;14361:30;14427:19;14422:2;14407:18;;14400:47;14479:2;14464:18;;14321:167::o;14493:345::-;14695:2;14677:21;;;14734:2;14714:18;;;14707:30;14773:23;14768:2;14753:18;;14746:51;14829:2;14814:18;;14667:171::o;14843:397::-;15045:2;15027:21;;;15084:2;15064:18;;;15057:30;15123:34;15118:2;15103:18;;15096:62;15194:3;15189:2;15174:18;;15167:31;15230:3;15215:19;;15017:223::o;15245:410::-;15447:2;15429:21;;;15486:2;15466:18;;;15459:30;15525:34;15520:2;15505:18;;15498:62;15596:16;15591:2;15576:18;;15569:44;15645:3;15630:19;;15419:236::o;15660:342::-;15862:2;15844:21;;;15901:2;15881:18;;;15874:30;15940:20;15935:2;15920:18;;15913:48;15993:2;15978:18;;15834:168::o;16007:337::-;16209:2;16191:21;;;16248:2;16228:18;;;16221:30;16287:15;16282:2;16267:18;;16260:43;16335:2;16320:18;;16181:163::o;16349:345::-;16551:2;16533:21;;;16590:2;16570:18;;;16563:30;16629:23;16624:2;16609:18;;16602:51;16685:2;16670:18;;16523:171::o;16699:337::-;16901:2;16883:21;;;16940:2;16920:18;;;16913:30;16979:15;16974:2;16959:18;;16952:43;17027:2;17012:18;;16873:163::o;17041:397::-;17243:2;17225:21;;;17282:2;17262:18;;;17255:30;17321:34;17316:2;17301:18;;17294:62;17392:3;17387:2;17372:18;;17365:31;17428:3;17413:19;;17215:223::o;17443:401::-;17645:2;17627:21;;;17684:2;17664:18;;;17657:30;17723:34;17718:2;17703:18;;17696:62;17794:7;17789:2;17774:18;;17767:35;17834:3;17819:19;;17617:227::o;17849:347::-;18051:2;18033:21;;;18090:2;18070:18;;;18063:30;18129:25;18124:2;18109:18;;18102:53;18187:2;18172:18;;18023:173::o;18201:400::-;18403:2;18385:21;;;18442:2;18422:18;;;18415:30;18481:34;18476:2;18461:18;;18454:62;18552:6;18547:2;18532:18;;18525:34;18591:3;18576:19;;18375:226::o;18606:344::-;18808:2;18790:21;;;18847:2;18827:18;;;18820:30;18886:22;18881:2;18866:18;;18859:50;18941:2;18926:18;;18780:170::o;18955:406::-;19157:2;19139:21;;;19196:2;19176:18;;;19169:30;19235:34;19230:2;19215:18;;19208:62;19306:12;19301:2;19286:18;;19279:40;19351:3;19336:19;;19129:232::o;19366:351::-;19568:2;19550:21;;;19607:2;19587:18;;;19580:30;19646:29;19641:2;19626:18;;19619:57;19708:2;19693:18;;19540:177::o;19722:341::-;19924:2;19906:21;;;19963:2;19943:18;;;19936:30;20002:19;19997:2;19982:18;;19975:47;20054:2;20039:18;;19896:167::o;20068:355::-;20270:2;20252:21;;;20309:2;20289:18;;;20282:30;20348:33;20343:2;20328:18;;20321:61;20414:2;20399:18;;20242:181::o;20428:355::-;20630:2;20612:21;;;20669:2;20649:18;;;20642:30;20708:33;20703:2;20688:18;;20681:61;20774:2;20759:18;;20602:181::o;20788:218::-;20964:34;20952:47;;;;20934:66;;20922:2;20907:18;;20889:117::o;21011:319::-;21195:34;21256:15;;;21238:34;;21308:15;;21303:2;21288:18;;21281:43;21173:2;21158:18;;21140:190::o;21335:390::-;21547:34;21608:15;;;21590:34;;21660:15;;;;21655:2;21640:18;;21633:43;21707:2;21692:18;;21685:34;;;;21525:2;21510:18;;21492:233::o;21912:289::-;22100:25;;;22088:2;22073:18;;22134:61;22191:2;22176:18;;22168:6;22134:61;:::i;22206:184::-;22378:4;22366:17;;;;22348:36;;22336:2;22321:18;;22303:87::o;22395:258::-;22467:1;22477:113;22491:6;22488:1;22485:13;22477:113;;;22567:11;;;22561:18;22548:11;;;22541:39;22513:2;22506:10;22477:113;;;22608:6;22605:1;22602:13;22599:2;;;-1:-1:-1;;22643:1:2;22625:16;;22618:27;22448:205::o"},"gasEstimates":{"creation":{"codeDepositCost":"3586000","executionCost":"infinite","totalCost":"infinite"},"external":{"COOLDOWN_SECONDS()":"infinite","DELEGATE_BY_TYPE_TYPEHASH()":"340","DELEGATE_TYPEHASH()":"319","DISTRIBUTION_END()":"infinite","DOMAIN_SEPARATOR()":"1140","EIP712_REVISION()":"infinite","EMISSION_MANAGER()":"infinite","PERMIT_TYPEHASH()":"297","PRECISION()":"307","REVISION()":"294","REWARDS_VAULT()":"infinite","REWARD_TOKEN()":"infinite","STAKED_TOKEN()":"infinite","UNSTAKE_WINDOW()":"infinite","_aaveGovernance()":"1113","_nonces(address)":"1330","_votingSnapshots(address,uint256)":"1508","_votingSnapshotsCounts(address)":"1307","allowance(address,address)":"infinite","approve(address,uint256)":"22650","assets(address)":"2241","balanceOf(address)":"infinite","claimRewards(address,uint256)":"infinite","configureAssets((uint128,uint256,address)[])":"infinite","cooldown()":"22402","decimals()":"1159","decreaseAllowance(address,uint256)":"infinite","delegate(address)":"infinite","delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","delegateByType(address,uint8)":"infinite","delegateByTypeBySig(address,uint8,uint256,uint256,uint8,bytes32,bytes32)":"infinite","getDelegateeByType(address,uint8)":"infinite","getNextCooldownTimestamp(uint256,uint256,address,uint256)":"infinite","getPowerAtBlock(address,uint256,uint8)":"infinite","getPowerCurrent(address,uint8)":"infinite","getTotalRewardsBalance(address)":"infinite","getUserAssetData(address,address)":"infinite","increaseAllowance(address,uint256)":"infinite","initialize()":"infinite","name()":"infinite","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","redeem(address,uint256)":"infinite","stake(address,uint256)":"infinite","stakerRewardsToClaim(address)":"1329","stakersCooldowns(address)":"1332","symbol()":"infinite","totalSupply()":"1097","totalSupplyAt(uint256)":"1210","transfer(address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"},"internal":{"_beforeTokenTransfer(address,address,uint256)":"infinite","_getDelegationDataByType(enum IGovernancePowerDelegationToken.DelegationType)":"116","_transfer(address,address,uint256)":"infinite","_updateCurrentUnclaimedRewards(address,uint256,bool)":"infinite","getRevision()":"15"}},"methodIdentifiers":{"COOLDOWN_SECONDS()":"72b49d63","DELEGATE_BY_TYPE_TYPEHASH()":"aa9fbe02","DELEGATE_TYPEHASH()":"41cbf54a","DISTRIBUTION_END()":"919cd40f","DOMAIN_SEPARATOR()":"3644e515","EIP712_REVISION()":"78160376","EMISSION_MANAGER()":"cbcbb507","PERMIT_TYPEHASH()":"30adf81f","PRECISION()":"aaf5eb68","REVISION()":"dde43cba","REWARDS_VAULT()":"946776cd","REWARD_TOKEN()":"99248ea7","STAKED_TOKEN()":"312f6b83","UNSTAKE_WINDOW()":"359c4a96","_aaveGovernance()":"c3863ada","_nonces(address)":"b9844d8d","_votingSnapshots(address,uint256)":"5b3cc0cf","_votingSnapshotsCounts(address)":"7bb73c97","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","assets(address)":"f11b8188","balanceOf(address)":"70a08231","claimRewards(address,uint256)":"9a99b4f0","configureAssets((uint128,uint256,address)[])":"b2a5dbfa","cooldown()":"787a08a6","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","delegate(address)":"5c19a95c","delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)":"c3cda520","delegateByType(address,uint8)":"dc937e1c","delegateByTypeBySig(address,uint8,uint256,uint256,uint8,bytes32,bytes32)":"f713d8a8","getDelegateeByType(address,uint8)":"6f50458d","getNextCooldownTimestamp(uint256,uint256,address,uint256)":"f1cc432a","getPowerAtBlock(address,uint256,uint8)":"c2ffbb91","getPowerCurrent(address,uint8)":"b2f4201d","getTotalRewardsBalance(address)":"8dbefee2","getUserAssetData(address,address)":"3373ee4c","increaseAllowance(address,uint256)":"39509351","initialize()":"8129fc1c","name()":"06fdde03","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","redeem(address,uint256)":"1e9a6950","stake(address,uint256)":"adc9772e","stakerRewardsToClaim(address)":"7e90d7ef","stakersCooldowns(address)":"091030c3","symbol()":"95d89b41","totalSupply()":"18160ddd","totalSupplyAt(uint256)":"981b24d0","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cooldownSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeWindow\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardsVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"emissionManager\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"distributionDuration\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emission\",\"type\":\"uint256\"}],\"name\":\"AssetConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"AssetIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Cooldown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"DelegatedPowerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsAccrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"UserIndexUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COOLDOWN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATE_BY_TYPE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISTRIBUTION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_REVISION\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMISSION_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKED_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_aaveGovernance\",\"outputs\":[{\"internalType\":\"contract ITransferHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_votingSnapshots\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"blockNumber\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_votingSnapshotsCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"emissionPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"emissionPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"}],\"internalType\":\"struct DistributionTypes.AssetConfigInput[]\",\"name\":\"assetsConfigInput\",\"type\":\"tuple[]\"}],\"name\":\"configureAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"delegateByType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateByTypeBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getDelegateeByType\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromCooldownTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToReceive\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toBalance\",\"type\":\"uint256\"}],\"name\":\"getNextCooldownTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getPowerAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getPowerCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getTotalRewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getUserAssetData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerRewardsToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakersCooldowns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aave*\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"claimRewards(address,uint256)\":{\"details\":\"Claims an `amount` of `REWARD_TOKEN` to the address `to`\",\"params\":{\"amount\":\"Amount to stake*\",\"to\":\"Address to stake for\"}},\"configureAssets((uint128,uint256,address)[])\":{\"details\":\"Configures the distribution of rewards for a list of assets\",\"params\":{\"assetsConfigInput\":\"The list of configurations to apply*\"}},\"cooldown()\":{\"details\":\"Activates the cooldown period to unstake - It can't be called if the user is not staking*\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"delegate(address)\":{\"details\":\"delegates all the powers to a specific user\",\"params\":{\"delegatee\":\"the user to which the power will be delegated*\"}},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates power from signatory to `delegatee`\",\"params\":{\"delegatee\":\"The address to delegate votes to\",\"expiry\":\"The time at which to expire the signature\",\"nonce\":\"The contract state required to match the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"delegateByType(address,uint8)\":{\"details\":\"delegates one specific power to a delegatee\",\"params\":{\"delegatee\":\"the user which delegated power has changed\",\"delegationType\":\"the type of delegation (VOTING_POWER, PROPOSITION_POWER)*\"}},\"delegateByTypeBySig(address,uint8,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates power from signatory to `delegatee`\",\"params\":{\"delegatee\":\"The address to delegate votes to\",\"delegationType\":\"the type of delegation (VOTING_POWER, PROPOSITION_POWER)\",\"expiry\":\"The time at which to expire the signature\",\"nonce\":\"The contract state required to match the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"getDelegateeByType(address,uint8)\":{\"details\":\"returns the delegatee of an user\",\"params\":{\"delegator\":\"the address of the delegator*\"}},\"getNextCooldownTimestamp(uint256,uint256,address,uint256)\":{\"details\":\"Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation  - If the timestamp of the sender is \\\"better\\\" or the timestamp of the recipient is 0, we take the one of the recipient  - Weighted average of from/to cooldown timestamps if:    # The sender doesn't have the cooldown activated (timestamp 0).    # The sender timestamp is expired    # The sender has a \\\"worse\\\" timestamp  - If the receiver's cooldown timestamp expired (too old), the next is 0\",\"params\":{\"amountToReceive\":\"Amount\",\"fromCooldownTimestamp\":\"Cooldown timestamp of the sender\",\"toAddress\":\"Address of the recipient\",\"toBalance\":\"Current balance of the receiver\"},\"returns\":{\"_0\":\"The new cooldown timestamp*\"}},\"getPowerAtBlock(address,uint256,uint8)\":{\"details\":\"returns the delegated power of a user at a certain block\",\"params\":{\"user\":\"the user*\"}},\"getPowerCurrent(address,uint8)\":{\"details\":\"returns the current delegated power of a user. The current power is the power delegated at the time of the last snapshot\",\"params\":{\"user\":\"the user*\"}},\"getTotalRewardsBalance(address)\":{\"details\":\"Return the total rewards pending to claim by an staker\",\"params\":{\"staker\":\"The staker address\"},\"returns\":{\"_0\":\"The rewards\"}},\"getUserAssetData(address,address)\":{\"details\":\"Returns the data of an user on a distribution\",\"params\":{\"asset\":\"The address of the reference asset of the distribution\",\"user\":\"Address of the user\"},\"returns\":{\"_0\":\"The new index*\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize()\":{\"details\":\"Called by the proxy contract*\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\",\"params\":{\"deadline\":\"the deadline timestamp, type(uint256).max for no deadline\",\"owner\":\"the owner of the funds\",\"r\":\"signature param\",\"s\":\"signature param\",\"spender\":\"the spender\",\"v\":\"signature param\",\"value\":\"the amount\"}},\"redeem(address,uint256)\":{\"details\":\"Redeems staked tokens, and stop earning rewards\",\"params\":{\"amount\":\"Amount to redeem*\",\"to\":\"Address to redeem to\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"totalSupplyAt(uint256)\":{\"details\":\"returns the total supply at a certain block number used by the voting strategy contracts to calculate the total votes needed for threshold/quorum In this initial implementation with no AAVE minting, simply returns the current supply A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future*\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"REVISION\":{\"details\":\"Start of Storage layout from StakedToken v1\"},\"_nonces\":{\"details\":\"owner => next valid nonce to submit with permit()\"},\"_votingDelegates\":{\"details\":\"To see the voting mappings, go to GovernancePowerWithSnapshot.sol\"}},\"title\":\"StakedToken\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DELEGATE_BY_TYPE_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the delegation struct used by the contract\"},\"REWARDS_VAULT()\":{\"notice\":\"Address to pull from the rewards, needs to have approved this contract\"},\"UNSTAKE_WINDOW()\":{\"notice\":\"Seconds available to redeem once the cooldown period is fullfilled\"}},\"notice\":\"Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":\"StakedTokenV2Rev3\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-12-10\\n */\\n\\n// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGovernancePowerDelegationToken {\\n  enum DelegationType {VOTING_POWER, PROPOSITION_POWER}\\n\\n  /**\\n   * @dev emitted when a user delegates to another\\n   * @param delegator the delegator\\n   * @param delegatee the delegatee\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    DelegationType delegationType\\n  );\\n\\n  /**\\n   * @dev emitted when an action changes the delegated power of a user\\n   * @param user the user which delegated power has changed\\n   * @param amount the amount of delegated power for the user\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external virtual;\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (address);\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view virtual returns (uint256);\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view virtual returns (uint256);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string internal _name;\\n  string internal _symbol;\\n  uint8 private _decimals;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n   * a default value of 18.\\n   *\\n   * To select a different value for {decimals}, use {_setupDecimals}.\\n   *\\n   * All three of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name, string memory symbol) public {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = 18;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        'ERC20: decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n   *\\n   * This is internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Sets {decimals} to a value other than the default one of 18.\\n   *\\n   * WARNING: This function should only be called from the constructor. Most\\n   * applications that interact with token contracts will not expect\\n   * {decimals} to ever change, and may work incorrectly if it does.\\n   */\\n  function _setupDecimals(uint8 decimals_) internal {\\n    _decimals = decimals_;\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be to transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\\ninterface IStakedAave {\\n  function stake(address to, uint256 amount) external;\\n\\n  function redeem(address to, uint256 amount) external;\\n\\n  function cooldown() external;\\n\\n  function claimRewards(address to, uint256 amount) external;\\n}\\n\\ninterface ITransferHook {\\n  function onTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint128 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\\ninterface IAaveDistributionManager {\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external;\\n}\\n\\n/**\\n * @title AaveDistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract AaveDistributionManager is IAaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  struct AssetData {\\n    uint128 emissionPerSecond;\\n    uint128 lastUpdateTimestamp;\\n    uint256 index;\\n    mapping(address => uint256) users;\\n  }\\n\\n  uint256 public immutable DISTRIBUTION_END;\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n\\n  constructor(address emissionManager, uint256 distributionDuration) public {\\n    DISTRIBUTION_END = block.timestamp.add(distributionDuration);\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /**\\n   * @dev Configures the distribution of rewards for a list of assets\\n   * @param assetsConfigInput The list of configurations to apply\\n   **/\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external\\n    override\\n  {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address underlyingAsset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex =\\n      _getAssetIndex(oldIndex, assetConfig.emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n    if (newIndex != oldIndex) {\\n      assetConfig.index = newIndex;\\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\\n    }\\n\\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards = accruedRewards.add(\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        )\\n      );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex =\\n        _getAssetIndex(\\n          assetConfig.index,\\n          assetConfig.emissionPerSecond,\\n          assetConfig.lastUpdateTimestamp,\\n          stakes[i].totalStaked\\n        );\\n\\n      accruedRewards = accruedRewards.add(\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\\n      );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= DISTRIBUTION_END\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp =\\n      block.timestamp > DISTRIBUTION_END ? DISTRIBUTION_END : block.timestamp;\\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\\n    return\\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\\n        currentIndex\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n}\\n\\n/**\\n * @notice implementation of the AAVE token contract\\n * @author Aave\\n */\\nabstract contract GovernancePowerDelegationERC20 is ERC20, IGovernancePowerDelegationToken {\\n  using SafeMath for uint256;\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH =\\n    keccak256('DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)');\\n\\n  bytes32 public constant DELEGATE_TYPEHASH =\\n    keccak256('Delegate(address delegatee,uint256 nonce,uint256 expiry)');\\n\\n  /// @dev snapshot of a value on a specific block, used for votes\\n  struct Snapshot {\\n    uint128 blockNumber;\\n    uint128 value;\\n  }\\n\\n  /**\\n   * @dev delegates one specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external override {\\n    _delegateByType(msg.sender, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external override {\\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    return _getDelegatee(delegator, delegates);\\n  }\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\\n  }\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view override returns (uint256) {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\\n  }\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   * used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\\n   * In this initial implementation with no AAVE minting, simply returns the current supply\\n   * A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view override returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _delegateByType(\\n    address delegator,\\n    address delegatee,\\n    DelegationType delegationType\\n  ) internal {\\n    require(delegatee != address(0), 'INVALID_DELEGATEE');\\n\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    uint256 delegatorBalance = balanceOf(delegator);\\n\\n    address previousDelegatee = _getDelegatee(delegator, delegates);\\n\\n    delegates[delegator] = delegatee;\\n\\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\\n    emit DelegateChanged(delegator, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev moves delegated power from one user to another\\n   * @param from the user from which delegated power is moved\\n   * @param to the user that will receive the delegated power\\n   * @param amount the amount of delegated power to be moved\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _moveDelegatesByType(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    DelegationType delegationType\\n  ) internal {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    if (from != address(0)) {\\n      uint256 previous = 0;\\n      uint256 fromSnapshotsCount = snapshotsCounts[from];\\n\\n      if (fromSnapshotsCount != 0) {\\n        previous = snapshots[from][fromSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(from);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        from,\\n        uint128(previous),\\n        uint128(previous.sub(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(from, previous.sub(amount), delegationType);\\n    }\\n    if (to != address(0)) {\\n      uint256 previous = 0;\\n      uint256 toSnapshotsCount = snapshotsCounts[to];\\n      if (toSnapshotsCount != 0) {\\n        previous = snapshots[to][toSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(to);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        to,\\n        uint128(previous),\\n        uint128(previous.add(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(to, previous.add(amount), delegationType);\\n    }\\n  }\\n\\n  /**\\n   * @dev searches a snapshot by block number. Uses binary search.\\n   * @param snapshots the snapshots mapping\\n   * @param snapshotsCounts the number of snapshots\\n   * @param user the user for which the snapshot is being searched\\n   * @param blockNumber the block number being searched\\n   **/\\n  function _searchByBlockNumber(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address user,\\n    uint256 blockNumber\\n  ) internal view returns (uint256) {\\n    require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\\n\\n    uint256 snapshotsCount = snapshotsCounts[user];\\n\\n    if (snapshotsCount == 0) {\\n      return balanceOf(user);\\n    }\\n\\n    // First check most recent balance\\n    if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\\n      return snapshots[user][snapshotsCount - 1].value;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (snapshots[user][0].blockNumber > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint256 lower = 0;\\n    uint256 upper = snapshotsCount - 1;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Snapshot memory snapshot = snapshots[user][center];\\n      if (snapshot.blockNumber == blockNumber) {\\n        return snapshot.value;\\n      } else if (snapshot.blockNumber < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return snapshots[user][lower].value;\\n  }\\n\\n  /**\\n   * @dev returns the delegation data (snapshot, snapshotsCount, list of delegates) by delegation type\\n   * NOTE: Ideal implementation would have mapped this in a struct by delegation type. Unfortunately,\\n   * the AAVE token and StakeToken already include a mapping for the snapshots, so we require contracts\\n   * who inherit from this to provide access to the delegation data by overriding this method.\\n   * @param delegationType the type of delegation\\n   **/\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    virtual\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    );\\n\\n  /**\\n   * @dev Writes a snapshot for an owner of tokens\\n   * @param owner The owner of the tokens\\n   * @param oldValue The value before the operation that is gonna be executed after the snapshot\\n   * @param newValue The value after the operation\\n   */\\n  function _writeSnapshot(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address owner,\\n    uint128 oldValue,\\n    uint128 newValue\\n  ) internal {\\n    uint128 currentBlock = uint128(block.number);\\n\\n    uint256 ownerSnapshotsCount = snapshotsCounts[owner];\\n    mapping(uint256 => Snapshot) storage snapshotsOwner = snapshots[owner];\\n\\n    // Doing multiple operations in the same block\\n    if (\\n      ownerSnapshotsCount != 0 &&\\n      snapshotsOwner[ownerSnapshotsCount - 1].blockNumber == currentBlock\\n    ) {\\n      snapshotsOwner[ownerSnapshotsCount - 1].value = newValue;\\n    } else {\\n      snapshotsOwner[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\\n      snapshotsCounts[owner] = ownerSnapshotsCount + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the user delegatee. If a user never performed any delegation,\\n   * his delegated address will be 0x0. In that case we simply return the user itself\\n   * @param delegator the address of the user for which return the delegatee\\n   * @param delegates the array of delegates for a particular type of delegation\\n   **/\\n  function _getDelegatee(address delegator, mapping(address => address) storage delegates)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address previousDelegatee = delegates[delegator];\\n\\n    if (previousDelegatee == address(0)) {\\n      return delegator;\\n    }\\n\\n    return previousDelegatee;\\n  }\\n}\\n\\n/**\\n * @title ERC20WithSnapshot\\n * @notice ERC20 including snapshots of balances on transfer-related actions\\n * @author Aave\\n **/\\nabstract contract GovernancePowerWithSnapshot is GovernancePowerDelegationERC20 {\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @dev The following storage layout points to the prior StakedToken.sol implementation:\\n   * _snapshots => _votingSnapshots\\n   * _snapshotsCounts =>  _votingSnapshotsCounts\\n   * _aaveGovernance => _aaveGovernance\\n   */\\n  mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\\n  mapping(address => uint256) public _votingSnapshotsCounts;\\n\\n  /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\\n  /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\\n  /// to control all potential reentrancies by calling back the this contract\\n  ITransferHook public _aaveGovernance;\\n\\n  function _setAaveGovernance(ITransferHook aaveGovernance) internal virtual {\\n    _aaveGovernance = aaveGovernance;\\n  }\\n}\\n\\n/**\\n * @title StakedToken\\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\\n * @author Aave\\n **/\\ncontract StakedTokenV2Rev3 is\\n  IStakedAave,\\n  GovernancePowerWithSnapshot,\\n  VersionedInitializable,\\n  AaveDistributionManager\\n{\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev Start of Storage layout from StakedToken v1\\n  uint256 public constant REVISION = 3;\\n\\n  IERC20 public immutable STAKED_TOKEN;\\n  IERC20 public immutable REWARD_TOKEN;\\n  uint256 public immutable COOLDOWN_SECONDS;\\n\\n  /// @notice Seconds available to redeem once the cooldown period is fullfilled\\n  uint256 public immutable UNSTAKE_WINDOW;\\n\\n  /// @notice Address to pull from the rewards, needs to have approved this contract\\n  address public immutable REWARDS_VAULT;\\n\\n  mapping(address => uint256) public stakerRewardsToClaim;\\n  mapping(address => uint256) public stakersCooldowns;\\n\\n  /// @dev End of Storage layout from StakedToken v1\\n\\n  /// @dev To see the voting mappings, go to GovernancePowerWithSnapshot.sol\\n  mapping(address => address) internal _votingDelegates;\\n\\n  mapping(address => mapping(uint256 => Snapshot)) internal _propositionPowerSnapshots;\\n  mapping(address => uint256) internal _propositionPowerSnapshotsCounts;\\n  mapping(address => address) internal _propositionPowerDelegates;\\n\\n  bytes32 public DOMAIN_SEPARATOR;\\n  bytes public constant EIP712_REVISION = bytes('1');\\n  bytes32 internal constant EIP712_DOMAIN =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  /// @dev owner => next valid nonce to submit with permit()\\n  mapping(address => uint256) public _nonces;\\n\\n  event Staked(address indexed from, address indexed onBehalfOf, uint256 amount);\\n  event Redeem(address indexed from, address indexed to, uint256 amount);\\n\\n  event RewardsAccrued(address user, uint256 amount);\\n  event RewardsClaimed(address indexed from, address indexed to, uint256 amount);\\n\\n  event Cooldown(address indexed user);\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals,\\n    address governance\\n  ) public ERC20(name, symbol) AaveDistributionManager(emissionManager, distributionDuration) {\\n    STAKED_TOKEN = stakedToken;\\n    REWARD_TOKEN = rewardToken;\\n    COOLDOWN_SECONDS = cooldownSeconds;\\n    UNSTAKE_WINDOW = unstakeWindow;\\n    REWARDS_VAULT = rewardsVault;\\n    _aaveGovernance = ITransferHook(governance);\\n    ERC20._setupDecimals(decimals);\\n  }\\n\\n  /**\\n   * @dev Called by the proxy contract\\n   **/\\n  function initialize() external initializer {\\n    uint256 chainId;\\n\\n    //solium-disable-next-line\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN,\\n        keccak256(bytes(name())),\\n        keccak256(EIP712_REVISION),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n\\n    // Update lastUpdateTimestamp of stkAave to reward users since the end of the prior staking period\\n    AssetData storage assetData = assets[address(this)];\\n    assetData.lastUpdateTimestamp = 1620594720;\\n  }\\n\\n  function stake(address onBehalfOf, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    uint256 balanceOfUser = balanceOf(onBehalfOf);\\n\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(onBehalfOf, address(this), balanceOfUser, totalSupply());\\n    if (accruedRewards != 0) {\\n      emit RewardsAccrued(onBehalfOf, accruedRewards);\\n      stakerRewardsToClaim[onBehalfOf] = stakerRewardsToClaim[onBehalfOf].add(accruedRewards);\\n    }\\n\\n    stakersCooldowns[onBehalfOf] = getNextCooldownTimestamp(0, amount, onBehalfOf, balanceOfUser);\\n\\n    _mint(onBehalfOf, amount);\\n    IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit Staked(msg.sender, onBehalfOf, amount);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens, and stop earning rewards\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   **/\\n  function redeem(address to, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    //solium-disable-next-line\\n    uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\\n    require(\\n      block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\\n      'INSUFFICIENT_COOLDOWN'\\n    );\\n    require(\\n      block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n      'UNSTAKE_WINDOW_FINISHED'\\n    );\\n    uint256 balanceOfMessageSender = balanceOf(msg.sender);\\n\\n    uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\\n\\n    _updateCurrentUnclaimedRewards(msg.sender, balanceOfMessageSender, true);\\n\\n    _burn(msg.sender, amountToRedeem);\\n\\n    if (balanceOfMessageSender.sub(amountToRedeem) == 0) {\\n      stakersCooldowns[msg.sender] = 0;\\n    }\\n\\n    IERC20(STAKED_TOKEN).safeTransfer(to, amountToRedeem);\\n\\n    emit Redeem(msg.sender, to, amountToRedeem);\\n  }\\n\\n  /**\\n   * @dev Activates the cooldown period to unstake\\n   * - It can't be called if the user is not staking\\n   **/\\n  function cooldown() external override {\\n    require(balanceOf(msg.sender) != 0, 'INVALID_BALANCE_ON_COOLDOWN');\\n    //solium-disable-next-line\\n    stakersCooldowns[msg.sender] = block.timestamp;\\n\\n    emit Cooldown(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\\n   * @param to Address to stake for\\n   * @param amount Amount to stake\\n   **/\\n  function claimRewards(address to, uint256 amount) external override {\\n    uint256 newTotalRewards =\\n      _updateCurrentUnclaimedRewards(msg.sender, balanceOf(msg.sender), false);\\n    uint256 amountToClaim = (amount == type(uint256).max) ? newTotalRewards : amount;\\n\\n    stakerRewardsToClaim[msg.sender] = newTotalRewards.sub(amountToClaim, 'INVALID_AMOUNT');\\n\\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\\n\\n    emit RewardsClaimed(msg.sender, to, amountToClaim);\\n  }\\n\\n  /**\\n   * @dev Internal ERC20 _transfer of the tokenized staked tokens\\n   * @param from Address to transfer from\\n   * @param to Address to transfer to\\n   * @param amount Amount to transfer\\n   **/\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    uint256 balanceOfFrom = balanceOf(from);\\n    // Sender\\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\\n\\n    // Recipient\\n    if (from != to) {\\n      uint256 balanceOfTo = balanceOf(to);\\n      _updateCurrentUnclaimedRewards(to, balanceOfTo, true);\\n\\n      uint256 previousSenderCooldown = stakersCooldowns[from];\\n      stakersCooldowns[to] = getNextCooldownTimestamp(\\n        previousSenderCooldown,\\n        amount,\\n        to,\\n        balanceOfTo\\n      );\\n      // if cooldown was set and whole balance of sender was transferred - clear cooldown\\n      if (balanceOfFrom == amount && previousSenderCooldown != 0) {\\n        stakersCooldowns[from] = 0;\\n      }\\n    }\\n\\n    super._transfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Updates the user state related with his accrued rewards\\n   * @param user Address of the user\\n   * @param userBalance The current balance of the user\\n   * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\\n   * @return The unclaimed rewards that were added to the total accrued\\n   **/\\n  function _updateCurrentUnclaimedRewards(\\n    address user,\\n    uint256 userBalance,\\n    bool updateStorage\\n  ) internal returns (uint256) {\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(user, address(this), userBalance, totalSupply());\\n    uint256 unclaimedRewards = stakerRewardsToClaim[user].add(accruedRewards);\\n\\n    if (accruedRewards != 0) {\\n      if (updateStorage) {\\n        stakerRewardsToClaim[user] = unclaimedRewards;\\n      }\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n\\n    return unclaimedRewards;\\n  }\\n\\n  /**\\n   * @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\\n   *  - If the timestamp of the sender is \\\"better\\\" or the timestamp of the recipient is 0, we take the one of the recipient\\n   *  - Weighted average of from/to cooldown timestamps if:\\n   *    # The sender doesn't have the cooldown activated (timestamp 0).\\n   *    # The sender timestamp is expired\\n   *    # The sender has a \\\"worse\\\" timestamp\\n   *  - If the receiver's cooldown timestamp expired (too old), the next is 0\\n   * @param fromCooldownTimestamp Cooldown timestamp of the sender\\n   * @param amountToReceive Amount\\n   * @param toAddress Address of the recipient\\n   * @param toBalance Current balance of the receiver\\n   * @return The new cooldown timestamp\\n   **/\\n  function getNextCooldownTimestamp(\\n    uint256 fromCooldownTimestamp,\\n    uint256 amountToReceive,\\n    address toAddress,\\n    uint256 toBalance\\n  ) public view returns (uint256) {\\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\\n    if (toCooldownTimestamp == 0) {\\n      return 0;\\n    }\\n\\n    uint256 minimalValidCooldownTimestamp =\\n      block.timestamp.sub(COOLDOWN_SECONDS).sub(UNSTAKE_WINDOW);\\n\\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\\n      toCooldownTimestamp = 0;\\n    } else {\\n      uint256 fromCooldownTimestamp =\\n        (minimalValidCooldownTimestamp > fromCooldownTimestamp)\\n          ? block.timestamp\\n          : fromCooldownTimestamp;\\n\\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\\n        return toCooldownTimestamp;\\n      } else {\\n        toCooldownTimestamp = (\\n          amountToReceive.mul(fromCooldownTimestamp).add(toBalance.mul(toCooldownTimestamp))\\n        )\\n          .div(amountToReceive.add(toBalance));\\n      }\\n    }\\n    return toCooldownTimestamp;\\n  }\\n\\n  /**\\n   * @dev Return the total rewards pending to claim by an staker\\n   * @param staker The staker address\\n   * @return The rewards\\n   */\\n  function getTotalRewardsBalance(address staker) external view returns (uint256) {\\n    DistributionTypes.UserStakeInput[] memory userStakeInputs =\\n      new DistributionTypes.UserStakeInput[](1);\\n    userStakeInputs[0] = DistributionTypes.UserStakeInput({\\n      underlyingAsset: address(this),\\n      stakedByUser: balanceOf(staker),\\n      totalStaked: totalSupply()\\n    });\\n    return stakerRewardsToClaim[staker].add(_getUnclaimedRewards(staker, userStakeInputs));\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   * @return The revision\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner the owner of the funds\\n   * @param spender the spender\\n   * @param value the amount\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(owner != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    uint256 currentValidNonce = _nonces[owner];\\n    bytes32 digest =\\n      keccak256(\\n        abi.encodePacked(\\n          '\\\\x19\\\\x01',\\n          DOMAIN_SEPARATOR,\\n          keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n        )\\n      );\\n\\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _nonces[owner] = currentValidNonce.add(1);\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\\n   * - On _transfer, it writes snapshots for both \\\"from\\\" and \\\"to\\\"\\n   * - On _mint, only for _to\\n   * - On _burn, only for _from\\n   * @param from the from address\\n   * @param to the to address\\n   * @param amount the amount to transfer\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    address votingFromDelegatee = _votingDelegates[from];\\n    address votingToDelegatee = _votingDelegates[to];\\n\\n    if (votingFromDelegatee == address(0)) {\\n      votingFromDelegatee = from;\\n    }\\n    if (votingToDelegatee == address(0)) {\\n      votingToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      votingFromDelegatee,\\n      votingToDelegatee,\\n      amount,\\n      DelegationType.VOTING_POWER\\n    );\\n\\n    address propPowerFromDelegatee = _propositionPowerDelegates[from];\\n    address propPowerToDelegatee = _propositionPowerDelegates[to];\\n\\n    if (propPowerFromDelegatee == address(0)) {\\n      propPowerFromDelegatee = from;\\n    }\\n    if (propPowerToDelegatee == address(0)) {\\n      propPowerToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      propPowerFromDelegatee,\\n      propPowerToDelegatee,\\n      amount,\\n      DelegationType.PROPOSITION_POWER\\n    );\\n\\n    // caching the aave governance address to avoid multiple state loads\\n    ITransferHook aaveGovernance = _aaveGovernance;\\n    if (aaveGovernance != ITransferHook(0)) {\\n      aaveGovernance.onTransfer(from, to, amount);\\n    }\\n  }\\n\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    override\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    )\\n  {\\n    if (delegationType == DelegationType.VOTING_POWER) {\\n      return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\\n    } else {\\n      return (\\n        _propositionPowerSnapshots,\\n        _propositionPowerSnapshotsCounts,\\n        _propositionPowerDelegates\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateByTypeBySig(\\n    address delegatee,\\n    DelegationType delegationType,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash =\\n      keccak256(\\n        abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\\n      );\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(signatory, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n}\\n\",\"keccak256\":\"0x193e8dd33d55c137ea32793b1f2c2f06b4b8936ee5c625e38766062c4f89fb43\",\"license\":\"agpl-3.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":447,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":453,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":455,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":457,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":459,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":461,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"_decimals","offset":0,"slot":"5","type":"t_uint8"},{"astId":2396,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"_votingSnapshots","offset":0,"slot":"6","type":"t_mapping(t_address,t_mapping(t_uint256,t_struct(Snapshot)1726_storage))"},{"astId":2400,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"_votingSnapshotsCounts","offset":0,"slot":"7","type":"t_mapping(t_address,t_uint256)"},{"astId":2403,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"_aaveGovernance","offset":0,"slot":"8","type":"t_contract(ITransferHook)968"},{"astId":1137,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"lastInitializedRevision","offset":0,"slot":"9","type":"t_uint256"},{"astId":1168,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"______gap","offset":0,"slot":"10","type":"t_array(t_uint256)50_storage"},{"astId":1204,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"assets","offset":0,"slot":"60","type":"t_mapping(t_address,t_struct(AssetData)1193_storage)"},{"astId":2449,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"stakerRewardsToClaim","offset":0,"slot":"61","type":"t_mapping(t_address,t_uint256)"},{"astId":2453,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"stakersCooldowns","offset":0,"slot":"62","type":"t_mapping(t_address,t_uint256)"},{"astId":2458,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"_votingDelegates","offset":0,"slot":"63","type":"t_mapping(t_address,t_address)"},{"astId":2464,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"_propositionPowerSnapshots","offset":0,"slot":"64","type":"t_mapping(t_address,t_mapping(t_uint256,t_struct(Snapshot)1726_storage))"},{"astId":2468,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"_propositionPowerSnapshotsCounts","offset":0,"slot":"65","type":"t_mapping(t_address,t_uint256)"},{"astId":2472,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"_propositionPowerDelegates","offset":0,"slot":"66","type":"t_mapping(t_address,t_address)"},{"astId":2474,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"DOMAIN_SEPARATOR","offset":0,"slot":"67","type":"t_bytes32"},{"astId":2495,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"_nonces","offset":0,"slot":"68","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(ITransferHook)968":{"encoding":"inplace","label":"contract ITransferHook","numberOfBytes":"20"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_mapping(t_uint256,t_struct(Snapshot)1726_storage))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_struct(Snapshot)1726_storage)"},"t_mapping(t_address,t_struct(AssetData)1193_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct AaveDistributionManager.AssetData)","numberOfBytes":"32","value":"t_struct(AssetData)1193_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_struct(Snapshot)1726_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot)","numberOfBytes":"32","value":"t_struct(Snapshot)1726_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(AssetData)1193_storage":{"encoding":"inplace","label":"struct AaveDistributionManager.AssetData","members":[{"astId":1184,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"emissionPerSecond","offset":0,"slot":"0","type":"t_uint128"},{"astId":1186,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"lastUpdateTimestamp","offset":16,"slot":"0","type":"t_uint128"},{"astId":1188,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"index","offset":0,"slot":"1","type":"t_uint256"},{"astId":1192,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"users","offset":0,"slot":"2","type":"t_mapping(t_address,t_uint256)"}],"numberOfBytes":"96"},"t_struct(Snapshot)1726_storage":{"encoding":"inplace","label":"struct GovernancePowerDelegationERC20.Snapshot","members":[{"astId":1723,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"blockNumber","offset":0,"slot":"0","type":"t_uint128"},{"astId":1725,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:StakedTokenV2Rev3","label":"value","offset":16,"slot":"0","type":"t_uint128"}],"numberOfBytes":"32"},"t_uint128":{"encoding":"inplace","label":"uint128","numberOfBytes":"16"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"DELEGATE_BY_TYPE_TYPEHASH()":{"notice":"The EIP-712 typehash for the delegation struct used by the contract"},"REWARDS_VAULT()":{"notice":"Address to pull from the rewards, needs to have approved this contract"},"UNSTAKE_WINDOW()":{"notice":"Seconds available to redeem once the cooldown period is fullfilled"}},"notice":"Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract","version":1}},"VersionedInitializable":{"abi":[],"devdoc":{"author":"Aave, inspired by the OpenZeppelin Initializable contract","details":"Helper contract to support initializer functions. To use it, replace the constructor with a function that has the `initializer` modifier. WARNING: Unlike constructors, initializer functions must be manually invoked. This applies both to deploying an Initializable contract, as well as extending an Initializable contract via inheritance. WARNING: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or ensure that all initializers are idempotent, because this is not dealt with automatically as with constructors.","kind":"dev","methods":{},"stateVariables":{"lastInitializedRevision":{"details":"Indicates that the contract has been initialized."}},"title":"VersionedInitializable","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Aave, inspired by the OpenZeppelin Initializable contract\",\"details\":\"Helper contract to support initializer functions. To use it, replace the constructor with a function that has the `initializer` modifier. WARNING: Unlike constructors, initializer functions must be manually invoked. This applies both to deploying an Initializable contract, as well as extending an Initializable contract via inheritance. WARNING: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or ensure that all initializers are idempotent, because this is not dealt with automatically as with constructors.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"lastInitializedRevision\":{\"details\":\"Indicates that the contract has been initialized.\"}},\"title\":\"VersionedInitializable\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":\"VersionedInitializable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-12-10\\n */\\n\\n// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGovernancePowerDelegationToken {\\n  enum DelegationType {VOTING_POWER, PROPOSITION_POWER}\\n\\n  /**\\n   * @dev emitted when a user delegates to another\\n   * @param delegator the delegator\\n   * @param delegatee the delegatee\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    DelegationType delegationType\\n  );\\n\\n  /**\\n   * @dev emitted when an action changes the delegated power of a user\\n   * @param user the user which delegated power has changed\\n   * @param amount the amount of delegated power for the user\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external virtual;\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (address);\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view virtual returns (uint256);\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view virtual returns (uint256);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string internal _name;\\n  string internal _symbol;\\n  uint8 private _decimals;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n   * a default value of 18.\\n   *\\n   * To select a different value for {decimals}, use {_setupDecimals}.\\n   *\\n   * All three of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name, string memory symbol) public {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = 18;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        'ERC20: decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n   *\\n   * This is internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Sets {decimals} to a value other than the default one of 18.\\n   *\\n   * WARNING: This function should only be called from the constructor. Most\\n   * applications that interact with token contracts will not expect\\n   * {decimals} to ever change, and may work incorrectly if it does.\\n   */\\n  function _setupDecimals(uint8 decimals_) internal {\\n    _decimals = decimals_;\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be to transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\\ninterface IStakedAave {\\n  function stake(address to, uint256 amount) external;\\n\\n  function redeem(address to, uint256 amount) external;\\n\\n  function cooldown() external;\\n\\n  function claimRewards(address to, uint256 amount) external;\\n}\\n\\ninterface ITransferHook {\\n  function onTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint128 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\\ninterface IAaveDistributionManager {\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external;\\n}\\n\\n/**\\n * @title AaveDistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract AaveDistributionManager is IAaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  struct AssetData {\\n    uint128 emissionPerSecond;\\n    uint128 lastUpdateTimestamp;\\n    uint256 index;\\n    mapping(address => uint256) users;\\n  }\\n\\n  uint256 public immutable DISTRIBUTION_END;\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n\\n  constructor(address emissionManager, uint256 distributionDuration) public {\\n    DISTRIBUTION_END = block.timestamp.add(distributionDuration);\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /**\\n   * @dev Configures the distribution of rewards for a list of assets\\n   * @param assetsConfigInput The list of configurations to apply\\n   **/\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external\\n    override\\n  {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address underlyingAsset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex =\\n      _getAssetIndex(oldIndex, assetConfig.emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n    if (newIndex != oldIndex) {\\n      assetConfig.index = newIndex;\\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\\n    }\\n\\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards = accruedRewards.add(\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        )\\n      );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex =\\n        _getAssetIndex(\\n          assetConfig.index,\\n          assetConfig.emissionPerSecond,\\n          assetConfig.lastUpdateTimestamp,\\n          stakes[i].totalStaked\\n        );\\n\\n      accruedRewards = accruedRewards.add(\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\\n      );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= DISTRIBUTION_END\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp =\\n      block.timestamp > DISTRIBUTION_END ? DISTRIBUTION_END : block.timestamp;\\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\\n    return\\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\\n        currentIndex\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n}\\n\\n/**\\n * @notice implementation of the AAVE token contract\\n * @author Aave\\n */\\nabstract contract GovernancePowerDelegationERC20 is ERC20, IGovernancePowerDelegationToken {\\n  using SafeMath for uint256;\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH =\\n    keccak256('DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)');\\n\\n  bytes32 public constant DELEGATE_TYPEHASH =\\n    keccak256('Delegate(address delegatee,uint256 nonce,uint256 expiry)');\\n\\n  /// @dev snapshot of a value on a specific block, used for votes\\n  struct Snapshot {\\n    uint128 blockNumber;\\n    uint128 value;\\n  }\\n\\n  /**\\n   * @dev delegates one specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external override {\\n    _delegateByType(msg.sender, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external override {\\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    return _getDelegatee(delegator, delegates);\\n  }\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\\n  }\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view override returns (uint256) {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\\n  }\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   * used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\\n   * In this initial implementation with no AAVE minting, simply returns the current supply\\n   * A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external view override returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _delegateByType(\\n    address delegator,\\n    address delegatee,\\n    DelegationType delegationType\\n  ) internal {\\n    require(delegatee != address(0), 'INVALID_DELEGATEE');\\n\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    uint256 delegatorBalance = balanceOf(delegator);\\n\\n    address previousDelegatee = _getDelegatee(delegator, delegates);\\n\\n    delegates[delegator] = delegatee;\\n\\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\\n    emit DelegateChanged(delegator, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev moves delegated power from one user to another\\n   * @param from the user from which delegated power is moved\\n   * @param to the user that will receive the delegated power\\n   * @param amount the amount of delegated power to be moved\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _moveDelegatesByType(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    DelegationType delegationType\\n  ) internal {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    if (from != address(0)) {\\n      uint256 previous = 0;\\n      uint256 fromSnapshotsCount = snapshotsCounts[from];\\n\\n      if (fromSnapshotsCount != 0) {\\n        previous = snapshots[from][fromSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(from);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        from,\\n        uint128(previous),\\n        uint128(previous.sub(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(from, previous.sub(amount), delegationType);\\n    }\\n    if (to != address(0)) {\\n      uint256 previous = 0;\\n      uint256 toSnapshotsCount = snapshotsCounts[to];\\n      if (toSnapshotsCount != 0) {\\n        previous = snapshots[to][toSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(to);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        to,\\n        uint128(previous),\\n        uint128(previous.add(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(to, previous.add(amount), delegationType);\\n    }\\n  }\\n\\n  /**\\n   * @dev searches a snapshot by block number. Uses binary search.\\n   * @param snapshots the snapshots mapping\\n   * @param snapshotsCounts the number of snapshots\\n   * @param user the user for which the snapshot is being searched\\n   * @param blockNumber the block number being searched\\n   **/\\n  function _searchByBlockNumber(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address user,\\n    uint256 blockNumber\\n  ) internal view returns (uint256) {\\n    require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\\n\\n    uint256 snapshotsCount = snapshotsCounts[user];\\n\\n    if (snapshotsCount == 0) {\\n      return balanceOf(user);\\n    }\\n\\n    // First check most recent balance\\n    if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\\n      return snapshots[user][snapshotsCount - 1].value;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (snapshots[user][0].blockNumber > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint256 lower = 0;\\n    uint256 upper = snapshotsCount - 1;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Snapshot memory snapshot = snapshots[user][center];\\n      if (snapshot.blockNumber == blockNumber) {\\n        return snapshot.value;\\n      } else if (snapshot.blockNumber < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return snapshots[user][lower].value;\\n  }\\n\\n  /**\\n   * @dev returns the delegation data (snapshot, snapshotsCount, list of delegates) by delegation type\\n   * NOTE: Ideal implementation would have mapped this in a struct by delegation type. Unfortunately,\\n   * the AAVE token and StakeToken already include a mapping for the snapshots, so we require contracts\\n   * who inherit from this to provide access to the delegation data by overriding this method.\\n   * @param delegationType the type of delegation\\n   **/\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    virtual\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    );\\n\\n  /**\\n   * @dev Writes a snapshot for an owner of tokens\\n   * @param owner The owner of the tokens\\n   * @param oldValue The value before the operation that is gonna be executed after the snapshot\\n   * @param newValue The value after the operation\\n   */\\n  function _writeSnapshot(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address owner,\\n    uint128 oldValue,\\n    uint128 newValue\\n  ) internal {\\n    uint128 currentBlock = uint128(block.number);\\n\\n    uint256 ownerSnapshotsCount = snapshotsCounts[owner];\\n    mapping(uint256 => Snapshot) storage snapshotsOwner = snapshots[owner];\\n\\n    // Doing multiple operations in the same block\\n    if (\\n      ownerSnapshotsCount != 0 &&\\n      snapshotsOwner[ownerSnapshotsCount - 1].blockNumber == currentBlock\\n    ) {\\n      snapshotsOwner[ownerSnapshotsCount - 1].value = newValue;\\n    } else {\\n      snapshotsOwner[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\\n      snapshotsCounts[owner] = ownerSnapshotsCount + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the user delegatee. If a user never performed any delegation,\\n   * his delegated address will be 0x0. In that case we simply return the user itself\\n   * @param delegator the address of the user for which return the delegatee\\n   * @param delegates the array of delegates for a particular type of delegation\\n   **/\\n  function _getDelegatee(address delegator, mapping(address => address) storage delegates)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address previousDelegatee = delegates[delegator];\\n\\n    if (previousDelegatee == address(0)) {\\n      return delegator;\\n    }\\n\\n    return previousDelegatee;\\n  }\\n}\\n\\n/**\\n * @title ERC20WithSnapshot\\n * @notice ERC20 including snapshots of balances on transfer-related actions\\n * @author Aave\\n **/\\nabstract contract GovernancePowerWithSnapshot is GovernancePowerDelegationERC20 {\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @dev The following storage layout points to the prior StakedToken.sol implementation:\\n   * _snapshots => _votingSnapshots\\n   * _snapshotsCounts =>  _votingSnapshotsCounts\\n   * _aaveGovernance => _aaveGovernance\\n   */\\n  mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\\n  mapping(address => uint256) public _votingSnapshotsCounts;\\n\\n  /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\\n  /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\\n  /// to control all potential reentrancies by calling back the this contract\\n  ITransferHook public _aaveGovernance;\\n\\n  function _setAaveGovernance(ITransferHook aaveGovernance) internal virtual {\\n    _aaveGovernance = aaveGovernance;\\n  }\\n}\\n\\n/**\\n * @title StakedToken\\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\\n * @author Aave\\n **/\\ncontract StakedTokenV2Rev3 is\\n  IStakedAave,\\n  GovernancePowerWithSnapshot,\\n  VersionedInitializable,\\n  AaveDistributionManager\\n{\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev Start of Storage layout from StakedToken v1\\n  uint256 public constant REVISION = 3;\\n\\n  IERC20 public immutable STAKED_TOKEN;\\n  IERC20 public immutable REWARD_TOKEN;\\n  uint256 public immutable COOLDOWN_SECONDS;\\n\\n  /// @notice Seconds available to redeem once the cooldown period is fullfilled\\n  uint256 public immutable UNSTAKE_WINDOW;\\n\\n  /// @notice Address to pull from the rewards, needs to have approved this contract\\n  address public immutable REWARDS_VAULT;\\n\\n  mapping(address => uint256) public stakerRewardsToClaim;\\n  mapping(address => uint256) public stakersCooldowns;\\n\\n  /// @dev End of Storage layout from StakedToken v1\\n\\n  /// @dev To see the voting mappings, go to GovernancePowerWithSnapshot.sol\\n  mapping(address => address) internal _votingDelegates;\\n\\n  mapping(address => mapping(uint256 => Snapshot)) internal _propositionPowerSnapshots;\\n  mapping(address => uint256) internal _propositionPowerSnapshotsCounts;\\n  mapping(address => address) internal _propositionPowerDelegates;\\n\\n  bytes32 public DOMAIN_SEPARATOR;\\n  bytes public constant EIP712_REVISION = bytes('1');\\n  bytes32 internal constant EIP712_DOMAIN =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  /// @dev owner => next valid nonce to submit with permit()\\n  mapping(address => uint256) public _nonces;\\n\\n  event Staked(address indexed from, address indexed onBehalfOf, uint256 amount);\\n  event Redeem(address indexed from, address indexed to, uint256 amount);\\n\\n  event RewardsAccrued(address user, uint256 amount);\\n  event RewardsClaimed(address indexed from, address indexed to, uint256 amount);\\n\\n  event Cooldown(address indexed user);\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals,\\n    address governance\\n  ) public ERC20(name, symbol) AaveDistributionManager(emissionManager, distributionDuration) {\\n    STAKED_TOKEN = stakedToken;\\n    REWARD_TOKEN = rewardToken;\\n    COOLDOWN_SECONDS = cooldownSeconds;\\n    UNSTAKE_WINDOW = unstakeWindow;\\n    REWARDS_VAULT = rewardsVault;\\n    _aaveGovernance = ITransferHook(governance);\\n    ERC20._setupDecimals(decimals);\\n  }\\n\\n  /**\\n   * @dev Called by the proxy contract\\n   **/\\n  function initialize() external initializer {\\n    uint256 chainId;\\n\\n    //solium-disable-next-line\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN,\\n        keccak256(bytes(name())),\\n        keccak256(EIP712_REVISION),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n\\n    // Update lastUpdateTimestamp of stkAave to reward users since the end of the prior staking period\\n    AssetData storage assetData = assets[address(this)];\\n    assetData.lastUpdateTimestamp = 1620594720;\\n  }\\n\\n  function stake(address onBehalfOf, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    uint256 balanceOfUser = balanceOf(onBehalfOf);\\n\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(onBehalfOf, address(this), balanceOfUser, totalSupply());\\n    if (accruedRewards != 0) {\\n      emit RewardsAccrued(onBehalfOf, accruedRewards);\\n      stakerRewardsToClaim[onBehalfOf] = stakerRewardsToClaim[onBehalfOf].add(accruedRewards);\\n    }\\n\\n    stakersCooldowns[onBehalfOf] = getNextCooldownTimestamp(0, amount, onBehalfOf, balanceOfUser);\\n\\n    _mint(onBehalfOf, amount);\\n    IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit Staked(msg.sender, onBehalfOf, amount);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens, and stop earning rewards\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   **/\\n  function redeem(address to, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    //solium-disable-next-line\\n    uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\\n    require(\\n      block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\\n      'INSUFFICIENT_COOLDOWN'\\n    );\\n    require(\\n      block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n      'UNSTAKE_WINDOW_FINISHED'\\n    );\\n    uint256 balanceOfMessageSender = balanceOf(msg.sender);\\n\\n    uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\\n\\n    _updateCurrentUnclaimedRewards(msg.sender, balanceOfMessageSender, true);\\n\\n    _burn(msg.sender, amountToRedeem);\\n\\n    if (balanceOfMessageSender.sub(amountToRedeem) == 0) {\\n      stakersCooldowns[msg.sender] = 0;\\n    }\\n\\n    IERC20(STAKED_TOKEN).safeTransfer(to, amountToRedeem);\\n\\n    emit Redeem(msg.sender, to, amountToRedeem);\\n  }\\n\\n  /**\\n   * @dev Activates the cooldown period to unstake\\n   * - It can't be called if the user is not staking\\n   **/\\n  function cooldown() external override {\\n    require(balanceOf(msg.sender) != 0, 'INVALID_BALANCE_ON_COOLDOWN');\\n    //solium-disable-next-line\\n    stakersCooldowns[msg.sender] = block.timestamp;\\n\\n    emit Cooldown(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\\n   * @param to Address to stake for\\n   * @param amount Amount to stake\\n   **/\\n  function claimRewards(address to, uint256 amount) external override {\\n    uint256 newTotalRewards =\\n      _updateCurrentUnclaimedRewards(msg.sender, balanceOf(msg.sender), false);\\n    uint256 amountToClaim = (amount == type(uint256).max) ? newTotalRewards : amount;\\n\\n    stakerRewardsToClaim[msg.sender] = newTotalRewards.sub(amountToClaim, 'INVALID_AMOUNT');\\n\\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\\n\\n    emit RewardsClaimed(msg.sender, to, amountToClaim);\\n  }\\n\\n  /**\\n   * @dev Internal ERC20 _transfer of the tokenized staked tokens\\n   * @param from Address to transfer from\\n   * @param to Address to transfer to\\n   * @param amount Amount to transfer\\n   **/\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    uint256 balanceOfFrom = balanceOf(from);\\n    // Sender\\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\\n\\n    // Recipient\\n    if (from != to) {\\n      uint256 balanceOfTo = balanceOf(to);\\n      _updateCurrentUnclaimedRewards(to, balanceOfTo, true);\\n\\n      uint256 previousSenderCooldown = stakersCooldowns[from];\\n      stakersCooldowns[to] = getNextCooldownTimestamp(\\n        previousSenderCooldown,\\n        amount,\\n        to,\\n        balanceOfTo\\n      );\\n      // if cooldown was set and whole balance of sender was transferred - clear cooldown\\n      if (balanceOfFrom == amount && previousSenderCooldown != 0) {\\n        stakersCooldowns[from] = 0;\\n      }\\n    }\\n\\n    super._transfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Updates the user state related with his accrued rewards\\n   * @param user Address of the user\\n   * @param userBalance The current balance of the user\\n   * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\\n   * @return The unclaimed rewards that were added to the total accrued\\n   **/\\n  function _updateCurrentUnclaimedRewards(\\n    address user,\\n    uint256 userBalance,\\n    bool updateStorage\\n  ) internal returns (uint256) {\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(user, address(this), userBalance, totalSupply());\\n    uint256 unclaimedRewards = stakerRewardsToClaim[user].add(accruedRewards);\\n\\n    if (accruedRewards != 0) {\\n      if (updateStorage) {\\n        stakerRewardsToClaim[user] = unclaimedRewards;\\n      }\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n\\n    return unclaimedRewards;\\n  }\\n\\n  /**\\n   * @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\\n   *  - If the timestamp of the sender is \\\"better\\\" or the timestamp of the recipient is 0, we take the one of the recipient\\n   *  - Weighted average of from/to cooldown timestamps if:\\n   *    # The sender doesn't have the cooldown activated (timestamp 0).\\n   *    # The sender timestamp is expired\\n   *    # The sender has a \\\"worse\\\" timestamp\\n   *  - If the receiver's cooldown timestamp expired (too old), the next is 0\\n   * @param fromCooldownTimestamp Cooldown timestamp of the sender\\n   * @param amountToReceive Amount\\n   * @param toAddress Address of the recipient\\n   * @param toBalance Current balance of the receiver\\n   * @return The new cooldown timestamp\\n   **/\\n  function getNextCooldownTimestamp(\\n    uint256 fromCooldownTimestamp,\\n    uint256 amountToReceive,\\n    address toAddress,\\n    uint256 toBalance\\n  ) public view returns (uint256) {\\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\\n    if (toCooldownTimestamp == 0) {\\n      return 0;\\n    }\\n\\n    uint256 minimalValidCooldownTimestamp =\\n      block.timestamp.sub(COOLDOWN_SECONDS).sub(UNSTAKE_WINDOW);\\n\\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\\n      toCooldownTimestamp = 0;\\n    } else {\\n      uint256 fromCooldownTimestamp =\\n        (minimalValidCooldownTimestamp > fromCooldownTimestamp)\\n          ? block.timestamp\\n          : fromCooldownTimestamp;\\n\\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\\n        return toCooldownTimestamp;\\n      } else {\\n        toCooldownTimestamp = (\\n          amountToReceive.mul(fromCooldownTimestamp).add(toBalance.mul(toCooldownTimestamp))\\n        )\\n          .div(amountToReceive.add(toBalance));\\n      }\\n    }\\n    return toCooldownTimestamp;\\n  }\\n\\n  /**\\n   * @dev Return the total rewards pending to claim by an staker\\n   * @param staker The staker address\\n   * @return The rewards\\n   */\\n  function getTotalRewardsBalance(address staker) external view returns (uint256) {\\n    DistributionTypes.UserStakeInput[] memory userStakeInputs =\\n      new DistributionTypes.UserStakeInput[](1);\\n    userStakeInputs[0] = DistributionTypes.UserStakeInput({\\n      underlyingAsset: address(this),\\n      stakedByUser: balanceOf(staker),\\n      totalStaked: totalSupply()\\n    });\\n    return stakerRewardsToClaim[staker].add(_getUnclaimedRewards(staker, userStakeInputs));\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   * @return The revision\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner the owner of the funds\\n   * @param spender the spender\\n   * @param value the amount\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(owner != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    uint256 currentValidNonce = _nonces[owner];\\n    bytes32 digest =\\n      keccak256(\\n        abi.encodePacked(\\n          '\\\\x19\\\\x01',\\n          DOMAIN_SEPARATOR,\\n          keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n        )\\n      );\\n\\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _nonces[owner] = currentValidNonce.add(1);\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\\n   * - On _transfer, it writes snapshots for both \\\"from\\\" and \\\"to\\\"\\n   * - On _mint, only for _to\\n   * - On _burn, only for _from\\n   * @param from the from address\\n   * @param to the to address\\n   * @param amount the amount to transfer\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    address votingFromDelegatee = _votingDelegates[from];\\n    address votingToDelegatee = _votingDelegates[to];\\n\\n    if (votingFromDelegatee == address(0)) {\\n      votingFromDelegatee = from;\\n    }\\n    if (votingToDelegatee == address(0)) {\\n      votingToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      votingFromDelegatee,\\n      votingToDelegatee,\\n      amount,\\n      DelegationType.VOTING_POWER\\n    );\\n\\n    address propPowerFromDelegatee = _propositionPowerDelegates[from];\\n    address propPowerToDelegatee = _propositionPowerDelegates[to];\\n\\n    if (propPowerFromDelegatee == address(0)) {\\n      propPowerFromDelegatee = from;\\n    }\\n    if (propPowerToDelegatee == address(0)) {\\n      propPowerToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      propPowerFromDelegatee,\\n      propPowerToDelegatee,\\n      amount,\\n      DelegationType.PROPOSITION_POWER\\n    );\\n\\n    // caching the aave governance address to avoid multiple state loads\\n    ITransferHook aaveGovernance = _aaveGovernance;\\n    if (aaveGovernance != ITransferHook(0)) {\\n      aaveGovernance.onTransfer(from, to, amount);\\n    }\\n  }\\n\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    override\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    )\\n  {\\n    if (delegationType == DelegationType.VOTING_POWER) {\\n      return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\\n    } else {\\n      return (\\n        _propositionPowerSnapshots,\\n        _propositionPowerSnapshotsCounts,\\n        _propositionPowerDelegates\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateByTypeBySig(\\n    address delegatee,\\n    DelegationType delegationType,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash =\\n      keccak256(\\n        abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\\n      );\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(signatory, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n}\\n\",\"keccak256\":\"0x193e8dd33d55c137ea32793b1f2c2f06b4b8936ee5c625e38766062c4f89fb43\",\"license\":\"agpl-3.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1137,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:VersionedInitializable","label":"lastInitializedRevision","offset":0,"slot":"0","type":"t_uint256"},{"astId":1168,"contract":"@aave/safety-module/contracts/proposals/extend-stkaave-distribution/StakedTokenV2Rev3.sol:VersionedInitializable","label":"______gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}